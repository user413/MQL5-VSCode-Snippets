{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	
//	################ USER413 ####################

//# EVENT HANDLING
"OnStart": {
	"prefix": "onstart",(
	"body":["int OnStart()","{","   $0","}"]
},
"OnStart2": {
	"prefix": "onstart",
	"body":["void OnStart()","{","   $0","}"]
},
"OnInit": {
	"prefix": "oninit",
	"body":["int OnInit()","{","   $0","}"]
},
"OnInit2": {
	"prefix": "oninit",
	"body":["void OnInit()","{","   $0","}"]
},
"OnDeinit": {
	"prefix": "ondeinit",
	"body":["void OnDeinit(${1:const int reason})","{","   $0","}"]
},
"OnTick": {
	"prefix": "ontick",
	"body":["void OnTick()","{","   $0","}"]
},
"OnCalculate": {
	"prefix": "oncalculate",
	"body":["int OnCalculate(${1:const int rates_total}, ${2:const int prev_calculated}, ${3:const int begin}, ${4:const double& price[]})","{","   $0","}"]
},
"OnCalculate2": {
	"prefix": "oncalculate",
	"body":["int OnCalculate(${1:const int rates_total}, ${2:const int prev_calculated}, ${3:const datetime& time{}}, ${4:const double& open[]}, ${5:const double& high[]}, ${6:const double& low[]}, ${7:const double& close[]}, ${8:const long& tick_volume[]}, ${9:const long& volume[]}, ${10:const int& spread[]})","{","   $0","}"]
},
"OnTimer": {
	"prefix": "ontimer",
	"body":["void OnTimer()","{","   $0","}"]
},
"OnTrade": {
	"prefix": "ontrade",
	"body":["void OnTrade()","{","   $0","}"]
},
"OnTradeTransaction": {
	"prefix": "ontradetransaction",
	"body":["void OnTradeTransaction(${1:const MqlTradeTransaction& trans}, ${2:const MqlTradeRequest& request}, ${3:const MqlTradeResult& result})","{","   $0","}"]
},
"OnBookEvent": {
	"prefix": "onbookevent",
	"body":["void OnBookEvent(${1:const string& symbol})","{","   $0","}"]
},
"OnChartEvent": {
	"prefix": "onchartevent",
	"body":["void OnChartEvent(${1:const int id}, ${2:const long& lparam}, ${3:const double& dparam}, ${4:const string& sparam})","{","   $0","}"]
},
"OnTester": {
	"prefix": "ontester",
	"body":["double OnTester()","{","   $0","}"]
},
"OnTesterInit": {
	"prefix": "ontesterinit",
	"body":["int OnTesterInit()","{","   $0","}"]
},
"OnTesterInit2": {
	"prefix": "ontesterinit",
	"body":["void OnTesterInit()","{","   $0","}"]
},
"OnTesterDeinit": {
	"prefix": "ontesterdeinit",
	"body":["void OnTesterDeinit()","{","   $0","}"]
},
"OnTesterPass": {
	"prefix": "ontesterpass",
	"body":["void OnTesterPass()","{","   $0","}"]
},



//# TRADE FUNCTIONS
"OrderCalcMargin": {
	"prefix": "ordercalcmargin",
	"body":["OrderCalcMargin(${1:ENUM_ORDER_TYPE action}, ${2:string symbol}, ${3:double volume}, ${4:double price}, ${5:double& margin})$0"]
},
"OrderCalcProfit": {
	"prefix": "ordercalcprofit",
	"body":["OrderCalcProfit(${1:ENUM_ORDER_TYPE action}, ${2:string symbol}, ${3:double volume}, ${4:double price_open}, ${5:double price_close}, ${6:double& profit})$0"]
},
"OrderCheck": {
	"prefix": "ordercheck",
	"body":["OrderCheck(${1:MqlTradeRequest& request}, ${2:MqlTradeCheckResult& result})$0"]
},
"OrderSend": {
	"prefix": "ordersend",
	"body":["OrderSend(${1:MqlTradeRequest& request}, ${2:MqlTradeResult& result})$0"]
},
"OrderSendAsync": {
	"prefix": "ordersendasync",
	"body":["OrderSendAsync(${1:MqlTradeRequest& request}, ${2:MqlTradeResult& result})$0"]
},
"PositionsTotal": {
	"prefix": "positionstotal",
	"body": "PositionsTotal()$0"
},
"PositionGetSymbol": {
	"prefix": "positiongetsymbol",
	"body":["PositionGetSymbol(${1:int index})$0"]
},
"PositionSelect": {
	"prefix": "positionselect",
	"body":["PositionSelect(${1:string symbol})$0"]
},
"PositionSelectByTicket": {
	"prefix": "positionselectbyticket",
	"body":["PositionSelectByTicket(${1:ulong ticket})$0"]
},
"PositionGetDouble": {
	"prefix": "positiongetdouble",
	"body":["PositionGetDouble(${1:ENUM_POSITION_PROPERTY_DOUBLE property_id})$0"]
},
"PositionGetDouble2": {
	"prefix": "positiongetdouble",
	"body":["PositionGetDouble(${1:ENUM_POSITION_PROPERTY_DOUBLE property_id}, ${2:double& double_var})$0"]
},
"PositionGetInteger": {
	"prefix": "positiongetinteger",
	"body":["PositionGetInteger(${1:ENUM_POSITION_PROPERTY_INTEGER property_id})$0"]
},
"PositionGetInteger2": {
	"prefix": "positiongetinteger",
	"body":["PositionGetInteger(${1:ENUM_POSITION_PROPERTY_INTEGER property_id}, ${2:long& long_var})$0"]
},
"PositionGetString": {
	"prefix": "positiongetstring",
	"body":["PositionGetString(${1:ENUM_POSITION_PROPERTY_STRING property_id})$0"]
},
"PositionGetString2": {
	"prefix": "positiongetstring",
	"body":["PositionGetString(${1:ENUM_POSITION_PROPERTY_STRING property_id}, ${2:string& string_var})$0"]
},
"PositionGetTicket": {
	"prefix": "positiongetticket",
	"body":["PositionGetTicket(${1:int index})$0"]
},
"OrdersTotal": {
	"prefix": "orderstotal",
	"body": "OrdersTotal()$0"
},
"OrderGetTicket": {
	"prefix": "ordergetticket",
	"body":["OrderGetTicket(${1:int index})$0"]
},
"OrderSelect": {
	"prefix": "orderselect",
	"body":["OrderSelect(${1:ulong ticket})$0"]
},
"OrderSelect2": {
	"prefix": "orderselect",
	"body":["OrderSelect(${1:ulong ticket})$0"]
},
"OrderGetDouble": {
	"prefix": "ordergetdouble",
	"body":["OrderGetDouble(${1:ENUM_ORDER_PROPERTY_DOUBLE property_id})$0"]
},
"OrderGetDouble2": {
	"prefix": "ordergetdouble",
	"body":["OrderGetDouble(${1:ENUM_ORDER_PROPERTY_DOUBLE property_id}, ${2:double& double_var})$0"]
},
"OrderGetInteger": {
	"prefix": "ordergetinteger",
	"body":["OrderGetInteger(${1:ENUM_ORDER_PROPERTY_INTEGER property_id})$0"]
},
"OrderGetInteger2": {
	"prefix": "ordergetinteger",
	"body":["OrderGetInteger(${1:ENUM_ORDER_PROPERTY_INTEGER property_id}, ${2:long& long_var})$0"]
},
"OrderGetString": {
	"prefix": "ordergetstring",
	"body":["OrderGetString(${1:ENUM_ORDER_PROPERTY_STRING property_id})$0"]
},
"OrderGetString2": {
	"prefix": "ordergetstring",
	"body":["OrderGetString(${1:ENUM_ORDER_PROPERTY_STRING property_id}, ${2:string& string_var})$0"]
},
"HistorySelect": {
	"prefix": "historyselect",
	"body":["HistorySelect(${1:datetime from_date}, ${2:datetime to_date})$0"]
},
"HistorySelectByPosition": {
	"prefix": "historyselectbyposition",
	"body":["HistorySelectByPosition(${1:long position_id})$0"]
},
"HistoryOrderSelect": {
	"prefix": "historyorderselect",
	"body":["HistoryOrderSelect(${1:ulong ticket})$0"]
},
"HistoryOrdersTotal": {
	"prefix": "historyorderstotal",
	"body": "HistoryOrdersTotal()$0"
},
"HistoryOrderGetTicket": {
	"prefix": "historyordergetticket",
	"body":["HistoryOrderGetTicket(${1:int index})$0"]
},
"HistoryOrderGetDouble": {
	"prefix": "historyordergetdouble",
	"body":["HistoryOrderGetDouble(${1:ulong ticket_number}, ${2:ENUM_ORDER_PROPERTY_DOUBLE property_id})$0"]
},
"HistoryOrderGetDouble2": {
	"prefix": "historyordergetdouble",
	"body":["HistoryOrderGetDouble(${1:ulong ticket_number}, ${2:ENUM_ORDER_PROPERTY_DOUBLE property_id}, ${3:double& double_var})$0"]
},
"HistoryOrderGetInteger": {
	"prefix": "historyordergetinteger",
	"body":["HistoryOrderGetInteger(${1:ulong ticket_number}, ${2:ENUM_ORDER_PROPERTY_INTEGER property_id})$0"]
},
"HistoryOrderGetInteger2": {
	"prefix": "historyordergetinteger",
	"body":["HistoryOrderGetInteger(${1:ulong ticket_number}, ${2:ENUM_ORDER_PROPERTY_INTEGER property_id}, ${3:long& long_var})$0"]
},
"HistoryOrderGetString": {
	"prefix": "historyordergetstring",
	"body":["HistoryOrderGetString(${1:ulong ticket_number}, ${2:ENUM_ORDER_PROPERTY_STRING property_id})$0"]
},
"HistoryOrderGetString2": {
	"prefix": "historyordergetstring",
	"body":["HistoryOrderGetString(${1:ulong ticket_number}, ${2:ENUM_ORDER_PROPERTY_STRING property_id}, ${3:string& string_var})$0"]
},
"HistoryDealSelect": {
	"prefix": "historydealselect",
	"body":["HistoryDealSelect(${1:ulong ticket})$0"]
},
"HistoryDealsTotal": {
	"prefix": "historydealstotal",
	"body": "HistoryDealsTotal()$0"
},
"HistoryDealGetTicket": {
	"prefix": "historydealgetticket",
	"body":["HistoryDealGetTicket(${1:int index})$0"]
},
"HistoryDealGetDouble": {
	"prefix": "historydealgetdouble",
	"body":["HistoryDealGetDouble(${1:ulong ticket_number}, ${2:ENUM_DEAL_PROPERTY_DOUBLE property_id})$0"]
},
"HistoryDealGetDouble2": {
	"prefix": "historydealgetdouble",
	"body":["HistoryDealGetDouble(${1:ulong ticket_number}, ${2:ENUM_DEAL_PROPERTY_DOUBLE property_id}, ${3:double& double_var})$0"]
},
"HistoryDealGetInteger": {
	"prefix": "historydealgetinteger",
	"body":["HistoryDealGetInteger(${1:ulong ticket_number}, ${2:ENUM_DEAL_PROPERTY_INTEGER property_id})$0"]
},
"HistoryDealGetInteger2": {
	"prefix": "historydealgetinteger",
	"body":["HistoryDealGetInteger(${1:ulong ticket_number}, ${2:ENUM_DEAL_PROPERTY_INTEGER property_id}, ${3:long& long_var})$0"]
},
"HistoryDealGetString": {
	"prefix": "historydealgetstring",
	"body":["HistoryDealGetString(${1:ulong ticket_number}, ${2:ENUM_DEAL_PROPERTY_STRING property_id})$0"]
},
"HistoryDealGetString2": {
	"prefix": "historydealgetstring",
	"body":["HistoryDealGetString(${1:ulong ticket_number}, ${2:ENUM_DEAL_PROPERTY_STRING property_id}, ${3:string& string_var})$0"]
},

// ## Object Functions
"ObjectCreate": {
	"prefix": "objectcreate",
	"body":["ObjectCreate(${1:long chart_id}, ${2:string name}, ${3:ENUM_OBJECT type}, ${4:sub_window nwin}, ${5:datetime time1}, ${6:double price1}, ${7:...}, ${8:datetime timeN=0}, ${9:double priceN=0}, ${10:...}, ${11:datetime time30=0}, ${12:double price30=0})$0"]
},
"ObjectName": {
	"prefix": "objectname",
	"body":["ObjectName(${1:long chart_id}, ${2:int pos}, ${3:int sub_window=-1}, ${4:int type=-1})$0"]
},
"ObjectDelete": {
	"prefix": "objectdelete",
	"body":["ObjectDelete(${1:long chart_id}, ${2:string name})$0"]
},
"ObjectsDeleteAll": {
	"prefix": "objectsdeleteall",
	"body":["ObjectsDeleteAll(${1:long chart_id}, ${2:int sub_window=-1}, ${3:int type=-1})$0"]
},
"ObjectsDeleteAll2": {
	"prefix": "objectsdeleteall",
	"body":["ObjectsDeleteAll(${1:long chart_id}, ${2:const string prefix}, ${3:int sub_window=-1}, ${4:int object_type=-1})$0"]
},
"ObjectFind": {
	"prefix": "objectfind",
	"body":["ObjectFind(${1:long chart_id}, ${2:string name})$0"]
},
"ObjectGetTimeByValue": {
	"prefix": "objectgettimebyvalue",
	"body":["ObjectGetTimeByValue(${1:long chart_id}, ${2:string name}, ${3:double value}, ${4:int line_id})$0"]
},
"ObjectGetValueByTime": {
	"prefix": "objectgetvaluebytime",
	"body":["ObjectGetValueByTime(${1:long chart_id}, ${2:string name}, ${3:datetime time}, ${4:int line_id})$0"]
},
"ObjectMove": {
	"prefix": "objectmove",
	"body":["ObjectMove(${1:long chart_id}, ${2:string name}, ${3:int point_index}, ${4:datetime time}, ${5:double price})$0"]
},
"ObjectsTotal": {
	"prefix": "objectstotal",
	"body":["ObjectsTotal(${1:long chart_id}, ${2:int sub_window=-1}, ${3:int type=-1})$0"]
},
"ObjectSetDouble": {
	"prefix": "objectsetdouble",
	"body":["ObjectSetDouble(${1:long chart_id}, ${2:string name}, ${3:ENUM_OBJECT_PROPERTY_DOUBLE prop_id}, ${4:double prop_value})$0"]
},
"ObjectSetDouble2": {
	"prefix": "objectsetdouble",
	"body":["ObjectSetDouble(${1:long chart_id}, ${2:string name}, ${3:ENUM_OBJECT_PROPERTY_DOUBLE prop_id}, ${4:int prop_modifier}, ${5:double prop_value})$0"]
},
"ObjectSetInteger": {
	"prefix": "objectsetinteger",
	"body":["ObjectSetInteger(${1:long chart_id}, ${2:string name}, ${3:ENUM_OBJECT_PROPERTY_INTEGER prop_id}, ${4:long prop_value})$0"]
},
"ObjectSetInteger2": {
	"prefix": "objectsetinteger",
	"body":["ObjectSetInteger(${1:long chart_id}, ${2:string name}, ${3:ENUM_OBJECT_PROPERTY_INTEGER prop_id}, ${4:int prop_modifier}, ${5:long prop_value})$0"]
},
"ObjectSetString": {
	"prefix": "objectsetstring",
	"body":["ObjectSetString(${1:long chart_id}, ${2:string name}, ${3:ENUM_OBJECT_PROPERTY_STRING prop_id}, ${4:string prop_value})$0"]
},
"ObjectSetString2": {
	"prefix": "objectsetstring",
	"body":["ObjectSetString(${1:long chart_id}, ${2:string name}, ${3:ENUM_OBJECT_PROPERTY_STRING prop_id}, ${4:int prop_modifier}, ${5:string prop_value})$0"]
},
"ObjectGetDouble": {
	"prefix": "objectgetdouble",
	"body":["ObjectGetDouble(${1:long chart_id}, ${2:string name}, ${3:ENUM_OBJECT_PROPERTY_DOUBLE prop_id}, ${4:int prop_modifier=0})$0"]
},
"ObjectGetDouble2": {
	"prefix": "objectgetdouble",
	"body":["ObjectGetDouble(${1:long chart_id}, ${2:string name}, ${3:ENUM_OBJECT_PROPERTY_DOUBLE prop_id}, ${4:int prop_modifier}, ${5:double& double_var})$0"]
},
"ObjectGetInteger": {
	"prefix": "objectgetinteger",
	"body":["ObjectGetInteger(${1:long chart_id}, ${2:string name}, ${3:ENUM_OBJECT_PROPERTY_INTEGER prop_id}, ${4:int prop_modifier=0})$0"]
},
"ObjectGetInteger2": {
	"prefix": "objectgetinteger",
	"body":["ObjectGetInteger(${1:long chart_id}, ${2:string name}, ${3:ENUM_OBJECT_PROPERTY_INTEGER prop_id}, ${4:int prop_modifier}, ${5:long& long_var})$0"]
},
"ObjectGetString": {
	"prefix": "objectgetstring",
	"body":["ObjectGetString(${1:long chart_id}, ${2:string name}, ${3:ENUM_OBJECT_PROPERTY_STRING prop_id}, ${4:int prop_modifier=0})$0"]
},
"ObjectGetString2": {
	"prefix": "objectgetstring",
	"body":["ObjectGetString(${1:long chart_id}, ${2:string name}, ${3:ENUM_OBJECT_PROPERTY_STRING prop_id}, ${4:int prop_modifier}, ${5:string& string_var})$0"]
},
"TextSetFont": {
	"prefix": "textsetfont",
	"body":["TextSetFont(${1:const string name}, ${2:int size}, ${3:uint flags}, ${4:int orientation=0})$0"]
},
"TextOut": {
	"prefix": "textout",
	"body":["TextOut(${1:const string text}, ${2:int x}, ${3:int y}, ${4:uint anchor}, ${5:uint &data[]}, ${6:uint width}, ${7:uint height}, ${8:uint color}, ${9:ENUM_COLOR_FORMAT color_format})$0"]
},
"TextGetSize": {
	"prefix": "textgetsize",
	"body":["TextGetSize(${1:const string text}, ${2:uint& width}, ${3:uint& height})$0"]
},

//   #Access to Timeseries and Indicator Data
"iBars": {
	"prefix": "ibars",
	"body":["iBars(${1:const string symbol}, ${2:ENUM_TIMEFRAMES timeframe})$0"]
},
"iBarShift": {
	"prefix": "ibarshift",
	"body":["iBarShift(${1:const string symbol}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:datetime time}, ${4:bool exact=false})$0"]
},
"iClose": {
	"prefix": "iclose",
	"body":["iClose(${1:const string symbol}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:int shift})$0"]
},
"iHigh": {
	"prefix": "ihigh",
	"body":["iHigh(${1:const string symbol}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:int shift})$0"]
},
"iHighest": {
	"prefix": "ihighest",
	"body":["iHighest(${1:const string symbol}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:ENUM_SERIESMODE type}, ${4:int count=WHOLE_ARRAY}, ${5:int start=0})$0"]
},
"iLow": {
	"prefix": "ilow",
	"body":["iLow(${1:const string symbol}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:int shift})$0"]
},
"iLowest": {
	"prefix": "ilowest",
	"body":["iLowest(${1:const string symbol}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:ENUM_SERIESMODE type}, ${4:int count=WHOLE_ARRAY}, ${5:int start=0})$0"]
},
"iOpen": {
	"prefix": "iopen",
	"body":["iOpen(${1:const string symbol}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:int shift})$0"]
},
"iTime": {
	"prefix": "itime",
	"body":["iTime(${1:const string symbol}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:int shift})$0"]
},
"iTickVolume": {
	"prefix": "itickvolume",
	"body":["iTickVolume(${1:const string symbol}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:int shift})$0"]
},
"iRealVolume": {
	"prefix": "irealvolume",
	"body":["iRealVolume(${1:const string symbol}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:int shift})$0"]
},
"iVolume": {
	"prefix": "ivolume",
	"body":["iVolume(${1:const string symbol}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:int shift})$0"]
},
"iSpread": {
	"prefix": "ispread",
	"body":["iSpread(${1:const string symbol}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:int shift})$0"]
},

//   # Chart Operations
"ChartApplyTemplate": {
	"prefix": "chartapplytemplate",
	"body":["ChartApplyTemplate(${1:long chart_id}, ${2:const string filename})$0"]
},
"ChartSaveTemplate": {
	"prefix": "chartsavetemplate",
	"body":["ChartSaveTemplate(${1:long chart_id}, ${2:const string filename})$0"]
},
"ChartWindowFind": {
	"prefix": "chartwindowfind",
	"body":["ChartWindowFind(${1:long chart_id}, ${2:string indicator_shortname})$0"]
},
"ChartWindowFind2": {
	"prefix": "chartwindowfind",
	"body": "ChartWindowFind()$0"
},
"ChartTimePriceToXY": {
	"prefix": "charttimepricetoxy",
	"body":["ChartTimePriceToXY(${1:long chart_id}, ${2:int sub_window}, ${3:datetime time}, ${4:double price}, ${5:int& x}, ${6:int& y})$0"]
},
"ChartXYToTimePrice": {
	"prefix": "chartxytotimeprice",
	"body":["ChartXYToTimePrice(${1:long chart_id}, ${2:int x}, ${3:int y}, ${4:int& sub_window}, ${5:datetime& time}, ${6:double& price})$0"]
},
"ChartOpen": {
	"prefix": "chartopen",
	"body":["ChartOpen(${1:string symbol}, ${2:ENUM_TIMEFRAMES period})$0"]
},
"ChartFirst": {
	"prefix": "chartfirst",
	"body": "ChartFirst()$0"
},
"ChartNext": {
	"prefix": "chartnext",
	"body":["ChartNext(${1:long chart_id})$0"]
},
"ChartClose": {
	"prefix": "chartclose",
	"body":["ChartClose(${1:long chart_id=0})$0"]
},
"ChartSymbol": {
	"prefix": "chartsymbol",
	"body":["ChartSymbol(${1:long chart_id=0})$0"]
},
"ChartPeriod": {
	"prefix": "chartperiod",
	"body":["ChartPeriod(${1:long chart_id=0})$0"]
},
"ChartRedraw": {
	"prefix": "chartredraw",
	"body":["ChartRedraw(${1:long chart_id=0})$0"]
},
"ChartSetDouble": {
	"prefix": "chartsetdouble",
	"body":["ChartSetDouble(${1:long chart_id}, ${2:int prop_id}, ${3:double value})$0"]
},
"ChartSetInteger": {
	"prefix": "chartsetinteger",
	"body":["ChartSetInteger(${1:long chart_id}, ${2:int prop_id}, ${3:long value})$0"]
},
"ChartSetInteger2": {
	"prefix": "chartsetinteger",
	"body":["ChartSetInteger(${1:long chart_id}, ${2:int prop_id}, ${3:int sub_window}, ${4:long value})$0"]
},
"ChartSetString": {
	"prefix": "chartsetstring",
	"body":["ChartSetString(${1:long chart_id}, ${2:int prop_id}, ${3:string str_value})$0"]
},
"ChartGetDouble": {
	"prefix": "chartgetdouble",
	"body":["ChartGetDouble(${1:long chart_id}, ${2:int prop_id}, ${3:int sub_window=0})$0"]
},
"ChartGetDouble2": {
	"prefix": "chartgetdouble",
	"body":["ChartGetDouble(${1:long chart_id}, ${2:int prop_id}, ${3:int sub_window}, ${4:double& double_var})$0"]
},
"ChartGetInteger": {
	"prefix": "chartgetinteger",
	"body":["ChartGetInteger(${1:long chart_id}, ${2:int prop_id}, ${3:int sub_window=0})$0"]
},
"ChartGetInteger2": {
	"prefix": "chartgetinteger",
	"body":["ChartGetInteger(${1:long chart_id}, ${2:int prop_id}, ${3:int sub_window}, ${4:long& long_var})$0"]
},
"ChartGetString": {
	"prefix": "chartgetstring",
	"body":["ChartGetString(${1:long chart_id}, ${2:int prop_id})$0"]
},
"ChartGetString2": {
	"prefix": "chartgetstring",
	"body":["ChartGetString(${1:long chart_id}, ${2:int prop_id}, ${3:string& string_var})$0"]
},
"ChartNavigate": {
	"prefix": "chartnavigate",
	"body":["ChartNavigate(${1:long chart_id}, ${2:ENUM_CHART_POSITION position}, ${3:int shift=0})$0"]
},
"ChartID": {
	"prefix": "chartid",
	"body": "ChartID()$0"
},
"ChartIndicatorAdd": {
	"prefix": "chartindicatoradd",
	"body":["ChartIndicatorAdd(${1:long chart_id}, ${2:int sub_window}, ${3:int indicator_handle})$0"]
},
"ChartIndicatorDelete": {
	"prefix": "chartindicatordelete",
	"body":["ChartIndicatorDelete(${1:long chart_id}, ${2:int sub_window}, ${3:const string indicator_shortname})$0"]
},
"ChartIndicatorGet": {
	"prefix": "chartindicatorget",
	"body":["ChartIndicatorGet(${1:long chart_id}, ${2:int sub_window}, ${3:const string indicator_shortname})$0"]
},
"ChartIndicatorName": {
	"prefix": "chartindicatorname",
	"body":["ChartIndicatorName(${1:long chart_id}, ${2:int sub_window}, ${3:int index})$0"]
},
"ChartIndicatorsTotal": {
	"prefix": "chartindicatorstotal",
	"body":["ChartIndicatorsTotal(${1:long chart_id}, ${2:int sub_window})$0"]
},
"ChartWindowOnDropped": {
	"prefix": "chartwindowondropped",
	"body": "ChartWindowOnDropped()$0"
},
"ChartPriceOnDropped": {
	"prefix": "chartpriceondropped",
	"body": "ChartPriceOnDropped()$0"
},
"ChartTimeOnDropped": {
	"prefix": "charttimeondropped",
	"body": "ChartTimeOnDropped()$0"
},
"ChartXOnDropped": {
	"prefix": "chartxondropped",
	"body": "ChartXOnDropped()$0"
},
"ChartYOnDropped": {
	"prefix": "chartyondropped",
	"body": "ChartYOnDropped()$0"
},
"ChartSetSymbolPeriod": {
	"prefix": "chartsetsymbolperiod",
	"body":["ChartSetSymbolPeriod(${1:long chart_id}, ${2:string symbol}, ${3:ENUM_TIMEFRAMES period})$0"]
},
"ChartScreenShot": {
	"prefix": "chartscreenshot",
	"body":["ChartScreenShot(${1:long chart_id}, ${2:string filename}, ${3:int width}, ${4:int height}, ${5:ENUM_ALIGN_MODE align_mode=ALIGN_RIGHT})$0"]
},

//   ##Technical Indicator Functions
"iAC": {
	"prefix": "iac",
	"body":["iAC(${1:string symbol}, ${2:ENUM_TIMEFRAMES period})$0"]
},
"iAD": {
	"prefix": "iad",
	"body":["iAD(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:ENUM_APPLIED_VOLUME applied_volume})$0"]
},
"iADX": {
	"prefix": "iadx",
	"body":["iADX(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int adx_period})$0"]
},
"iADXWilder": {
	"prefix": "iadxwilder",
	"body":["iADXWilder(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int adx_period})$0"]
},
"iAlligator": {
	"prefix": "ialligator",
	"body":["iAlligator(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int jaw_period}, ${4:int jaw_shift}, ${5:int teeth_period}, ${6:int teeth_shift}, ${7:int lips_period}, ${8:int lips_shift}, ${9:ENUM_MA_METHOD ma_method}, ${10:ENUM_APPLIED_PRICE applied_price})$0"]
},
"iAMA": {
	"prefix": "iama",
	"body":["iAMA(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ama_period}, ${4:int fast_ma_period}, ${5:int slow_ma_period}, ${6:int ama_shift}, ${7:ENUM_APPLIED_PRICE applied_price})$0"]
},
"iAO": {
	"prefix": "iao",
	"body":["iAO(${1:string symbol}, ${2:ENUM_TIMEFRAMES period})$0"]
},
"iATR": {
	"prefix": "iatr",
	"body":["iATR(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ma_period})$0"]
},
"iBearsPower": {
	"prefix": "ibearspower",
	"body":["iBearsPower(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ma_period})$0"]
},
"iBands": {
	"prefix": "ibands",
	"body":["iBands(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int bands_period}, ${4:int bands_shift}, ${5:double deviation}, ${6:ENUM_APPLIED_PRICE applied_price})$0"]
},
"iBullsPower": {
	"prefix": "ibullspower",
	"body":["iBullsPower(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ma_period})$0"]
},
"iCCI": {
	"prefix": "icci",
	"body":["iCCI(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ma_period}, ${4:ENUM_APPLIED_PRICE applied_price})$0"]
},
"iChaikin": {
	"prefix": "ichaikin",
	"body":["iChaikin(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int fast_ma_period}, ${4:int slow_ma_period}, ${5:ENUM_MA_METHOD ma_method}, ${6:ENUM_APPLIED_VOLUME applied_volume})$0"]
},
"iCustom": {
	"prefix": "icustom",
	"body":["iCustom(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:string name}, ${4:...})$0"]
},
"iDEMA": {
	"prefix": "idema",
	"body":["iDEMA(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ma_period}, ${4:int ma_shift}, ${5:ENUM_APPLIED_PRICE applied_price})$0"]
},
"iDeMarker": {
	"prefix": "idemarker",
	"body":["iDeMarker(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ma_period})$0"]
},
"iEnvelopes": {
	"prefix": "ienvelopes",
	"body":["iEnvelopes(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ma_period}, ${4:int ma_shift}, ${5:ENUM_MA_METHOD ma_method}, ${6:ENUM_APPLIED_PRICE applied_price}, ${7:double deviation})$0"]
},
"iForce": {
	"prefix": "iforce",
	"body":["iForce(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ma_period}, ${4:ENUM_MA_METHOD ma_method}, ${5:ENUM_APPLIED_VOLUME applied_volume})$0"]
},
"iFractals": {
	"prefix": "ifractals",
	"body":["iFractals(${1:string symbol}, ${2:ENUM_TIMEFRAMES period})$0"]
},
"iFrAMA": {
	"prefix": "iframa",
	"body":["iFrAMA(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ma_period}, ${4:int ma_shift}, ${5:ENUM_APPLIED_PRICE applied_price})$0"]
},
"iGator": {
	"prefix": "igator",
	"body":["iGator(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int jaw_period}, ${4:int jaw_shift}, ${5:int teeth_period}, ${6:int teeth_shift}, ${7:int lips_period}, ${8:int lips_shift}, ${9:ENUM_MA_METHOD ma_method}, ${10:ENUM_APPLIED_PRICE applied_price})$0"]
},
"iIchimoku": {
	"prefix": "iichimoku",
	"body":["iIchimoku(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int tenkan_sen}, ${4:int kijun_sen}, ${5:int senkou_span_b})$0"]
},
"iBWMFI": {
	"prefix": "ibwmfi",
	"body":["iBWMFI(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:ENUM_APPLIED_VOLUME applied_volume})$0"]
},
"iMomentum": {
	"prefix": "imomentum",
	"body":["iMomentum(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int mom_period}, ${4:ENUM_APPLIED_PRICE applied_price})$0"]
},
"iMFI": {
	"prefix": "imfi",
	"body":["iMFI(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ma_period}, ${4:ENUM_APPLIED_VOLUME applied_volume})$0"]
},
"iMA": {
	"prefix": "ima",
	"body":["iMA(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ma_period}, ${4:int ma_shift}, ${5:ENUM_MA_METHOD ma_method}, ${6:ENUM_APPLIED_PRICE applied_price})$0"]
},
"iOsMA": {
	"prefix": "iosma",
	"body":["iOsMA(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int fast_ema_period}, ${4:int slow_ema_period}, ${5:int signal_period}, ${6:ENUM_APPLIED_PRICE applied_price})$0"]
},
"iMACD": {
	"prefix": "imacd",
	"body":["iMACD(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int fast_ema_period}, ${4:int slow_ema_period}, ${5:int signal_period}, ${6:ENUM_APPLIED_PRICE applied_price})$0"]
},
"iOBV": {
	"prefix": "iobv",
	"body":["iOBV(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:ENUM_APPLIED_VOLUME applied_volume})$0"]
},
"iSAR": {
	"prefix": "isar",
	"body":["iSAR(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:double step}, ${4:double maximum})$0"]
},
"iRSI": {
	"prefix": "irsi",
	"body":["iRSI(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ma_period}, ${4:ENUM_APPLIED_PRICE applied_price})$0"]
},
"iRVI": {
	"prefix": "irvi",
	"body":["iRVI(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ma_period})$0"]
},
"iStdDev": {
	"prefix": "istddev",
	"body":["iStdDev(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ma_period}, ${4:int ma_shift}, ${5:ENUM_MA_METHOD ma_method}, ${6:ENUM_APPLIED_PRICE applied_price})$0"]
},
"iStochastic": {
	"prefix": "istochastic",
	"body":["iStochastic(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int Kperiod}, ${4:int Dperiod}, ${5:int slowing}, ${6:ENUM_MA_METHOD ma_method}, ${7:ENUM_STO_PRICE price_field})$0"]
},
"iTEMA": {
	"prefix": "itema",
	"body":["iTEMA(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ma_period}, ${4:int ma_shift}, ${5:ENUM_APPLIED_PRICE applied_price})$0"]
},
"iTriX": {
	"prefix": "itrix",
	"body":["iTriX(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int ma_period}, ${4:ENUM_APPLIED_PRICE applied_price})$0"]
},
"iWPR": {
	"prefix": "iwpr",
	"body":["iWPR(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int calc_period})$0"]
},
"iVIDyA": {
	"prefix": "ividya",
	"body":["iVIDyA(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:int cmo_period}, ${4:int ema_period}, ${5:int ma_shift}, ${6:ENUM_APPLIED_PRICE applied_price})$0"]
},
"iVolumes": {
	"prefix": "ivolumes",
	"body":["iVolumes(${1:string symbol}, ${2:ENUM_TIMEFRAMES period}, ${3:ENUM_APPLIED_VOLUME applied_volume})$0"]
},

//   ## MATH FUNCTIONS
"MathAbs": {
	"prefix": "mathabs",
	"body":["MathAbs(${1:double value})$0"]
},
"MathArccos": {
	"prefix": "matharccos",
	"body":["MathArccos(${1:double val})$0"]
},
"MathArcsin": {
	"prefix": "matharcsin",
	"body":["MathArcsin(${1:double val})$0"]
},
"MathArctan": {
	"prefix": "matharctan",
	"body":["MathArctan(${1:double value})$0"]
},
"MathArctan2": {
	"prefix": "matharctan2",
	"body":["MathArctan2(${1:double y}, ${2:double x})$0"]
},
"MathClassify": {
	"prefix": "mathclassify",
	"body":["MathClassify(${1:double value})$0"]
},
"MathCeil": {
	"prefix": "mathceil",
	"body":["MathCeil(${1:double val})$0"]
},
"MathCos": {
	"prefix": "mathcos",
	"body":["MathCos(${1:double value})$0"]
},
"MathExp": {
	"prefix": "mathexp",
	"body":["MathExp(${1:double value})$0"]
},
"MathFloor": {
	"prefix": "mathfloor",
	"body":["MathFloor(${1:double val})$0"]
},
"MathLog": {
	"prefix": "mathlog",
	"body":["MathLog(${1:double val})$0"]
},
"MathLog10": {
	"prefix": "mathlog10",
	"body":["MathLog10(${1:double val})$0"]
},
"MathMax": {
	"prefix": "mathmax",
	"body":["MathMax(${1:double value1}, ${2:double value2})$0"]
},
"MathMin": {
	"prefix": "mathmin",
	"body":["MathMin(${1:double value1}, ${2:double value2})$0"]
},
"MathMod": {
	"prefix": "mathmod",
	"body":["MathMod(${1:double value}, ${2:double value2})$0"]
},
"MathPow": {
	"prefix": "mathpow",
	"body":["MathPow(${1:double base}, ${2:double exponent})$0"]
},
"MathRand": {
	"prefix": "mathrand",
	"body": "MathRand()$0"
},
"MathRound": {
	"prefix": "mathround",
	"body":["MathRound(${1:double value})$0"]
},
"MathSin": {
	"prefix": "mathsin",
	"body":["MathSin(${1:double value})$0"]
},
"MathSqrt": {
	"prefix": "mathsqrt",
	"body":["MathSqrt(${1:double value})$0"]
},
"MathSrand": {
	"prefix": "mathsrand",
	"body":["MathSrand(${1:int seed})$0"]
},
"MathTan": {
	"prefix": "mathtan",
	"body":["MathTan(${1:double rad})$0"]
},
"MathIsValidNumber": {
	"prefix": "mathisvalidnumber",
	"body":["MathIsValidNumber(${1:double number})$0"]
},
"MathExpm1": {
	"prefix": "mathexpm1",
	"body":["MathExpm1(${1:double value})$0"]
},
"MathLog1p": {
	"prefix": "mathlog1p",
	"body":["MathLog1p(${1:double value})$0"]
},
"MathArccosh": {
	"prefix": "matharccosh",
	"body":["MathArccosh(${1:double value})$0"]
},
"MathArcsinh": {
	"prefix": "matharcsinh",
	"body":["MathArcsinh(${1:double value})$0"]
},
"MathArctanh": {
	"prefix": "matharctanh",
	"body":["MathArctanh(${1:double value})$0"]
},
"MathCosh": {
	"prefix": "mathcosh",
	"body":["MathCosh(${1:double value})$0"]
},
"MathSinh": {
	"prefix": "mathsinh",
	"body":["MathSinh(${1:double value})$0"]
},
"MathTanh": {
	"prefix": "mathtanh",
	"body":["MathTanh(${1:double value})$0"]
},
"MathSwap": {
	"prefix": "mathswap",
	"body":["MathSwap(${1:ushort value})$0"]
},
"MathSwap2": {
	"prefix": "mathswap",
	"body":["MathSwap(${1:uint value})$0"]
},
"MathSwap3": {
	"prefix": "mathswap",
	"body":["MathSwap(${1:ulong value})$0"]
},

//   ## Global Variables of the Client Terminal
"GlobalVariableCheck": {
	"prefix": "globalvariablecheck",
	"body":["GlobalVariableCheck(${1:string name})$0"]
},
"GlobalVariableTime": {
	"prefix": "globalvariabletime",
	"body":["GlobalVariableTime(${1:string name})$0"]
},
"GlobalVariableDel": {
	"prefix": "globalvariabledel",
	"body":["GlobalVariableDel(${1:string name})$0"]
},
"GlobalVariableGet": {
	"prefix": "globalvariableget",
	"body":["GlobalVariableGet(${1:string name})$0"]
},
"GlobalVariableGet2": {
	"prefix": "globalvariableget",
	"body":["GlobalVariableGet(${1:string name}, ${2:double& double_var})$0"]
},
"GlobalVariableName": {
	"prefix": "globalvariablename",
	"body":["GlobalVariableName(${1:int index})$0"]
},
"GlobalVariableSet": {
	"prefix": "globalvariableset",
	"body":["GlobalVariableSet(${1:string name}, ${2:double value})$0"]
},
"GlobalVariablesFlush": {
	"prefix": "globalvariablesflush",
	"body": "GlobalVariablesFlush()$0"
},
"GlobalVariableTemp": {
	"prefix": "globalvariabletemp",
	"body":["GlobalVariableTemp(${1:string name})$0"]
},
"GlobalVariableSetOnCondition": {
	"prefix": "globalvariablesetoncondition",
	"body":["GlobalVariableSetOnCondition(${1:string name}, ${2:double value}, ${3:double check_value})$0"]
},
"GlobalVariablesDeleteAll": {
	"prefix": "globalvariablesdeleteall",
	"body":["GlobalVariablesDeleteAll(${1:string prefix_name=NULL}, ${2:datetime limit_data=0})$0"]
},
"GlobalVariablesTotal": {
	"prefix": "globalvariablestotal",
	"body": "GlobalVariablesTotal()$0"
},

//   ##File Functions
"FileSelectDialog": {
	"prefix": "fileselectdialog",
	"body":["FileSelectDialog(${1:string caption}, ${2:string initial_dir}, ${3:string filter}, ${4:uint flags}, ${5:string& filenames[]}, ${6:string default_filename})$0"]
},
"FileFindFirst": {
	"prefix": "filefindfirst",
	"body":["FileFindFirst(${1:const string file_filter}, ${2:string& returned_filename}, ${3:int common_flag=0})$0"]
},
"FileFindNext": {
	"prefix": "filefindnext",
	"body":["FileFindNext(${1:long search_handle}, ${2:string& returned_filename})$0"]
},
"FileFindClose": {
	"prefix": "filefindclose",
	"body":["FileFindClose(${1:long search_handle})$0"]
},
"FileIsExist": {
	"prefix": "fileisexist",
	"body":["FileIsExist(${1:const string file_name}, ${2:int common_flag=0})$0"]
},
"FileOpen": {
	"prefix": "fileopen",
	"body":["FileOpen(${1:string file_name}, ${2:int open_flags}, ${3:short delimiter='\t'}, ${4:uint codepage=CP_ACP})$0"]
},
"FileClose": {
	"prefix": "fileclose",
	"body":["FileClose(${1:int file_handle})$0"]
},
"FileCopy": {
	"prefix": "filecopy",
	"body":["FileCopy(${1:const string src_file_name}, ${2:int common_flag}, ${3:const string dst_file_name}, ${4:int mode_flags})$0"]
},
"FileDelete": {
	"prefix": "filedelete",
	"body":["FileDelete(${1:const string file_name}, ${2:int common_flag=0})$0"]
},
"FileMove": {
	"prefix": "filemove",
	"body":["FileMove(${1:const string src_file_name}, ${2:int common_flag}, ${3:const string dst_file_name}, ${4:int mode_flags})$0"]
},
"FileFlush": {
	"prefix": "fileflush",
	"body":["FileFlush(${1:int file_handle})$0"]
},
"FileGetInteger": {
	"prefix": "filegetinteger",
	"body":["FileGetInteger(${1:int file_handle}, ${2:ENUM_FILE_PROPERTY_INTEGER property_id})$0"]
},
"FileGetInteger2": {
	"prefix": "filegetinteger",
	"body":["FileGetInteger(${1:const string file_name}, ${2:ENUM_FILE_PROPERTY_INTEGER property_id}, ${3:bool common_folder=false})$0"]
},
"FileIsEnding": {
	"prefix": "fileisending",
	"body":["FileIsEnding(${1:int file_handle})$0"]
},
"FileIsLineEnding": {
	"prefix": "fileislineending",
	"body":["FileIsLineEnding(${1:int file_handle})$0"]
},
"FileReadArray": {
	"prefix": "filereadarray",
	"body":["FileReadArray(${1:int file_handle}, ${2:void& array[]}, ${3:int start=0}, ${4:int count=WHOLE_ARRAY})$0"]
},
"FileReadBool": {
	"prefix": "filereadbool",
	"body":["FileReadBool(${1:int file_handle})$0"]
},
"FileReadDatetime": {
	"prefix": "filereaddatetime",
	"body":["FileReadDatetime(${1:int file_handle})$0"]
},
"FileReadDouble": {
	"prefix": "filereaddouble",
	"body":["FileReadDouble(${1:int file_handle})$0"]
},
"FileReadFloat": {
	"prefix": "filereadfloat",
	"body":["FileReadFloat(${1:int file_handle})$0"]
},
"FileReadInteger": {
	"prefix": "filereadinteger",
	"body":["FileReadInteger(${1:int file_handle}, ${2:int size=INT_VALUE})$0"]
},
"FileReadLong": {
	"prefix": "filereadlong",
	"body":["FileReadLong(${1:int file_handle})$0"]
},
"FileReadNumber": {
	"prefix": "filereadnumber",
	"body":["FileReadNumber(${1:int file_handle})$0"]
},
"FileReadString": {
	"prefix": "filereadstring",
	"body":["FileReadString(${1:int file_handle}, ${2:int length=-1})$0"]
},
"FileReadStruct": {
	"prefix": "filereadstruct",
	"body":["FileReadStruct(${1:int file_handle}, ${2:const void& struct_object}, ${3:int size=-1})$0"]
},
"FileSeek": {
	"prefix": "fileseek",
	"body":["FileSeek(${1:int file_handle}, ${2:long offset}, ${3:ENUM_FILE_POSITION origin})$0"]
},
"FileSize": {
	"prefix": "filesize",
	"body":["FileSize(${1:int file_handle})$0"]
},
"FileTell": {
	"prefix": "filetell",
	"body":["FileTell(${1:int file_handle})$0"]
},
"FileWrite": {
	"prefix": "filewrite",
	"body":["FileWrite(${1:int file_handle}, ${2:...})$0"]
},
"FileWriteArray": {
	"prefix": "filewritearray",
	"body":["FileWriteArray(${1:int file_handle}, ${2:const void& array[]}, ${3:int start=0}, ${4:int count=WHOLE_ARRAY})$0"]
},
"FileWriteDouble": {
	"prefix": "filewritedouble",
	"body":["FileWriteDouble(${1:int file_handle}, ${2:double value})$0"]
},
"FileWriteFloat": {
	"prefix": "filewritefloat",
	"body":["FileWriteFloat(${1:int file_handle}, ${2:float value})$0"]
},
"FileWriteInteger": {
	"prefix": "filewriteinteger",
	"body":["FileWriteInteger(${1:int file_handle}, ${2:int value}, ${3:int size=INT_VALUE})$0"]
},
"FileWriteLong": {
	"prefix": "filewritelong",
	"body":["FileWriteLong(${1:int file_handle}, ${2:long value})$0"]
},
"FileWriteString": {
	"prefix": "filewritestring",
	"body":["FileWriteString(${1:int file_handle}, ${2:const string text_string}, ${3:int length=-1})$0"]
},
"FileWriteStruct": {
	"prefix": "filewritestruct",
	"body":["FileWriteStruct(${1:int file_handle}, ${2:const void& struct_object}, ${3:int size=-1})$0"]
},
"FileLoad": {
	"prefix": "fileload",
	"body":["FileLoad(${1:const string file_name}, ${2:void& buffer[]}, ${3:int common_flag=0})$0"]
},
"FileSave": {
	"prefix": "filesave",
	"body":["FileSave(${1:const string file_name}, ${2:void& buffer[]}, ${3:int common_flag=0})$0"]
},
"FolderCreate": {
	"prefix": "foldercreate",
	"body":["FolderCreate(${1:string folder_name}, ${2:int common_flag=0})$0"]
},
"FolderDelete": {
	"prefix": "folderdelete",
	"body":["FolderDelete(${1:string folder_name}, ${2:int common_flag=0})$0"]
},
"FolderClean": {
	"prefix": "folderclean",
	"body":["FolderClean(${1:string folder_name}, ${2:int common_flag=0})$0"]
},

//   ##Working with databases
"DatabaseOpen": {
	"prefix": "databaseopen",
	"body":["DatabaseOpen(${1:string filename}, ${2:uint flags})$0"]
},
"DatabaseClose": {
	"prefix": "databaseclose",
	"body":["DatabaseClose(${1:int database})$0"]
},
"DatabaseImport": {
	"prefix": "databaseimport",
	"body":["DatabaseImport(${1:int database}, ${2:const string table}, ${3:const string filename}, ${4:uint flags}, ${5:const string separator}, ${6:ulong skip_rows}, ${7:const string skip_comments})$0"]
},
"DatabaseExport": {
	"prefix": "databaseexport",
	"body":["DatabaseExport(${1:int database}, ${2:const string table_or_sql}, ${3:const string filename}, ${4:uint flags}, ${5:const string separator})$0"]
},
"DatabasePrint": {
	"prefix": "databaseprint",
	"body":["DatabasePrint(${1:int database}, ${2:const string table_or_sql}, ${3:uint flags})$0"]
},
"DatabaseTableExists": {
	"prefix": "databasetableexists",
	"body":["DatabaseTableExists(${1:int database}, ${2:string table})$0"]
},
"DatabaseExecute": {
	"prefix": "databaseexecute",
	"body":["DatabaseExecute(${1:int database}, ${2:string sql})$0"]
},
"DatabasePrepare": {
	"prefix": "databaseprepare",
	"body":["DatabasePrepare(${1:int database}, ${2:string sql}, ${3:...})$0"]
},
"DatabaseReset": {
	"prefix": "databasereset",
	"body":["DatabaseReset(${1:int request})$0"]
},
"DatabaseBind": {
	"prefix": "databasebind",
	"body":["DatabaseBind(${1:int request}, ${2:int index}, ${3:T value})$0"]
},
"DatabaseBind2": {
	"prefix": "databasebind",
	"body":["DatabaseBind(${1:int request}, ${2:int index}, ${3:T& array[]})$0"]
},
"DatabaseRead": {
	"prefix": "databaseread",
	"body":["DatabaseRead(${1:int request})$0"]
},
"DatabaseReadBind": {
	"prefix": "databasereadbind",
	"body":["DatabaseReadBind(${1:int request}, ${2:void& struct_object})$0"]
},
"DatabaseFinalize": {
	"prefix": "databasefinalize",
	"body":["DatabaseFinalize(${1:int request})$0"]
},
"DatabaseTransactionBegin": {
	"prefix": "databasetransactionbegin",
	"body":["DatabaseTransactionBegin(${1:int database})$0"]
},
"DatabaseTransactionCommit": {
	"prefix": "databasetransactioncommit",
	"body":["DatabaseTransactionCommit(${1:int database})$0"]
},
"DatabaseTransactionRollback": {
	"prefix": "databasetransactionrollback",
	"body":["DatabaseTransactionRollback(${1:int database})$0"]
},
"DatabaseColumnsCount": {
	"prefix": "databasecolumnscount",
	"body":["DatabaseColumnsCount(${1:int request})$0"]
},
"DatabaseColumnName": {
	"prefix": "databasecolumnname",
	"body":["DatabaseColumnName(${1:int request}, ${2:int column}, ${3:string& name})$0"]
},
"DatabaseColumnType": {
	"prefix": "databasecolumntype",
	"body":["DatabaseColumnType(${1:int request}, ${2:int column})$0"]
},
"DatabaseColumnSize": {
	"prefix": "databasecolumnsize",
	"body":["DatabaseColumnSize(${1:int request}, ${2:int column})$0"]
},
"DatabaseColumnText": {
	"prefix": "databasecolumntext",
	"body":["DatabaseColumnText(${1:int request}, ${2:int column}, ${3:string& value})$0"]
},
"DatabaseColumnInteger": {
	"prefix": "databasecolumninteger",
	"body":["DatabaseColumnInteger(${1:int request}, ${2:int column}, ${3:int& value})$0"]
},
"DatabaseColumnLong": {
	"prefix": "databasecolumnlong",
	"body":["DatabaseColumnLong(${1:int request}, ${2:int column}, ${3:long& value})$0"]
},
"DatabaseColumnDouble": {
	"prefix": "databasecolumndouble",
	"body":["DatabaseColumnDouble(${1:int request}, ${2:int column}, ${3:double& value})$0"]
},
"DatabaseColumnBlob": {
	"prefix": "databasecolumnblob",
	"body":["DatabaseColumnBlob(${1:int request}, ${2:int column}, ${3:void& data[]})$0"]
},



//CONSTANTS
// ## Trade Constants:
// # History Database Properties
// # Order Properties
// # Position Properties
// # Deal Properties
// # Trade Operation Types
// # Trade Transaction Types
// # Trade Orders in DOM
// # Signal Properties
// ## Chart Constants:
// # Types of Chart Events
// # Chart Timeframes
// # Chart Properties
// # Positioning Constants
// # Chart Representation
// # Examples of Working with the Chart
// ## Object constants
// # Object Types
// # Object Properties
// # Methods of Object Binding
// # Chart Corner
// # Visibility of Objects
// # Levels of Elliott Wave
// # Gann Objects
// # Web Colors
// # Wingdings
// ## Price Constants
// # Smoothing Methods
// # Indicators Lines
// # Drawing Styles
// # Custom Indicator Properties
// # Indicator Types
// # Data Type Identifiers
// ## Client Terminal Properties
// # Running MQL5 Program Properties
// # Symbol Properties
// # Account Properties
// # Testing Statistics

"ENUM_POSITION_PROPERTY_INTEGER": {
	"prefix": "enum_position_property_integer",
	"body": "ENUM_POSITION_PROPERTY_INTEGER"
},
"POSITION_TICKET": {
	"prefix": "position_ticket",
	"body": "POSITION_TICKET"
},
"POSITION_TIME": {
	"prefix": "position_time",
	"body": "POSITION_TIME"
},
"POSITION_TIME_MSC": {
	"prefix": "position_time_msc",
	"body": "POSITION_TIME_MSC"
},
"POSITION_TIME_UPDATE": {
	"prefix": "position_time_update",
	"body": "POSITION_TIME_UPDATE"
},
"POSITION_TIME_UPDATE_MSC": {
	"prefix": "position_time_update_msc",
	"body": "POSITION_TIME_UPDATE_MSC"
},
"POSITION_TYPE": {
	"prefix": "position_type",
	"body": "POSITION_TYPE"
},
"POSITION_MAGIC": {
	"prefix": "position_magic",
	"body": "POSITION_MAGIC"
},
"POSITION_IDENTIFIER": {
	"prefix": "position_identifier",
	"body": "POSITION_IDENTIFIER"
},
"POSITION_REASON": {
	"prefix": "position_reason",
	"body": "POSITION_REASON"
},

//########################

"ENUM_POSITION_PROPERTY_DOUBLE": {
	"prefix": "enum_position_property_double",
	"body": "ENUM_POSITION_PROPERTY_DOUBLE"
},
"POSITION_VOLUME": {
	"prefix": "position_volume",
	"body": "POSITION_VOLUME"
},
"POSITION_PRICE_OPEN": {
	"prefix": "position_price_open",
	"body": "POSITION_PRICE_OPEN"
},
"POSITION_SL": {
	"prefix": "position_sl",
	"body": "POSITION_SL"
},
"POSITION_TP": {
	"prefix": "position_tp",
	"body": "POSITION_TP"
},
"POSITION_PRICE_CURRENT": {
	"prefix": "position_price_current",
	"body": "POSITION_PRICE_CURRENT"
},
"POSITION_SWAP": {
	"prefix": "position_swap",
	"body": "POSITION_SWAP"
},
"POSITION_PROFIT": {
	"prefix": "position_profit",
	"body": "POSITION_PROFIT"
},

//########################

"ENUM_POSITION_PROPERTY_STRING": {
	"prefix": "enum_position_property_string",
	"body": "ENUM_POSITION_PROPERTY_STRING"
},
"POSITION_SYMBOL": {
	"prefix": "position_symbol",
	"body": "POSITION_SYMBOL"
},
"POSITION_COMMENT": {
	"prefix": "position_comment",
	"body": "POSITION_COMMENT"
},
"POSITION_EXTERNAL_ID": {
	"prefix": "position_external_id",
	"body": "POSITION_EXTERNAL_ID"
},

//########################

"ENUM_POSITION_TYPE": {
	"prefix": "enum_position_type",
	"body": "ENUM_POSITION_TYPE"
},
"POSITION_TYPE_BUY": {
	"prefix": "position_type_buy",
	"body": "POSITION_TYPE_BUY"
},
"POSITION_TYPE_SELL": {
	"prefix": "position_type_sell",
	"body": "POSITION_TYPE_SELL"
},

//########################

"ENUM_POSITION_REASON": {
	"prefix": "enum_position_reason",
	"body": "ENUM_POSITION_REASON"
},
"POSITION_REASON_CLIENT": {
	"prefix": "position_reason_client",
	"body": "POSITION_REASON_CLIENT"
},
"POSITION_REASON_MOBILE": {
	"prefix": "position_reason_mobile",
	"body": "POSITION_REASON_MOBILE"
},
"POSITION_REASON_WEB": {
	"prefix": "position_reason_web",
	"body": "POSITION_REASON_WEB"
},
"POSITION_REASON_EXPERT": {
	"prefix": "position_reason_expert",
	"body": "POSITION_REASON_EXPERT"
},

//########################


//## Order Properties
"ENUM_ORDER_PROPERTY_INTEGER": {
	"prefix": "enum_order_property_integer",
	"body": "ENUM_ORDER_PROPERTY_INTEGER"
},
"ORDER_TICKET": {
	"prefix": "order_ticket",
	"body": "ORDER_TICKET"
},
"ORDER_TIME_SETUP": {
	"prefix": "order_time_setup",
	"body": "ORDER_TIME_SETUP"
},
"ORDER_TYPE": {
	"prefix": "order_type",
	"body": "ORDER_TYPE"
},
"ORDER_STATE": {
	"prefix": "order_state",
	"body": "ORDER_STATE"
},
"ORDER_TIME_EXPIRATION": {
	"prefix": "order_time_expiration",
	"body": "ORDER_TIME_EXPIRATION"
},
"ORDER_TIME_DONE": {
	"prefix": "order_time_done",
	"body": "ORDER_TIME_DONE"
},
"ORDER_TIME_SETUP_MSC": {
	"prefix": "order_time_setup_msc",
	"body": "ORDER_TIME_SETUP_MSC"
},
"ORDER_TIME_DONE_MSC": {
	"prefix": "order_time_done_msc",
	"body": "ORDER_TIME_DONE_MSC"
},
"ORDER_TYPE_FILLING": {
	"prefix": "order_type_filling",
	"body": "ORDER_TYPE_FILLING"
},
"ORDER_TYPE_TIME": {
	"prefix": "order_type_time",
	"body": "ORDER_TYPE_TIME"
},
"ORDER_MAGIC": {
	"prefix": "order_magic",
	"body": "ORDER_MAGIC"
},
"ORDER_REASON": {
	"prefix": "order_reason",
	"body": "ORDER_REASON"
},
"ORDER_POSITION_ID": {
	"prefix": "order_position_id",
	"body": "ORDER_POSITION_ID"
},
"ORDER_POSITION_BY_ID": {
	"prefix": "order_position_by_id",
	"body": "ORDER_POSITION_BY_ID"
},

//########################

"ENUM_ORDER_PROPERTY_DOUBLE": {
	"prefix": "enum_order_property_double",
	"body": "ENUM_ORDER_PROPERTY_DOUBLE"
},
"ORDER_VOLUME_INITIAL": {
	"prefix": "order_volume_initial",
	"body": "ORDER_VOLUME_INITIAL"
},
"ORDER_VOLUME_CURRENT": {
	"prefix": "order_volume_current",
	"body": "ORDER_VOLUME_CURRENT"
},
"ORDER_PRICE_OPEN": {
	"prefix": "order_price_open",
	"body": "ORDER_PRICE_OPEN"
},
"ORDER_SL": {
	"prefix": "order_sl",
	"body": "ORDER_SL"
},
"ORDER_TP": {
	"prefix": "order_tp",
	"body": "ORDER_TP"
},
"ORDER_PRICE_CURRENT": {
	"prefix": "order_price_current",
	"body": "ORDER_PRICE_CURRENT"
},
"ORDER_PRICE_STOPLIMIT": {
	"prefix": "order_price_stoplimit",
	"body": "ORDER_PRICE_STOPLIMIT"
},

//########################

"ENUM_ORDER_PROPERTY_STRING": {
	"prefix": "enum_order_property_string",
	"body": "ENUM_ORDER_PROPERTY_STRING"
},
"ORDER_SYMBOL": {
	"prefix": "order_symbol",
	"body": "ORDER_SYMBOL"
},
"ORDER_COMMENT": {
	"prefix": "order_comment",
	"body": "ORDER_COMMENT"
},
"ORDER_EXTERNAL_ID": {
	"prefix": "order_external_id",
	"body": "ORDER_EXTERNAL_ID"
},

//########################

"ENUM_ORDER_TYPE": {
	"prefix": "enum_order_type",
	"body": "ENUM_ORDER_TYPE"
},
"ORDER_TYPE_BUY": {
	"prefix": "order_type_buy",
	"body": "ORDER_TYPE_BUY"
},
"ORDER_TYPE_SELL": {
	"prefix": "order_type_sell",
	"body": "ORDER_TYPE_SELL"
},
"ORDER_TYPE_BUY_LIMIT": {
	"prefix": "order_type_buy_limit",
	"body": "ORDER_TYPE_BUY_LIMIT"
},
"ORDER_TYPE_SELL_LIMIT": {
	"prefix": "order_type_sell_limit",
	"body": "ORDER_TYPE_SELL_LIMIT"
},
"ORDER_TYPE_BUY_STOP": {
	"prefix": "order_type_buy_stop",
	"body": "ORDER_TYPE_BUY_STOP"
},
"ORDER_TYPE_SELL_STOP": {
	"prefix": "order_type_sell_stop",
	"body": "ORDER_TYPE_SELL_STOP"
},
"ORDER_TYPE_BUY_STOP_LIMIT": {
	"prefix": "order_type_buy_stop_limit",
	"body": "ORDER_TYPE_BUY_STOP_LIMIT"
},
"ORDER_TYPE_SELL_STOP_LIMIT": {
	"prefix": "order_type_sell_stop_limit",
	"body": "ORDER_TYPE_SELL_STOP_LIMIT"
},
"ORDER_TYPE_CLOSE_BY": {
	"prefix": "order_type_close_by",
	"body": "ORDER_TYPE_CLOSE_BY"
},

//########################

"ENUM_ORDER_STATE": {
	"prefix": "enum_order_state",
	"body": "ENUM_ORDER_STATE"
},
"ORDER_STATE_STARTED": {
	"prefix": "order_state_started",
	"body": "ORDER_STATE_STARTED"
},
"ORDER_STATE_PLACED": {
	"prefix": "order_state_placed",
	"body": "ORDER_STATE_PLACED"
},
"ORDER_STATE_CANCELED": {
	"prefix": "order_state_canceled",
	"body": "ORDER_STATE_CANCELED"
},
"ORDER_STATE_PARTIAL": {
	"prefix": "order_state_partial",
	"body": "ORDER_STATE_PARTIAL"
},
"ORDER_STATE_FILLED": {
	"prefix": "order_state_filled",
	"body": "ORDER_STATE_FILLED"
},
"ORDER_STATE_REJECTED": {
	"prefix": "order_state_rejected",
	"body": "ORDER_STATE_REJECTED"
},
"ORDER_STATE_EXPIRED": {
	"prefix": "order_state_expired",
	"body": "ORDER_STATE_EXPIRED"
},
"ORDER_STATE_REQUEST_ADD": {
	"prefix": "order_state_request_add",
	"body": "ORDER_STATE_REQUEST_ADD"
},
"ORDER_STATE_REQUEST_MODIFY": {
	"prefix": "order_state_request_modify",
	"body": "ORDER_STATE_REQUEST_MODIFY"
},
"ORDER_STATE_REQUEST_CANCEL": {
	"prefix": "order_state_request_cancel",
	"body": "ORDER_STATE_REQUEST_CANCEL"
},

//########################

"ENUM_ORDER_TYPE_FILLING": {
	"prefix": "enum_order_type_filling",
	"body": "ENUM_ORDER_TYPE_FILLING"
},
"ORDER_FILLING_FOK": {
	"prefix": "order_filling_fok",
	"body": "ORDER_FILLING_FOK"
},
"ORDER_FILLING_IOC": {
	"prefix": "order_filling_ioc",
	"body": "ORDER_FILLING_IOC"
},
"ORDER_FILLING_RETURN": {
	"prefix": "order_filling_return",
	"body": "ORDER_FILLING_RETURN"
},

//########################

"ENUM_ORDER_TYPE_TIME": {
	"prefix": "enum_order_type_time",
	"body": "ENUM_ORDER_TYPE_TIME"
},
"ORDER_TIME_GTC": {
	"prefix": "order_time_gtc",
	"body": "ORDER_TIME_GTC"
},
"ORDER_TIME_DAY": {
	"prefix": "order_time_day",
	"body": "ORDER_TIME_DAY"
},
"ORDER_TIME_SPECIFIED": {
	"prefix": "order_time_specified",
	"body": "ORDER_TIME_SPECIFIED"
},
"ORDER_TIME_SPECIFIED_DAY": {
	"prefix": "order_time_specified_day",
	"body": "ORDER_TIME_SPECIFIED_DAY"
},

//########################

"ENUM_ORDER_REASON": {
	"prefix": "enum_order_reason",
	"body": "ENUM_ORDER_REASON"
},
"ORDER_REASON_CLIENT": {
	"prefix": "order_reason_client",
	"body": "ORDER_REASON_CLIENT"
},
"ORDER_REASON_MOBILE": {
	"prefix": "order_reason_mobile",
	"body": "ORDER_REASON_MOBILE"
},
"ORDER_REASON_WEB": {
	"prefix": "order_reason_web",
	"body": "ORDER_REASON_WEB"
},
"ORDER_REASON_EXPERT": {
	"prefix": "order_reason_expert",
	"body": "ORDER_REASON_EXPERT"
},
"ORDER_REASON_SL": {
	"prefix": "order_reason_sl",
	"body": "ORDER_REASON_SL"
},
"ORDER_REASON_TP": {
	"prefix": "order_reason_tp",
	"body": "ORDER_REASON_TP"
},
"ORDER_REASON_SO": {
	"prefix": "order_reason_so",
	"body": "ORDER_REASON_SO"
},

//########################


//## Deal properties
"ENUM_DEAL_PROPERTY_INTEGER": {
	"prefix": "enum_deal_property_integer",
	"body": "ENUM_DEAL_PROPERTY_INTEGER"
},
"DEAL_TICKET": {
	"prefix": "deal_ticket",
	"body": "DEAL_TICKET"
},
"DEAL_ORDER": {
	"prefix": "deal_order",
	"body": "DEAL_ORDER"
},
"DEAL_TIME": {
	"prefix": "deal_time",
	"body": "DEAL_TIME"
},
"DEAL_TIME_MSC": {
	"prefix": "deal_time_msc",
	"body": "DEAL_TIME_MSC"
},
"DEAL_TYPE": {
	"prefix": "deal_type",
	"body": "DEAL_TYPE"
},
"DEAL_ENTRY": {
	"prefix": "deal_entry",
	"body": "DEAL_ENTRY"
},
"DEAL_MAGIC": {
	"prefix": "deal_magic",
	"body": "DEAL_MAGIC"
},
"DEAL_REASON": {
	"prefix": "deal_reason",
	"body": "DEAL_REASON"
},
"DEAL_POSITION_ID": {
	"prefix": "deal_position_id",
	"body": "DEAL_POSITION_ID"
},

//########################

"ENUM_DEAL_PROPERTY_DOUBLE": {
	"prefix": "enum_deal_property_double",
	"body": "ENUM_DEAL_PROPERTY_DOUBLE"
},
"DEAL_VOLUME": {
	"prefix": "deal_volume",
	"body": "DEAL_VOLUME"
},
"DEAL_PRICE": {
	"prefix": "deal_price",
	"body": "DEAL_PRICE"
},
"DEAL_COMMISSION": {
	"prefix": "deal_commission",
	"body": "DEAL_COMMISSION"
},
"DEAL_SWAP": {
	"prefix": "deal_swap",
	"body": "DEAL_SWAP"
},
"DEAL_PROFIT": {
	"prefix": "deal_profit",
	"body": "DEAL_PROFIT"
},
"DEAL_FEE": {
	"prefix": "deal_fee",
	"body": "DEAL_FEE"
},
"DEAL_SL": {
	"prefix": "deal_sl",
	"body": "DEAL_SL"
},
"DEAL_TP": {
	"prefix": "deal_tp",
	"body": "DEAL_TP"
},

//########################

"ENUM_DEAL_PROPERTY_STRING": {
	"prefix": "enum_deal_property_string",
	"body": "ENUM_DEAL_PROPERTY_STRING"
},
"DEAL_SYMBOL": {
	"prefix": "deal_symbol",
	"body": "DEAL_SYMBOL"
},
"DEAL_COMMENT": {
	"prefix": "deal_comment",
	"body": "DEAL_COMMENT"
},
"DEAL_EXTERNAL_ID": {
	"prefix": "deal_external_id",
	"body": "DEAL_EXTERNAL_ID"
},

//########################


"ENUM_DEAL_TYPE": {
	"prefix": "enum_deal_type",
	"body": "ENUM_DEAL_TYPE"
},
"DEAL_TYPE_BUY": {
	"prefix": "deal_type_buy",
	"body": "DEAL_TYPE_BUY"
},
"DEAL_TYPE_SELL": {
	"prefix": "deal_type_sell",
	"body": "DEAL_TYPE_SELL"
},
"DEAL_TYPE_BALANCE": {
	"prefix": "deal_type_balance",
	"body": "DEAL_TYPE_BALANCE"
},
"DEAL_TYPE_CREDIT": {
	"prefix": "deal_type_credit",
	"body": "DEAL_TYPE_CREDIT"
},
"DEAL_TYPE_CHARGE": {
	"prefix": "deal_type_charge",
	"body": "DEAL_TYPE_CHARGE"
},
"DEAL_TYPE_CORRECTION": {
	"prefix": "deal_type_correction",
	"body": "DEAL_TYPE_CORRECTION"
},
"DEAL_TYPE_BONUS": {
	"prefix": "deal_type_bonus",
	"body": "DEAL_TYPE_BONUS"
},
"DEAL_TYPE_COMMISSION": {
	"prefix": "deal_type_commission",
	"body": "DEAL_TYPE_COMMISSION"
},
"DEAL_TYPE_COMMISSION_DAILY": {
	"prefix": "deal_type_commission_daily",
	"body": "DEAL_TYPE_COMMISSION_DAILY"
},
"DEAL_TYPE_COMMISSION_MONTHLY": {
	"prefix": "deal_type_commission_monthly",
	"body": "DEAL_TYPE_COMMISSION_MONTHLY"
},
"DEAL_TYPE_COMMISSION_AGENT_DAILY": {
	"prefix": "deal_type_commission_agent_daily",
	"body": "DEAL_TYPE_COMMISSION_AGENT_DAILY"
},
"DEAL_TYPE_COMMISSION_AGENT_MONTHLY": {
	"prefix": "deal_type_commission_agent_monthly",
	"body": "DEAL_TYPE_COMMISSION_AGENT_MONTHLY"
},
"DEAL_TYPE_INTEREST": {
	"prefix": "deal_type_interest",
	"body": "DEAL_TYPE_INTEREST"
},
"DEAL_TYPE_BUY_CANCELED": {
	"prefix": "deal_type_buy_canceled",
	"body": "DEAL_TYPE_BUY_CANCELED"
},
"DEAL_TYPE_SELL_CANCELED": {
	"prefix": "deal_type_sell_canceled",
	"body": "DEAL_TYPE_SELL_CANCELED"
},
"DEAL_DIVIDEND": {
	"prefix": "deal_dividend",
	"body": "DEAL_DIVIDEND"
},
"DEAL_DIVIDEND_FRANKED": {
	"prefix": "deal_dividend_franked",
	"body": "DEAL_DIVIDEND_FRANKED"
},
"DEAL_TAX": {
	"prefix": "deal_tax",
	"body": "DEAL_TAX"
},

//########################

"ENUM_DEAL_ENTRY": {
	"prefix": "enum_deal_entry",
	"body": "ENUM_DEAL_ENTRY"
},
"DEAL_ENTRY_IN": {
	"prefix": "deal_entry_in",
	"body": "DEAL_ENTRY_IN"
},
"DEAL_ENTRY_OUT": {
	"prefix": "deal_entry_out",
	"body": "DEAL_ENTRY_OUT"
},
"DEAL_ENTRY_INOUT": {
	"prefix": "deal_entry_inout",
	"body": "DEAL_ENTRY_INOUT"
},
"DEAL_ENTRY_OUT_BY": {
	"prefix": "deal_entry_out_by",
	"body": "DEAL_ENTRY_OUT_BY"
},

//########################

"ENUM_DEAL_REASON": {
	"prefix": "enum_deal_reason",
	"body": "ENUM_DEAL_REASON"
},
"DEAL_REASON_CLIENT": {
	"prefix": "deal_reason_client",
	"body": "DEAL_REASON_CLIENT"
},
"DEAL_REASON_MOBILE": {
	"prefix": "deal_reason_mobile",
	"body": "DEAL_REASON_MOBILE"
},
"DEAL_REASON_WEB": {
	"prefix": "deal_reason_web",
	"body": "DEAL_REASON_WEB"
},
"DEAL_REASON_EXPERT": {
	"prefix": "deal_reason_expert",
	"body": "DEAL_REASON_EXPERT"
},
"DEAL_REASON_SL": {
	"prefix": "deal_reason_sl",
	"body": "DEAL_REASON_SL"
},
"DEAL_REASON_TP": {
	"prefix": "deal_reason_tp",
	"body": "DEAL_REASON_TP"
},
"DEAL_REASON_SO": {
	"prefix": "deal_reason_so",
	"body": "DEAL_REASON_SO"
},
"DEAL_REASON_ROLLOVER": {
	"prefix": "deal_reason_rollover",
	"body": "DEAL_REASON_ROLLOVER"
},
"DEAL_REASON_VMARGIN": {
	"prefix": "deal_reason_vmargin",
	"body": "DEAL_REASON_VMARGIN"
},
"DEAL_REASON_SPLIT": {
	"prefix": "deal_reason_split",
	"body": "DEAL_REASON_SPLIT"
},

//########################

"ENUM_TRADE_REQUEST_ACTIONS": {
	"prefix": "enum_trade_request_actions",
	"body": "ENUM_TRADE_REQUEST_ACTIONS"
},
"TRADE_ACTION_DEAL": {
	"prefix": "trade_action_deal",
	"body": "TRADE_ACTION_DEAL"
},
"TRADE_ACTION_PENDING": {
	"prefix": "trade_action_pending",
	"body": "TRADE_ACTION_PENDING"
},
"TRADE_ACTION_SLTP": {
	"prefix": "trade_action_sltp",
	"body": "TRADE_ACTION_SLTP"
},
"TRADE_ACTION_MODIFY": {
	"prefix": "trade_action_modify",
	"body": "TRADE_ACTION_MODIFY"
},
"TRADE_ACTION_REMOVE": {
	"prefix": "trade_action_remove",
	"body": "TRADE_ACTION_REMOVE"
},
"TRADE_ACTION_CLOSE_BY": {
	"prefix": "trade_action_close_by",
	"body": "TRADE_ACTION_CLOSE_BY"
},

//########################

"ENUM_TRADE_TRANSACTION_TYPE": {
	"prefix": "enum_trade_transaction_type",
	"body": "ENUM_TRADE_TRANSACTION_TYPE"
},
"TRADE_TRANSACTION_ORDER_ADD": {
	"prefix": "trade_transaction_order_add",
	"body": "TRADE_TRANSACTION_ORDER_ADD"
},
"TRADE_TRANSACTION_ORDER_UPDATE": {
	"prefix": "trade_transaction_order_update",
	"body": "TRADE_TRANSACTION_ORDER_UPDATE"
},
"TRADE_TRANSACTION_ORDER_DELETE": {
	"prefix": "trade_transaction_order_delete",
	"body": "TRADE_TRANSACTION_ORDER_DELETE"
},
"TRADE_TRANSACTION_DEAL_ADD": {
	"prefix": "trade_transaction_deal_add",
	"body": "TRADE_TRANSACTION_DEAL_ADD"
},
"TRADE_TRANSACTION_DEAL_UPDATE": {
	"prefix": "trade_transaction_deal_update",
	"body": "TRADE_TRANSACTION_DEAL_UPDATE"
},
"TRADE_TRANSACTION_DEAL_DELETE": {
	"prefix": "trade_transaction_deal_delete",
	"body": "TRADE_TRANSACTION_DEAL_DELETE"
},
"TRADE_TRANSACTION_HISTORY_ADD": {
	"prefix": "trade_transaction_history_add",
	"body": "TRADE_TRANSACTION_HISTORY_ADD"
},
"TRADE_TRANSACTION_HISTORY_UPDATE": {
	"prefix": "trade_transaction_history_update",
	"body": "TRADE_TRANSACTION_HISTORY_UPDATE"
},
"TRADE_TRANSACTION_HISTORY_DELETE": {
	"prefix": "trade_transaction_history_delete",
	"body": "TRADE_TRANSACTION_HISTORY_DELETE"
},
"TRADE_TRANSACTION_POSITION": {
	"prefix": "trade_transaction_position",
	"body": "TRADE_TRANSACTION_POSITION"
},
"TRADE_TRANSACTION_REQUEST": {
	"prefix": "trade_transaction_request",
	"body": "TRADE_TRANSACTION_REQUEST"
},

//########################

"ENUM_BOOK_TYPE": {
	"prefix": "enum_book_type",
	"body": "ENUM_BOOK_TYPE"
},
"BOOK_TYPE_SELL": {
	"prefix": "book_type_sell",
	"body": "BOOK_TYPE_SELL"
},
"BOOK_TYPE_BUY": {
	"prefix": "book_type_buy",
	"body": "BOOK_TYPE_BUY"
},
"BOOK_TYPE_SELL_MARKET": {
	"prefix": "book_type_sell_market",
	"body": "BOOK_TYPE_SELL_MARKET"
},
"BOOK_TYPE_BUY_MARKET": {
	"prefix": "book_type_buy_market",
	"body": "BOOK_TYPE_BUY_MARKET"
},

//########################

"ENUM_SIGNAL_BASE_DOUBLE": {
	"prefix": "enum_signal_base_double",
	"body": "ENUM_SIGNAL_BASE_DOUBLE"
},
"SIGNAL_BASE_BALANCE": {
	"prefix": "signal_base_balance",
	"body": "SIGNAL_BASE_BALANCE"
},
"SIGNAL_BASE_EQUITY": {
	"prefix": "signal_base_equity",
	"body": "SIGNAL_BASE_EQUITY"
},
"SIGNAL_BASE_GAIN": {
	"prefix": "signal_base_gain",
	"body": "SIGNAL_BASE_GAIN"
},
"SIGNAL_BASE_MAX_DRAWDOWN": {
	"prefix": "signal_base_max_drawdown",
	"body": "SIGNAL_BASE_MAX_DRAWDOWN"
},
"SIGNAL_BASE_PRICE": {
	"prefix": "signal_base_price",
	"body": "SIGNAL_BASE_PRICE"
},
"SIGNAL_BASE_ROI": {
	"prefix": "signal_base_roi",
	"body": "SIGNAL_BASE_ROI"
},

//########################

"ENUM_SIGNAL_BASE_INTEGER": {
	"prefix": "enum_signal_base_integer",
	"body": "ENUM_SIGNAL_BASE_INTEGER"
},
"SIGNAL_BASE_DATE_PUBLISHED": {
	"prefix": "signal_base_date_published",
	"body": "SIGNAL_BASE_DATE_PUBLISHED"
},
"SIGNAL_BASE_DATE_STARTED": {
	"prefix": "signal_base_date_started",
	"body": "SIGNAL_BASE_DATE_STARTED"
},
"SIGNAL_BASE_DATE_UPDATED": {
	"prefix": "signal_base_date_updated",
	"body": "SIGNAL_BASE_DATE_UPDATED"
},
"SIGNAL_BASE_ID": {
	"prefix": "signal_base_id",
	"body": "SIGNAL_BASE_ID"
},
"SIGNAL_BASE_LEVERAGE": {
	"prefix": "signal_base_leverage",
	"body": "SIGNAL_BASE_LEVERAGE"
},
"SIGNAL_BASE_PIPS": {
	"prefix": "signal_base_pips",
	"body": "SIGNAL_BASE_PIPS"
},
"SIGNAL_BASE_RATING": {
	"prefix": "signal_base_rating",
	"body": "SIGNAL_BASE_RATING"
},
"SIGNAL_BASE_SUBSCRIBERS": {
	"prefix": "signal_base_subscribers",
	"body": "SIGNAL_BASE_SUBSCRIBERS"
},
"SIGNAL_BASE_TRADES": {
	"prefix": "signal_base_trades",
	"body": "SIGNAL_BASE_TRADES"
},
"SIGNAL_BASE_TRADE_MODE": {
	"prefix": "signal_base_trade_mode",
	"body": "SIGNAL_BASE_TRADE_MODE"
},

//########################

"ENUM_SIGNAL_BASE_STRING": {
	"prefix": "enum_signal_base_string",
	"body": "ENUM_SIGNAL_BASE_STRING"
},
"SIGNAL_BASE_AUTHOR_LOGIN": {
	"prefix": "signal_base_author_login",
	"body": "SIGNAL_BASE_AUTHOR_LOGIN"
},
"SIGNAL_BASE_BROKER": {
	"prefix": "signal_base_broker",
	"body": "SIGNAL_BASE_BROKER"
},
"SIGNAL_BASE_BROKER_SERVER": {
	"prefix": "signal_base_broker_server",
	"body": "SIGNAL_BASE_BROKER_SERVER"
},
"SIGNAL_BASE_NAME": {
	"prefix": "signal_base_name",
	"body": "SIGNAL_BASE_NAME"
},
"SIGNAL_BASE_CURRENCY": {
	"prefix": "signal_base_currency",
	"body": "SIGNAL_BASE_CURRENCY"
},

//########################

"ENUM_SIGNAL_INFO_DOUBLE": {
	"prefix": "enum_signal_info_double",
	"body": "ENUM_SIGNAL_INFO_DOUBLE"
},
"SIGNAL_INFO_EQUITY_LIMIT": {
	"prefix": "signal_info_equity_limit",
	"body": "SIGNAL_INFO_EQUITY_LIMIT"
},
"SIGNAL_INFO_SLIPPAGE": {
	"prefix": "signal_info_slippage",
	"body": "SIGNAL_INFO_SLIPPAGE"
},
"SIGNAL_INFO_VOLUME_PERCENT": {
	"prefix": "signal_info_volume_percent",
	"body": "SIGNAL_INFO_VOLUME_PERCENT"
},

//########################

"ENUM_SIGNAL_INFO_INTEGER": {
	"prefix": "enum_signal_info_integer",
	"body": "ENUM_SIGNAL_INFO_INTEGER"
},
"SIGNAL_INFO_CONFIRMATIONS_DISABLED": {
	"prefix": "signal_info_confirmations_disabled",
	"body": "SIGNAL_INFO_CONFIRMATIONS_DISABLED"
},
"SIGNAL_INFO_COPY_SLTP": {
	"prefix": "signal_info_copy_sltp",
	"body": "SIGNAL_INFO_COPY_SLTP"
},
"SIGNAL_INFO_DEPOSIT_PERCENT": {
	"prefix": "signal_info_deposit_percent",
	"body": "SIGNAL_INFO_DEPOSIT_PERCENT"
},
"SIGNAL_INFO_ID": {
	"prefix": "signal_info_id",
	"body": "SIGNAL_INFO_ID"
},
"SIGNAL_INFO_SUBSCRIPTION_ENABLED": {
	"prefix": "signal_info_subscription_enabled",
	"body": "SIGNAL_INFO_SUBSCRIPTION_ENABLED"
},
"SIGNAL_INFO_TERMS_AGREE": {
	"prefix": "signal_info_terms_agree",
	"body": "SIGNAL_INFO_TERMS_AGREE"
},

//########################

"ENUM_SIGNAL_INFO_STRING": {
	"prefix": "enum_signal_info_string",
	"body": "ENUM_SIGNAL_INFO_STRING"
},
"SIGNAL_INFO_NAME": {
	"prefix": "signal_info_name",
	"body": "SIGNAL_INFO_NAME"
},

//########################

"ENUM_SERIES_INFO_INTEGER": {
	"prefix": "enum_series_info_integer",
	"body": "ENUM_SERIES_INFO_INTEGER"
},
"SERIES_BARS_COUNT": {
	"prefix": "series_bars_count",
	"body": "SERIES_BARS_COUNT"
},
"SERIES_FIRSTDATE": {
	"prefix": "series_firstdate",
	"body": "SERIES_FIRSTDATE"
},
"SERIES_LASTBAR_DATE": {
	"prefix": "series_lastbar_date",
	"body": "SERIES_LASTBAR_DATE"
},
"SERIES_SERVER_FIRSTDATE": {
	"prefix": "series_server_firstdate",
	"body": "SERIES_SERVER_FIRSTDATE"
},
"SERIES_TERMINAL_FIRSTDATE": {
	"prefix": "series_terminal_firstdate",
	"body": "SERIES_TERMINAL_FIRSTDATE"
},
"SERIES_SYNCHRONIZED": {
	"prefix": "series_synchronized",
	"body": "SERIES_SYNCHRONIZED"
},

//########################

"ENUM_CHART_EVENT": {
	"prefix": "enum_chart_event",
	"body": "ENUM_CHART_EVENT"
},
"CHARTEVENT_KEYDOWN": {
	"prefix": "chartevent_keydown",
	"body": "CHARTEVENT_KEYDOWN"
},
"CHARTEVENT_MOUSE_MOVE": {
	"prefix": "chartevent_mouse_move",
	"body": "CHARTEVENT_MOUSE_MOVE"
},
"CHARTEVENT_MOUSE_WHEEL": {
	"prefix": "chartevent_mouse_wheel",
	"body": "CHARTEVENT_MOUSE_WHEEL"
},
"CHARTEVENT_OBJECT_CREATE": {
	"prefix": "chartevent_object_create",
	"body": "CHARTEVENT_OBJECT_CREATE"
},
"CHARTEVENT_OBJECT_CHANGE": {
	"prefix": "chartevent_object_change",
	"body": "CHARTEVENT_OBJECT_CHANGE"
},
"CHARTEVENT_OBJECT_DELETE": {
	"prefix": "chartevent_object_delete",
	"body": "CHARTEVENT_OBJECT_DELETE"
},
"CHARTEVENT_CLICK": {
	"prefix": "chartevent_click",
	"body": "CHARTEVENT_CLICK"
},
"CHARTEVENT_OBJECT_CLICK": {
	"prefix": "chartevent_object_click",
	"body": "CHARTEVENT_OBJECT_CLICK"
},
"CHARTEVENT_OBJECT_DRAG": {
	"prefix": "chartevent_object_drag",
	"body": "CHARTEVENT_OBJECT_DRAG"
},
"CHARTEVENT_OBJECT_ENDEDIT": {
	"prefix": "chartevent_object_endedit",
	"body": "CHARTEVENT_OBJECT_ENDEDIT"
},
"CHARTEVENT_CHART_CHANGE": {
	"prefix": "chartevent_chart_change",
	"body": "CHARTEVENT_CHART_CHANGE"
},
"CHARTEVENT_CUSTOM": {
	"prefix": "chartevent_custom",
	"body": "CHARTEVENT_CUSTOM"
},
"CHARTEVENT_CUSTOM_LAST": {
	"prefix": "chartevent_custom_last",
	"body": "CHARTEVENT_CUSTOM_LAST"
},

//########################

"ENUM_TIMEFRAMES": {
	"prefix": "enum_timeframes",
	"body": "ENUM_TIMEFRAMES"
},
"PERIOD_CURRENT": {
	"prefix": "period_current",
	"body": "PERIOD_CURRENT"
},
"PERIOD_M1": {
	"prefix": "period_m1",
	"body": "PERIOD_M1"
},
"PERIOD_M2": {
	"prefix": "period_m2",
	"body": "PERIOD_M2"
},
"PERIOD_M3": {
	"prefix": "period_m3",
	"body": "PERIOD_M3"
},
"PERIOD_M4": {
	"prefix": "period_m4",
	"body": "PERIOD_M4"
},
"PERIOD_M5": {
	"prefix": "period_m5",
	"body": "PERIOD_M5"
},
"PERIOD_M6": {
	"prefix": "period_m6",
	"body": "PERIOD_M6"
},
"PERIOD_M10": {
	"prefix": "period_m10",
	"body": "PERIOD_M10"
},
"PERIOD_M12": {
	"prefix": "period_m12",
	"body": "PERIOD_M12"
},
"PERIOD_M15": {
	"prefix": "period_m15",
	"body": "PERIOD_M15"
},
"PERIOD_M20": {
	"prefix": "period_m20",
	"body": "PERIOD_M20"
},
"PERIOD_M30": {
	"prefix": "period_m30",
	"body": "PERIOD_M30"
},
"PERIOD_H1": {
	"prefix": "period_h1",
	"body": "PERIOD_H1"
},
"PERIOD_H2": {
	"prefix": "period_h2",
	"body": "PERIOD_H2"
},
"PERIOD_H3": {
	"prefix": "period_h3",
	"body": "PERIOD_H3"
},
"PERIOD_H4": {
	"prefix": "period_h4",
	"body": "PERIOD_H4"
},
"PERIOD_H6": {
	"prefix": "period_h6",
	"body": "PERIOD_H6"
},
"PERIOD_H8": {
	"prefix": "period_h8",
	"body": "PERIOD_H8"
},
"PERIOD_H12": {
	"prefix": "period_h12",
	"body": "PERIOD_H12"
},
"PERIOD_D1": {
	"prefix": "period_d1",
	"body": "PERIOD_D1"
},
"PERIOD_W1": {
	"prefix": "period_w1",
	"body": "PERIOD_W1"
},
"PERIOD_MN1": {
	"prefix": "period_mn1",
	"body": "PERIOD_MN1"
},

//########################

"ENUM_SERIESMODE": {
	"prefix": "enum_seriesmode",
	"body": "ENUM_SERIESMODE"
},
"MODE_OPEN": {
	"prefix": "mode_open",
	"body": "MODE_OPEN"
},
"MODE_LOW": {
	"prefix": "mode_low",
	"body": "MODE_LOW"
},
"MODE_HIGH": {
	"prefix": "mode_high",
	"body": "MODE_HIGH"
},
"MODE_CLOSE": {
	"prefix": "mode_close",
	"body": "MODE_CLOSE"
},
"MODE_VOLUME": {
	"prefix": "mode_volume",
	"body": "MODE_VOLUME"
},
"MODE_REAL_VOLUME": {
	"prefix": "mode_real_volume",
	"body": "MODE_REAL_VOLUME"
},
"MODE_SPREAD": {
	"prefix": "mode_spread",
	"body": "MODE_SPREAD"
},

//########################

"ENUM_CHART_PROPERTY_INTEGER": {
	"prefix": "enum_chart_property_integer",
	"body": "ENUM_CHART_PROPERTY_INTEGER"
},
"CHART_SHOW": {
	"prefix": "chart_show",
	"body": "CHART_SHOW"
},
"CHART_IS_OBJECT": {
	"prefix": "chart_is_object",
	"body": "CHART_IS_OBJECT"
},
"CHART_BRING_TO_TOP": {
	"prefix": "chart_bring_to_top",
	"body": "CHART_BRING_TO_TOP"
},
"CHART_CONTEXT_MENU": {
	"prefix": "chart_context_menu",
	"body": "CHART_CONTEXT_MENU"
},
"CHART_CROSSHAIR_TOOL": {
	"prefix": "chart_crosshair_tool",
	"body": "CHART_CROSSHAIR_TOOL"
},
"CHART_MOUSE_SCROLL": {
	"prefix": "chart_mouse_scroll",
	"body": "CHART_MOUSE_SCROLL"
},
"CHART_EVENT_MOUSE_WHEEL": {
	"prefix": "chart_event_mouse_wheel",
	"body": "CHART_EVENT_MOUSE_WHEEL"
},
"CHART_EVENT_MOUSE_MOVE": {
	"prefix": "chart_event_mouse_move",
	"body": "CHART_EVENT_MOUSE_MOVE"
},
"CHART_EVENT_OBJECT_CREATE": {
	"prefix": "chart_event_object_create",
	"body": "CHART_EVENT_OBJECT_CREATE"
},
"CHART_EVENT_OBJECT_DELETE": {
	"prefix": "chart_event_object_delete",
	"body": "CHART_EVENT_OBJECT_DELETE"
},
"CHART_MODE": {
	"prefix": "chart_mode",
	"body": "CHART_MODE"
},
"CHART_FOREGROUND": {
	"prefix": "chart_foreground",
	"body": "CHART_FOREGROUND"
},
"CHART_SHIFT": {
	"prefix": "chart_shift",
	"body": "CHART_SHIFT"
},
"CHART_AUTOSCROLL": {
	"prefix": "chart_autoscroll",
	"body": "CHART_AUTOSCROLL"
},
"CHART_KEYBOARD_CONTROL": {
	"prefix": "chart_keyboard_control",
	"body": "CHART_KEYBOARD_CONTROL"
},
"CHART_QUICK_NAVIGATION": {
	"prefix": "chart_quick_navigation",
	"body": "CHART_QUICK_NAVIGATION"
},
"CHART_SCALE": {
	"prefix": "chart_scale",
	"body": "CHART_SCALE"
},
"CHART_SCALEFIX": {
	"prefix": "chart_scalefix",
	"body": "CHART_SCALEFIX"
},
"CHART_SCALEFIX_11": {
	"prefix": "chart_scalefix_11",
	"body": "CHART_SCALEFIX_11"
},
"CHART_SCALE_PT_PER_BAR": {
	"prefix": "chart_scale_pt_per_bar",
	"body": "CHART_SCALE_PT_PER_BAR"
},
"CHART_SHOW_TICKER": {
	"prefix": "chart_show_ticker",
	"body": "CHART_SHOW_TICKER"
},
"CHART_SHOW_OHLC": {
	"prefix": "chart_show_ohlc",
	"body": "CHART_SHOW_OHLC"
},
"CHART_SHOW_BID_LINE": {
	"prefix": "chart_show_bid_line",
	"body": "CHART_SHOW_BID_LINE"
},
"CHART_SHOW_ASK_LINE": {
	"prefix": "chart_show_ask_line",
	"body": "CHART_SHOW_ASK_LINE"
},
"CHART_SHOW_LAST_LINE": {
	"prefix": "chart_show_last_line",
	"body": "CHART_SHOW_LAST_LINE"
},
"CHART_SHOW_PERIOD_SEP": {
	"prefix": "chart_show_period_sep",
	"body": "CHART_SHOW_PERIOD_SEP"
},
"CHART_SHOW_GRID": {
	"prefix": "chart_show_grid",
	"body": "CHART_SHOW_GRID"
},
"CHART_SHOW_VOLUMES": {
	"prefix": "chart_show_volumes",
	"body": "CHART_SHOW_VOLUMES"
},
"CHART_SHOW_OBJECT_DESCR": {
	"prefix": "chart_show_object_descr",
	"body": "CHART_SHOW_OBJECT_DESCR"
},
"CHART_VISIBLE_BARS": {
	"prefix": "chart_visible_bars",
	"body": "CHART_VISIBLE_BARS"
},
"CHART_WINDOWS_TOTAL": {
	"prefix": "chart_windows_total",
	"body": "CHART_WINDOWS_TOTAL"
},
"CHART_WINDOW_IS_VISIBLE": {
	"prefix": "chart_window_is_visible",
	"body": "CHART_WINDOW_IS_VISIBLE"
},
"CHART_WINDOW_HANDLE": {
	"prefix": "chart_window_handle",
	"body": "CHART_WINDOW_HANDLE"
},
"CHART_WINDOW_YDISTANCE": {
	"prefix": "chart_window_ydistance",
	"body": "CHART_WINDOW_YDISTANCE"
},
"CHART_FIRST_VISIBLE_BAR": {
	"prefix": "chart_first_visible_bar",
	"body": "CHART_FIRST_VISIBLE_BAR"
},
"CHART_WIDTH_IN_BARS": {
	"prefix": "chart_width_in_bars",
	"body": "CHART_WIDTH_IN_BARS"
},
"CHART_WIDTH_IN_PIXELS": {
	"prefix": "chart_width_in_pixels",
	"body": "CHART_WIDTH_IN_PIXELS"
},
"CHART_HEIGHT_IN_PIXELS": {
	"prefix": "chart_height_in_pixels",
	"body": "CHART_HEIGHT_IN_PIXELS"
},
"CHART_COLOR_BACKGROUND": {
	"prefix": "chart_color_background",
	"body": "CHART_COLOR_BACKGROUND"
},
"CHART_COLOR_FOREGROUND": {
	"prefix": "chart_color_foreground",
	"body": "CHART_COLOR_FOREGROUND"
},
"CHART_COLOR_GRID": {
	"prefix": "chart_color_grid",
	"body": "CHART_COLOR_GRID"
},
"CHART_COLOR_VOLUME": {
	"prefix": "chart_color_volume",
	"body": "CHART_COLOR_VOLUME"
},
"CHART_COLOR_CHART_UP": {
	"prefix": "chart_color_chart_up",
	"body": "CHART_COLOR_CHART_UP"
},
"CHART_COLOR_CHART_DOWN": {
	"prefix": "chart_color_chart_down",
	"body": "CHART_COLOR_CHART_DOWN"
},
"CHART_COLOR_CHART_LINE": {
	"prefix": "chart_color_chart_line",
	"body": "CHART_COLOR_CHART_LINE"
},
"CHART_COLOR_CANDLE_BULL": {
	"prefix": "chart_color_candle_bull",
	"body": "CHART_COLOR_CANDLE_BULL"
},
"CHART_COLOR_CANDLE_BEAR": {
	"prefix": "chart_color_candle_bear",
	"body": "CHART_COLOR_CANDLE_BEAR"
},
"CHART_COLOR_BID": {
	"prefix": "chart_color_bid",
	"body": "CHART_COLOR_BID"
},
"CHART_COLOR_ASK": {
	"prefix": "chart_color_ask",
	"body": "CHART_COLOR_ASK"
},
"CHART_COLOR_LAST": {
	"prefix": "chart_color_last",
	"body": "CHART_COLOR_LAST"
},
"CHART_COLOR_STOP_LEVEL": {
	"prefix": "chart_color_stop_level",
	"body": "CHART_COLOR_STOP_LEVEL"
},
"CHART_SHOW_TRADE_LEVELS": {
	"prefix": "chart_show_trade_levels",
	"body": "CHART_SHOW_TRADE_LEVELS"
},
"CHART_DRAG_TRADE_LEVELS": {
	"prefix": "chart_drag_trade_levels",
	"body": "CHART_DRAG_TRADE_LEVELS"
},
"CHART_SHOW_DATE_SCALE": {
	"prefix": "chart_show_date_scale",
	"body": "CHART_SHOW_DATE_SCALE"
},
"CHART_SHOW_PRICE_SCALE": {
	"prefix": "chart_show_price_scale",
	"body": "CHART_SHOW_PRICE_SCALE"
},
"CHART_SHOW_ONE_CLICK": {
	"prefix": "chart_show_one_click",
	"body": "CHART_SHOW_ONE_CLICK"
},
"CHART_IS_MAXIMIZED": {
	"prefix": "chart_is_maximized",
	"body": "CHART_IS_MAXIMIZED"
},
"CHART_IS_MINIMIZED": {
	"prefix": "chart_is_minimized",
	"body": "CHART_IS_MINIMIZED"
},
"CHART_IS_DOCKED": {
	"prefix": "chart_is_docked",
	"body": "CHART_IS_DOCKED"
},
"CHART_FLOAT_LEFT": {
	"prefix": "chart_float_left",
	"body": "CHART_FLOAT_LEFT"
},
"CHART_FLOAT_TOP": {
	"prefix": "chart_float_top",
	"body": "CHART_FLOAT_TOP"
},
"CHART_FLOAT_RIGHT": {
	"prefix": "chart_float_right",
	"body": "CHART_FLOAT_RIGHT"
},
"CHART_FLOAT_BOTTOM": {
	"prefix": "chart_float_bottom",
	"body": "CHART_FLOAT_BOTTOM"
},

//########################

"ENUM_CHART_PROPERTY_DOUBLE": {
	"prefix": "enum_chart_property_double",
	"body": "ENUM_CHART_PROPERTY_DOUBLE"
},
"CHART_SHIFT_SIZE": {
	"prefix": "chart_shift_size",
	"body": "CHART_SHIFT_SIZE"
},
"CHART_FIXED_POSITION": {
	"prefix": "chart_fixed_position",
	"body": "CHART_FIXED_POSITION"
},
"CHART_FIXED_MAX": {
	"prefix": "chart_fixed_max",
	"body": "CHART_FIXED_MAX"
},
"CHART_FIXED_MIN": {
	"prefix": "chart_fixed_min",
	"body": "CHART_FIXED_MIN"
},
"CHART_POINTS_PER_BAR": {
	"prefix": "chart_points_per_bar",
	"body": "CHART_POINTS_PER_BAR"
},
"CHART_PRICE_MIN": {
	"prefix": "chart_price_min",
	"body": "CHART_PRICE_MIN"
},
"CHART_PRICE_MAX": {
	"prefix": "chart_price_max",
	"body": "CHART_PRICE_MAX"
},

//########################

"ENUM_CHART_PROPERTY_STRING": {
	"prefix": "enum_chart_property_string",
	"body": "ENUM_CHART_PROPERTY_STRING"
},
"CHART_COMMENT": {
	"prefix": "chart_comment",
	"body": "CHART_COMMENT"
},
"CHART_EXPERT_NAME": {
	"prefix": "chart_expert_name",
	"body": "CHART_EXPERT_NAME"
},
"CHART_SCRIPT_NAME": {
	"prefix": "chart_script_name",
	"body": "CHART_SCRIPT_NAME"
},

//########################

"ENUM_CHART_POSITION": {
	"prefix": "enum_chart_position",
	"body": "ENUM_CHART_POSITION"
},
"CHART_BEGIN": {
	"prefix": "chart_begin",
	"body": "CHART_BEGIN"
},
"CHART_CURRENT_POS": {
	"prefix": "chart_current_pos",
	"body": "CHART_CURRENT_POS"
},
"CHART_END": {
	"prefix": "chart_end",
	"body": "CHART_END"
},

//########################

"ENUM_CHART_MODE": {
	"prefix": "enum_chart_mode",
	"body": "ENUM_CHART_MODE"
},
"CHART_BARS": {
	"prefix": "chart_bars",
	"body": "CHART_BARS"
},
"CHART_CANDLES": {
	"prefix": "chart_candles",
	"body": "CHART_CANDLES"
},
"CHART_LINE": {
	"prefix": "chart_line",
	"body": "CHART_LINE"
},

//########################

"ENUM_CHART_VOLUME_MODE": {
	"prefix": "enum_chart_volume_mode",
	"body": "ENUM_CHART_VOLUME_MODE"
},
"CHART_VOLUME_HIDE": {
	"prefix": "chart_volume_hide",
	"body": "CHART_VOLUME_HIDE"
},
"CHART_VOLUME_TICK": {
	"prefix": "chart_volume_tick",
	"body": "CHART_VOLUME_TICK"
},
"CHART_VOLUME_REAL": {
	"prefix": "chart_volume_real",
	"body": "CHART_VOLUME_REAL"
},

//########################

"ENUM_OBJECT": {
	"prefix": "enum_object",
	"body": "ENUM_OBJECT"
},
"OBJ_VLINE": {
	"prefix": "obj_vline",
	"body": "OBJ_VLINE"
},
"OBJ_HLINEl Line": {
	"prefix": "obj_hlinel line",
	"body": "OBJ_HLINEl Line"
},
"OBJ_TREND": {
	"prefix": "obj_trend",
	"body": "OBJ_TREND"
},
"OBJ_TRENDBYANGLE": {
	"prefix": "obj_trendbyangle",
	"body": "OBJ_TRENDBYANGLE"
},
"OBJ_CYCLES": {
	"prefix": "obj_cycles",
	"body": "OBJ_CYCLES"
},
"OBJ_ARROWED_LINE": {
	"prefix": "obj_arrowed_line",
	"body": "OBJ_ARROWED_LINE"
},
"OBJ_CHANNEL": {
	"prefix": "obj_channel",
	"body": "OBJ_CHANNEL"
},
"OBJ_STDDEVCHANNEL": {
	"prefix": "obj_stddevchannel",
	"body": "OBJ_STDDEVCHANNEL"
},
"OBJ_REGRESSION": {
	"prefix": "obj_regression",
	"body": "OBJ_REGRESSION"
},
"OBJ_PITCHFORK": {
	"prefix": "obj_pitchfork",
	"body": "OBJ_PITCHFORK"
},
"OBJ_GANNLINE": {
	"prefix": "obj_gannline",
	"body": "OBJ_GANNLINE"
},
"OBJ_GANNFAN": {
	"prefix": "obj_gannfan",
	"body": "OBJ_GANNFAN"
},
"OBJ_GANNGRID": {
	"prefix": "obj_ganngrid",
	"body": "OBJ_GANNGRID"
},
"OBJ_FIBO": {
	"prefix": "obj_fibo",
	"body": "OBJ_FIBO"
},
"OBJ_FIBOTIMES": {
	"prefix": "obj_fibotimes",
	"body": "OBJ_FIBOTIMES"
},
"OBJ_FIBOFAN": {
	"prefix": "obj_fibofan",
	"body": "OBJ_FIBOFAN"
},
"OBJ_FIBOARC": {
	"prefix": "obj_fiboarc",
	"body": "OBJ_FIBOARC"
},
"OBJ_FIBOCHANNEL": {
	"prefix": "obj_fibochannel",
	"body": "OBJ_FIBOCHANNEL"
},
"OBJ_EXPANSION": {
	"prefix": "obj_expansion",
	"body": "OBJ_EXPANSION"
},
"OBJ_ELLIOTWAVE5": {
	"prefix": "obj_elliotwave5",
	"body": "OBJ_ELLIOTWAVE5"
},
"OBJ_ELLIOTWAVE3": {
	"prefix": "obj_elliotwave3",
	"body": "OBJ_ELLIOTWAVE3"
},
"OBJ_RECTANGLE": {
	"prefix": "obj_rectangle",
	"body": "OBJ_RECTANGLE"
},
"OBJ_TRIANGLE": {
	"prefix": "obj_triangle",
	"body": "OBJ_TRIANGLE"
},
"OBJ_ELLIPSE": {
	"prefix": "obj_ellipse",
	"body": "OBJ_ELLIPSE"
},
"OBJ_ARROW_THUMB_UP": {
	"prefix": "obj_arrow_thumb_up",
	"body": "OBJ_ARROW_THUMB_UP"
},
"OBJ_ARROW_THUMB_DOWN": {
	"prefix": "obj_arrow_thumb_down",
	"body": "OBJ_ARROW_THUMB_DOWN"
},
"OBJ_ARROW_UP": {
	"prefix": "obj_arrow_up",
	"body": "OBJ_ARROW_UP"
},
"OBJ_ARROW_DOWN": {
	"prefix": "obj_arrow_down",
	"body": "OBJ_ARROW_DOWN"
},
"OBJ_ARROW_STOP": {
	"prefix": "obj_arrow_stop",
	"body": "OBJ_ARROW_STOP"
},
"OBJ_ARROW_CHECK": {
	"prefix": "obj_arrow_check",
	"body": "OBJ_ARROW_CHECK"
},
"OBJ_ARROW_LEFT_PRICE": {
	"prefix": "obj_arrow_left_price",
	"body": "OBJ_ARROW_LEFT_PRICE"
},
"OBJ_ARROW_RIGHT_PRICE": {
	"prefix": "obj_arrow_right_price",
	"body": "OBJ_ARROW_RIGHT_PRICE"
},
"OBJ_ARROW_BUY": {
	"prefix": "obj_arrow_buy",
	"body": "OBJ_ARROW_BUY"
},
"OBJ_ARROW_SELL": {
	"prefix": "obj_arrow_sell",
	"body": "OBJ_ARROW_SELL"
},
"OBJ_ARROW": {
	"prefix": "obj_arrow",
	"body": "OBJ_ARROW"
},

//########################

"OBJ_TEXT": {
	"prefix": "obj_text",
	"body": "OBJ_TEXT"
},
"OBJ_LABEL": {
	"prefix": "obj_label",
	"body": "OBJ_LABEL"
},
"OBJ_BUTTON": {
	"prefix": "obj_button",
	"body": "OBJ_BUTTON"
},
"OBJ_CHART": {
	"prefix": "obj_chart",
	"body": "OBJ_CHART"
},
"OBJ_BITMAP": {
	"prefix": "obj_bitmap",
	"body": "OBJ_BITMAP"
},
"OBJ_BITMAP_LABEL": {
	"prefix": "obj_bitmap_label",
	"body": "OBJ_BITMAP_LABEL"
},
"OBJ_EDIT": {
	"prefix": "obj_edit",
	"body": "OBJ_EDIT"
},
"OBJ_EVENT": {
	"prefix": "obj_event",
	"body": "OBJ_EVENT"
},
"OBJ_RECTANGLE_LABEL": {
	"prefix": "obj_rectangle_label",
	"body": "OBJ_RECTANGLE_LABEL"
},

//########################

"ENUM_OBJECT_PROPERTY_INTEGER": {
	"prefix": "enum_object_property_integer",
	"body": "ENUM_OBJECT_PROPERTY_INTEGER"
},
"OBJPROP_COLOR": {
	"prefix": "objprop_color",
	"body": "OBJPROP_COLOR"
},
"OBJPROP_STYLE": {
	"prefix": "objprop_style",
	"body": "OBJPROP_STYLE"
},
"OBJPROP_WIDTH": {
	"prefix": "objprop_width",
	"body": "OBJPROP_WIDTH"
},
"OBJPROP_BACK": {
	"prefix": "objprop_back",
	"body": "OBJPROP_BACK"
},
"OBJPROP_ZORDER": {
	"prefix": "objprop_zorder",
	"body": "OBJPROP_ZORDER"
},
"OBJPROP_FILL": {
	"prefix": "objprop_fill",
	"body": "OBJPROP_FILL"
},
"OBJPROP_HIDDEN": {
	"prefix": "objprop_hidden",
	"body": "OBJPROP_HIDDEN"
},
"OBJPROP_SELECTED": {
	"prefix": "objprop_selected",
	"body": "OBJPROP_SELECTED"
},
"OBJPROP_READONLY": {
	"prefix": "objprop_readonly",
	"body": "OBJPROP_READONLY"
},
"OBJPROP_TYPE": {
	"prefix": "objprop_type",
	"body": "OBJPROP_TYPE"
},
"OBJPROP_TIME": {
	"prefix": "objprop_time",
	"body": "OBJPROP_TIME"
},
"OBJPROP_SELECTABLE": {
	"prefix": "objprop_selectable",
	"body": "OBJPROP_SELECTABLE"
},
"OBJPROP_CREATETIME": {
	"prefix": "objprop_createtime",
	"body": "OBJPROP_CREATETIME"
},
"OBJPROP_LEVELS": {
	"prefix": "objprop_levels",
	"body": "OBJPROP_LEVELS"
},
"OBJPROP_LEVELCOLOR": {
	"prefix": "objprop_levelcolor",
	"body": "OBJPROP_LEVELCOLOR"
},
"OBJPROP_LEVELSTYLE": {
	"prefix": "objprop_levelstyle",
	"body": "OBJPROP_LEVELSTYLE"
},
"OBJPROP_LEVELWIDTH": {
	"prefix": "objprop_levelwidth",
	"body": "OBJPROP_LEVELWIDTH"
},
"OBJPROP_ALIGN": {
	"prefix": "objprop_align",
	"body": "OBJPROP_ALIGN"
},
"OBJPROP_FONTSIZE": {
	"prefix": "objprop_fontsize",
	"body": "OBJPROP_FONTSIZE"
},
"OBJPROP_RAY_LEFT": {
	"prefix": "objprop_ray_left",
	"body": "OBJPROP_RAY_LEFT"
},
"OBJPROP_RAY_RIGHT": {
	"prefix": "objprop_ray_right",
	"body": "OBJPROP_RAY_RIGHT"
},
"OBJPROP_RAY": {
	"prefix": "objprop_ray",
	"body": "OBJPROP_RAY"
},
"OBJPROP_ELLIPSE": {
	"prefix": "objprop_ellipse",
	"body": "OBJPROP_ELLIPSE"
},
"OBJPROP_ARROWCODE": {
	"prefix": "objprop_arrowcode",
	"body": "OBJPROP_ARROWCODE"
},
"OBJPROP_TIMEFRAMES": {
	"prefix": "objprop_timeframes",
	"body": "OBJPROP_TIMEFRAMES"
},
"OBJPROP_ANCHOR": {
	"prefix": "objprop_anchor",
	"body": "OBJPROP_ANCHOR"
},
"OBJPROP_XDISTANCE": {
	"prefix": "objprop_xdistance",
	"body": "OBJPROP_XDISTANCE"
},
"OBJPROP_YDISTANCE": {
	"prefix": "objprop_ydistance",
	"body": "OBJPROP_YDISTANCE"
},
"OBJPROP_DIRECTION": {
	"prefix": "objprop_direction",
	"body": "OBJPROP_DIRECTION"
},
"OBJPROP_DEGREE": {
	"prefix": "objprop_degree",
	"body": "OBJPROP_DEGREE"
},
"OBJPROP_DRAWLINES": {
	"prefix": "objprop_drawlines",
	"body": "OBJPROP_DRAWLINES"
},
"OBJPROP_STATE": {
	"prefix": "objprop_state",
	"body": "OBJPROP_STATE"
},
"OBJPROP_CHART_ID": {
	"prefix": "objprop_chart_id",
	"body": "OBJPROP_CHART_ID"
},
"OBJPROP_XSIZE": {
	"prefix": "objprop_xsize",
	"body": "OBJPROP_XSIZE"
},
"OBJPROP_YSIZE": {
	"prefix": "objprop_ysize",
	"body": "OBJPROP_YSIZE"
},
"OBJPROP_XOFFSET": {
	"prefix": "objprop_xoffset",
	"body": "OBJPROP_XOFFSET"
},
"OBJPROP_YOFFSET": {
	"prefix": "objprop_yoffset",
	"body": "OBJPROP_YOFFSET"
},
"OBJPROP_PERIOD": {
	"prefix": "objprop_period",
	"body": "OBJPROP_PERIOD"
},
"OBJPROP_DATE_SCALE": {
	"prefix": "objprop_date_scale",
	"body": "OBJPROP_DATE_SCALE"
},
"OBJPROP_PRICE_SCALE": {
	"prefix": "objprop_price_scale",
	"body": "OBJPROP_PRICE_SCALE"
},
"OBJPROP_CHART_SCALE": {
	"prefix": "objprop_chart_scale",
	"body": "OBJPROP_CHART_SCALE"
},
"OBJPROP_BGCOLOR": {
	"prefix": "objprop_bgcolor",
	"body": "OBJPROP_BGCOLOR"
},
"OBJPROP_CORNER": {
	"prefix": "objprop_corner",
	"body": "OBJPROP_CORNER"
},
"OBJPROP_BORDER_TYPE": {
	"prefix": "objprop_border_type",
	"body": "OBJPROP_BORDER_TYPE"
},
"OBJPROP_BORDER_COLOR": {
	"prefix": "objprop_border_color",
	"body": "OBJPROP_BORDER_COLOR"
},

//########################

"ENUM_OBJECT_PROPERTY_DOUBLE": {
	"prefix": "enum_object_property_double",
	"body": "ENUM_OBJECT_PROPERTY_DOUBLE"
},
"OBJPROP_PRICE": {
	"prefix": "objprop_price",
	"body": "OBJPROP_PRICE"
},
"OBJPROP_LEVELVALUE": {
	"prefix": "objprop_levelvalue",
	"body": "OBJPROP_LEVELVALUE"
},
"OBJPROP_SCALE": {
	"prefix": "objprop_scale",
	"body": "OBJPROP_SCALE"
},
"OBJPROP_ANGLE": {
	"prefix": "objprop_angle",
	"body": "OBJPROP_ANGLE"
},
"OBJPROP_DEVIATION": {
	"prefix": "objprop_deviation",
	"body": "OBJPROP_DEVIATION"
},

//########################

"ENUM_OBJECT_PROPERTY_STRING": {
	"prefix": "enum_object_property_string",
	"body": "ENUM_OBJECT_PROPERTY_STRING"
},
"OBJPROP_NAME": {
	"prefix": "objprop_name",
	"body": "OBJPROP_NAME"
},
"OBJPROP_TEXT": {
	"prefix": "objprop_text",
	"body": "OBJPROP_TEXT"
},
"OBJPROP_TOOLTIP": {
	"prefix": "objprop_tooltip",
	"body": "OBJPROP_TOOLTIP"
},
"OBJPROP_LEVELTEXT": {
	"prefix": "objprop_leveltext",
	"body": "OBJPROP_LEVELTEXT"
},
"OBJPROP_FONT": {
	"prefix": "objprop_font",
	"body": "OBJPROP_FONT"
},
"OBJPROP_BMPFILE": {
	"prefix": "objprop_bmpfile",
	"body": "OBJPROP_BMPFILE"
},
"OBJPROP_SYMBOL": {
	"prefix": "objprop_symbol",
	"body": "OBJPROP_SYMBOL"
},

//########################

"ENUM_BORDER_TYPE": {
	"prefix": "enum_border_type",
	"body": "ENUM_BORDER_TYPE"
},
"BORDER_FLAT": {
	"prefix": "border_flat",
	"body": "BORDER_FLAT"
},
"BORDER_RAISED": {
	"prefix": "border_raised",
	"body": "BORDER_RAISED"
},
"BORDER_SUNKEN": {
	"prefix": "border_sunken",
	"body": "BORDER_SUNKEN"
},

//########################

"ENUM_ALIGN_MODE": {
	"prefix": "enum_align_mode",
	"body": "ENUM_ALIGN_MODE"
},
"ALIGN_LEFT": {
	"prefix": "align_left",
	"body": "ALIGN_LEFT"
},
"ALIGN_CENTER": {
	"prefix": "align_center",
	"body": "ALIGN_CENTER"
},
"ALIGN_RIGHT": {
	"prefix": "align_right",
	"body": "ALIGN_RIGHT"
},

//########################

"ENUM_ANCHOR_POINT": {
	"prefix": "enum_anchor_point",
	"body": "ENUM_ANCHOR_POINT"
},
"ANCHOR_LEFT_UPPER": {
	"prefix": "anchor_left_upper",
	"body": "ANCHOR_LEFT_UPPER"
},
"ANCHOR_LEFT": {
	"prefix": "anchor_left",
	"body": "ANCHOR_LEFT"
},
"ANCHOR_LEFT_LOWER": {
	"prefix": "anchor_left_lower",
	"body": "ANCHOR_LEFT_LOWER"
},
"ANCHOR_LOWER": {
	"prefix": "anchor_lower",
	"body": "ANCHOR_LOWER"
},
"ANCHOR_RIGHT_LOWER": {
	"prefix": "anchor_right_lower",
	"body": "ANCHOR_RIGHT_LOWER"
},
"ANCHOR_RIGHT": {
	"prefix": "anchor_right",
	"body": "ANCHOR_RIGHT"
},
"ANCHOR_RIGHT_UPPER": {
	"prefix": "anchor_right_upper",
	"body": "ANCHOR_RIGHT_UPPER"
},
"ANCHOR_UPPER": {
	"prefix": "anchor_upper",
	"body": "ANCHOR_UPPER"
},
"ANCHOR_CENTER": {
	"prefix": "anchor_center",
	"body": "ANCHOR_CENTER"
},

//########################

"ENUM_ARROW_ANCHOR": {
	"prefix": "enum_arrow_anchor",
	"body": "ENUM_ARROW_ANCHOR"
},
"ANCHOR_TOP": {
	"prefix": "anchor_top",
	"body": "ANCHOR_TOP"
},
"ANCHOR_BOTTOM": {
	"prefix": "anchor_bottom",
	"body": "ANCHOR_BOTTOM"
},

//########################

"ENUM_BASE_CORNER": {
	"prefix": "enum_base_corner",
	"body": "ENUM_BASE_CORNER"
},
"CORNER_LEFT_UPPER": {
	"prefix": "corner_left_upper",
	"body": "CORNER_LEFT_UPPER"
},
"CORNER_LEFT_LOWER": {
	"prefix": "corner_left_lower",
	"body": "CORNER_LEFT_LOWER"
},
"CORNER_RIGHT_LOWER": {
	"prefix": "corner_right_lower",
	"body": "CORNER_RIGHT_LOWER"
},
"CORNER_RIGHT_UPPER": {
	"prefix": "corner_right_upper",
	"body": "CORNER_RIGHT_UPPER"
},

//########################

"OBJ_NO_PERIODS": {
	"prefix": "obj_no_periods",
	"body": "OBJ_NO_PERIODS"
},
"OBJ_PERIOD_M1": {
	"prefix": "obj_period_m1",
	"body": "OBJ_PERIOD_M1"
},
"OBJ_PERIOD_M2": {
	"prefix": "obj_period_m2",
	"body": "OBJ_PERIOD_M2"
},
"OBJ_PERIOD_M3": {
	"prefix": "obj_period_m3",
	"body": "OBJ_PERIOD_M3"
},
"OBJ_PERIOD_M4": {
	"prefix": "obj_period_m4",
	"body": "OBJ_PERIOD_M4"
},
"OBJ_PERIOD_M5": {
	"prefix": "obj_period_m5",
	"body": "OBJ_PERIOD_M5"
},
"OBJ_PERIOD_M6": {
	"prefix": "obj_period_m6",
	"body": "OBJ_PERIOD_M6"
},
"OBJ_PERIOD_M10": {
	"prefix": "obj_period_m10",
	"body": "OBJ_PERIOD_M10"
},
"OBJ_PERIOD_M12": {
	"prefix": "obj_period_m12",
	"body": "OBJ_PERIOD_M12"
},
"OBJ_PERIOD_M15": {
	"prefix": "obj_period_m15",
	"body": "OBJ_PERIOD_M15"
},
"OBJ_PERIOD_M20": {
	"prefix": "obj_period_m20",
	"body": "OBJ_PERIOD_M20"
},
"OBJ_PERIOD_M30": {
	"prefix": "obj_period_m30",
	"body": "OBJ_PERIOD_M30"
},
"OBJ_PERIOD_H1": {
	"prefix": "obj_period_h1",
	"body": "OBJ_PERIOD_H1"
},
"OBJ_PERIOD_H2": {
	"prefix": "obj_period_h2",
	"body": "OBJ_PERIOD_H2"
},
"OBJ_PERIOD_H3": {
	"prefix": "obj_period_h3",
	"body": "OBJ_PERIOD_H3"
},
"OBJ_PERIOD_H4": {
	"prefix": "obj_period_h4",
	"body": "OBJ_PERIOD_H4"
},
"OBJ_PERIOD_H6": {
	"prefix": "obj_period_h6",
	"body": "OBJ_PERIOD_H6"
},
"OBJ_PERIOD_H8": {
	"prefix": "obj_period_h8",
	"body": "OBJ_PERIOD_H8"
},
"OBJ_PERIOD_H12": {
	"prefix": "obj_period_h12",
	"body": "OBJ_PERIOD_H12"
},
"OBJ_PERIOD_D1": {
	"prefix": "obj_period_d1",
	"body": "OBJ_PERIOD_D1"
},
"OBJ_PERIOD_W1": {
	"prefix": "obj_period_w1",
	"body": "OBJ_PERIOD_W1"
},
"OBJ_PERIOD_MN1": {
	"prefix": "obj_period_mn1",
	"body": "OBJ_PERIOD_MN1"
},
"OBJ_ALL_PERIODS": {
	"prefix": "obj_all_periods",
	"body": "OBJ_ALL_PERIODS"
},

//########################

"ENUM_ELLIOT_WAVE_DEGREE": {
	"prefix": "enum_elliot_wave_degree",
	"body": "ENUM_ELLIOT_WAVE_DEGREE"
},
"ELLIOTT_GRAND_SUPERCYCLE": {
	"prefix": "elliott_grand_supercycle",
	"body": "ELLIOTT_GRAND_SUPERCYCLE"
},
"ELLIOTT_SUPERCYCLE": {
	"prefix": "elliott_supercycle",
	"body": "ELLIOTT_SUPERCYCLE"
},
"ELLIOTT_CYCLE": {
	"prefix": "elliott_cycle",
	"body": "ELLIOTT_CYCLE"
},
"ELLIOTT_PRIMARY": {
	"prefix": "elliott_primary",
	"body": "ELLIOTT_PRIMARY"
},
"ELLIOTT_INTERMEDIATE": {
	"prefix": "elliott_intermediate",
	"body": "ELLIOTT_INTERMEDIATE"
},
"ELLIOTT_MINOR": {
	"prefix": "elliott_minor",
	"body": "ELLIOTT_MINOR"
},
"ELLIOTT_MINUTE": {
	"prefix": "elliott_minute",
	"body": "ELLIOTT_MINUTE"
},
"ELLIOTT_MINUETTE": {
	"prefix": "elliott_minuette",
	"body": "ELLIOTT_MINUETTE"
},
"ELLIOTT_SUBMINUETTE": {
	"prefix": "elliott_subminuette",
	"body": "ELLIOTT_SUBMINUETTE"
},

//########################

"ENUM_GANN_DIRECTION": {
	"prefix": "enum_gann_direction",
	"body": "ENUM_GANN_DIRECTION"
},
"GANN_UP_TREND": {
	"prefix": "gann_up_trend",
	"body": "GANN_UP_TREND"
},
"GANN_DOWN_TREND": {
	"prefix": "gann_down_trend",
	"body": "GANN_DOWN_TREND"
},

//########################

"clrBlack": {
	"prefix": "clrblack",
	"body": "clrBlack"
},
"clrDarkGreen": {
	"prefix": "clrdarkgreen",
	"body": "clrDarkGreen"
},
"clrDarkSlateGray": {
	"prefix": "clrdarkslategray",
	"body": "clrDarkSlateGray"
},
"clrOlive": {
	"prefix": "clrolive",
	"body": "clrOlive"
},
"clrGreen": {
	"prefix": "clrgreen",
	"body": "clrGreen"
},
"clrTeal": {
	"prefix": "clrteal",
	"body": "clrTeal"
},
"clrNavy": {
	"prefix": "clrnavy",
	"body": "clrNavy"
},
"clrPurple": {
	"prefix": "clrpurple",
	"body": "clrPurple"
},
"clrMaroon": {
	"prefix": "clrmaroon",
	"body": "clrMaroon"
},
"clrIndigo": {
	"prefix": "clrindigo",
	"body": "clrIndigo"
},
"clrMidnightBlue": {
	"prefix": "clrmidnightblue",
	"body": "clrMidnightBlue"
},
"clrDarkBlue": {
	"prefix": "clrdarkblue",
	"body": "clrDarkBlue"
},
"clrDarkOliveGreen": {
	"prefix": "clrdarkolivegreen",
	"body": "clrDarkOliveGreen"
},
"clrSaddleBrown": {
	"prefix": "clrsaddlebrown",
	"body": "clrSaddleBrown"
},
"clrForestGreen": {
	"prefix": "clrforestgreen",
	"body": "clrForestGreen"
},
"clrOliveDrab": {
	"prefix": "clrolivedrab",
	"body": "clrOliveDrab"
},
"clrSeaGreen": {
	"prefix": "clrseagreen",
	"body": "clrSeaGreen"
},
"clrDarkGoldenrod": {
	"prefix": "clrdarkgoldenrod",
	"body": "clrDarkGoldenrod"
},
"clrDarkSlateBlue": {
	"prefix": "clrdarkslateblue",
	"body": "clrDarkSlateBlue"
},
"clrSienna": {
	"prefix": "clrsienna",
	"body": "clrSienna"
},
"clrMediumBlue": {
	"prefix": "clrmediumblue",
	"body": "clrMediumBlue"
},
"clrBrown": {
	"prefix": "clrbrown",
	"body": "clrBrown"
},
"clrDarkTurquoise": {
	"prefix": "clrdarkturquoise",
	"body": "clrDarkTurquoise"
},
"clrDimGray": {
	"prefix": "clrdimgray",
	"body": "clrDimGray"
},
"clrLightSeaGreen": {
	"prefix": "clrlightseagreen",
	"body": "clrLightSeaGreen"
},
"clrDarkViolet": {
	"prefix": "clrdarkviolet",
	"body": "clrDarkViolet"
},
"clrFireBrick": {
	"prefix": "clrfirebrick",
	"body": "clrFireBrick"
},
"clrMediumVioletRed": {
	"prefix": "clrmediumvioletred",
	"body": "clrMediumVioletRed"
},
"clrMediumSeaGreen": {
	"prefix": "clrmediumseagreen",
	"body": "clrMediumSeaGreen"
},
"clrChocolate": {
	"prefix": "clrchocolate",
	"body": "clrChocolate"
},
"clrCrimson": {
	"prefix": "clrcrimson",
	"body": "clrCrimson"
},
"clrSteelBlue": {
	"prefix": "clrsteelblue",
	"body": "clrSteelBlue"
},
"clrGoldenrod": {
	"prefix": "clrgoldenrod",
	"body": "clrGoldenrod"
},
"clrMediumSpringGreen": {
	"prefix": "clrmediumspringgreen",
	"body": "clrMediumSpringGreen"
},
"clrLawnGreen": {
	"prefix": "clrlawngreen",
	"body": "clrLawnGreen"
},
"clrCadetBlue": {
	"prefix": "clrcadetblue",
	"body": "clrCadetBlue"
},
"clrDarkOrchid": {
	"prefix": "clrdarkorchid",
	"body": "clrDarkOrchid"
},
"clrYellowGreen": {
	"prefix": "clryellowgreen",
	"body": "clrYellowGreen"
},
"clrLimeGreen": {
	"prefix": "clrlimegreen",
	"body": "clrLimeGreen"
},
"clrOrangeRed": {
	"prefix": "clrorangered",
	"body": "clrOrangeRed"
},
"clrDarkOrange": {
	"prefix": "clrdarkorange",
	"body": "clrDarkOrange"
},
"clrOrange": {
	"prefix": "clrorange",
	"body": "clrOrange"
},
"clrGold": {
	"prefix": "clrgold",
	"body": "clrGold"
},
"clrYellow": {
	"prefix": "clryellow",
	"body": "clrYellow"
},
"clrChartreuse": {
	"prefix": "clrchartreuse",
	"body": "clrChartreuse"
},
"clrLime": {
	"prefix": "clrlime",
	"body": "clrLime"
},
"clrSpringGreen": {
	"prefix": "clrspringgreen",
	"body": "clrSpringGreen"
},
"clrAqua": {
	"prefix": "clraqua",
	"body": "clrAqua"
},
"clrDeepSkyBlue": {
	"prefix": "clrdeepskyblue",
	"body": "clrDeepSkyBlue"
},
"clrBlue": {
	"prefix": "clrblue",
	"body": "clrBlue"
},
"clrMagenta": {
	"prefix": "clrmagenta",
	"body": "clrMagenta"
},
"clrRed": {
	"prefix": "clrred",
	"body": "clrRed"
},
"clrGray": {
	"prefix": "clrgray",
	"body": "clrGray"
},
"clrSlateGray": {
	"prefix": "clrslategray",
	"body": "clrSlateGray"
},
"clrPeru": {
	"prefix": "clrperu",
	"body": "clrPeru"
},
"clrBlueViolet": {
	"prefix": "clrblueviolet",
	"body": "clrBlueViolet"
},
"clrLightSlateGray": {
	"prefix": "clrlightslategray",
	"body": "clrLightSlateGray"
},
"clrDeepPink": {
	"prefix": "clrdeeppink",
	"body": "clrDeepPink"
},
"clrMediumTurquoise": {
	"prefix": "clrmediumturquoise",
	"body": "clrMediumTurquoise"
},
"clrDodgerBlue": {
	"prefix": "clrdodgerblue",
	"body": "clrDodgerBlue"
},
"clrTurquoise": {
	"prefix": "clrturquoise",
	"body": "clrTurquoise"
},
"clrRoyalBlue": {
	"prefix": "clrroyalblue",
	"body": "clrRoyalBlue"
},
"clrSlateBlue": {
	"prefix": "clrslateblue",
	"body": "clrSlateBlue"
},
"clrDarkKhaki": {
	"prefix": "clrdarkkhaki",
	"body": "clrDarkKhaki"
},
"clrIndianRed": {
	"prefix": "clrindianred",
	"body": "clrIndianRed"
},
"clrMediumOrchid": {
	"prefix": "clrmediumorchid",
	"body": "clrMediumOrchid"
},
"clrGreenYellow": {
	"prefix": "clrgreenyellow",
	"body": "clrGreenYellow"
},
"clrMediumAquamarine": {
	"prefix": "clrmediumaquamarine",
	"body": "clrMediumAquamarine"
},
"clrDarkSeaGreen": {
	"prefix": "clrdarkseagreen",
	"body": "clrDarkSeaGreen"
},
"clrTomato": {
	"prefix": "clrtomato",
	"body": "clrTomato"
},
"clrRosyBrown": {
	"prefix": "clrrosybrown",
	"body": "clrRosyBrown"
},
"clrOrchid": {
	"prefix": "clrorchid",
	"body": "clrOrchid"
},
"clrMediumurple": {
	"prefix": "clrmediumurple",
	"body": "clrMediumurple"
},
"clrPaleVioletRed": {
	"prefix": "clrpalevioletred",
	"body": "clrPaleVioletRed"
},
"clrCoral": {
	"prefix": "clrcoral",
	"body": "clrCoral"
},
"clrCornflowerBlue": {
	"prefix": "clrcornflowerblue",
	"body": "clrCornflowerBlue"
},
"clrDarkGray": {
	"prefix": "clrdarkgray",
	"body": "clrDarkGray"
},
"clrSandyBrown": {
	"prefix": "clrsandybrown",
	"body": "clrSandyBrown"
},
"clrMediumSlateBlue": {
	"prefix": "clrmediumslateblue",
	"body": "clrMediumSlateBlue"
},
"clrTan": {
	"prefix": "clrtan",
	"body": "clrTan"
},
"clrDarkSalmon": {
	"prefix": "clrdarksalmon",
	"body": "clrDarkSalmon"
},
"clrBurlyWood": {
	"prefix": "clrburlywood",
	"body": "clrBurlyWood"
},
"clrHotPink": {
	"prefix": "clrhotpink",
	"body": "clrHotPink"
},
"clrSalmon": {
	"prefix": "clrsalmon",
	"body": "clrSalmon"
},
"clrViolet": {
	"prefix": "clrviolet",
	"body": "clrViolet"
},
"clrLightCoral": {
	"prefix": "clrlightcoral",
	"body": "clrLightCoral"
},
"clrSkyBlue": {
	"prefix": "clrskyblue",
	"body": "clrSkyBlue"
},
"clrLightSalmon": {
	"prefix": "clrlightsalmon",
	"body": "clrLightSalmon"
},
"clrPlum": {
	"prefix": "clrplum",
	"body": "clrPlum"
},
"clrKhaki": {
	"prefix": "clrkhaki",
	"body": "clrKhaki"
},
"clrLightGreen": {
	"prefix": "clrlightgreen",
	"body": "clrLightGreen"
},
"clrAquamarine": {
	"prefix": "clraquamarine",
	"body": "clrAquamarine"
},
"clrSilver": {
	"prefix": "clrsilver",
	"body": "clrSilver"
},
"clrLightSkyBlue": {
	"prefix": "clrlightskyblue",
	"body": "clrLightSkyBlue"
},
"clrLightSteelBlue": {
	"prefix": "clrlightsteelblue",
	"body": "clrLightSteelBlue"
},
"clrLightBlue": {
	"prefix": "clrlightblue",
	"body": "clrLightBlue"
},
"clrPaleGreen": {
	"prefix": "clrpalegreen",
	"body": "clrPaleGreen"
},
"clrThistle": {
	"prefix": "clrthistle",
	"body": "clrThistle"
},
"clrPowderBlue": {
	"prefix": "clrpowderblue",
	"body": "clrPowderBlue"
},
"clrPaleGoldenrod": {
	"prefix": "clrpalegoldenrod",
	"body": "clrPaleGoldenrod"
},
"clrPaleTurquoise": {
	"prefix": "clrpaleturquoise",
	"body": "clrPaleTurquoise"
},
"clrLightGray": {
	"prefix": "clrlightgray",
	"body": "clrLightGray"
},
"clrWheat": {
	"prefix": "clrwheat",
	"body": "clrWheat"
},
"clrNavajoWhite": {
	"prefix": "clrnavajowhite",
	"body": "clrNavajoWhite"
},
"clrMoccasin": {
	"prefix": "clrmoccasin",
	"body": "clrMoccasin"
},
"clrLightPink": {
	"prefix": "clrlightpink",
	"body": "clrLightPink"
},
"clrGainsboro": {
	"prefix": "clrgainsboro",
	"body": "clrGainsboro"
},
"clrPeachPuff": {
	"prefix": "clrpeachpuff",
	"body": "clrPeachPuff"
},
"clrPink": {
	"prefix": "clrpink",
	"body": "clrPink"
},
"clrBisque": {
	"prefix": "clrbisque",
	"body": "clrBisque"
},
"clrLightGoldenrod": {
	"prefix": "clrlightgoldenrod",
	"body": "clrLightGoldenrod"
},
"clrBlanchedAlmond": {
	"prefix": "clrblanchedalmond",
	"body": "clrBlanchedAlmond"
},
"clrLemonChiffon": {
	"prefix": "clrlemonchiffon",
	"body": "clrLemonChiffon"
},
"clrBeige": {
	"prefix": "clrbeige",
	"body": "clrBeige"
},
"clrAntiqueWhite": {
	"prefix": "clrantiquewhite",
	"body": "clrAntiqueWhite"
},
"clrPapayaWhip": {
	"prefix": "clrpapayawhip",
	"body": "clrPapayaWhip"
},
"clrCornsilk": {
	"prefix": "clrcornsilk",
	"body": "clrCornsilk"
},
"clrLightYellow": {
	"prefix": "clrlightyellow",
	"body": "clrLightYellow"
},
"clrLightCyan": {
	"prefix": "clrlightcyan",
	"body": "clrLightCyan"
},
"clrLinen": {
	"prefix": "clrlinen",
	"body": "clrLinen"
},
"clrLavender": {
	"prefix": "clrlavender",
	"body": "clrLavender"
},
"clrMistyRose": {
	"prefix": "clrmistyrose",
	"body": "clrMistyRose"
},
"clrOldLace": {
	"prefix": "clroldlace",
	"body": "clrOldLace"
},
"clrWhiteSmoke": {
	"prefix": "clrwhitesmoke",
	"body": "clrWhiteSmoke"
},
"clrSeashell": {
	"prefix": "clrseashell",
	"body": "clrSeashell"
},
"clrIvory": {
	"prefix": "clrivory",
	"body": "clrIvory"
},
"clrHoneydew": {
	"prefix": "clrhoneydew",
	"body": "clrHoneydew"
},
"clrAliceBlue": {
	"prefix": "clraliceblue",
	"body": "clrAliceBlue"
},
"clrLavenderBlush": {
	"prefix": "clrlavenderblush",
	"body": "clrLavenderBlush"
},
"clrMintCream": {
	"prefix": "clrmintcream",
	"body": "clrMintCream"
},
"clrSnow": {
	"prefix": "clrsnow",
	"body": "clrSnow"
},
"clrWhite": {
	"prefix": "clrwhite",
	"body": "clrWhite"
},

//########################

"ENUM_APPLIED_PRICE": {
	"prefix": "enum_applied_price",
	"body": "ENUM_APPLIED_PRICE"
},
"PRICE_CLOSE": {
	"prefix": "price_close",
	"body": "PRICE_CLOSE"
},
"PRICE_OPEN": {
	"prefix": "price_open",
	"body": "PRICE_OPEN"
},
"PRICE_HIGH": {
	"prefix": "price_high",
	"body": "PRICE_HIGH"
},
"PRICE_LOW": {
	"prefix": "price_low",
	"body": "PRICE_LOW"
},
"PRICE_MEDIAN": {
	"prefix": "price_median",
	"body": "PRICE_MEDIAN"
},
"PRICE_TYPICAL": {
	"prefix": "price_typical",
	"body": "PRICE_TYPICAL"
},
"PRICE_WEIGHTED": {
	"prefix": "price_weighted",
	"body": "PRICE_WEIGHTED"
},

//########################

"ENUM_APPLIED_VOLUME": {
	"prefix": "enum_applied_volume",
	"body": "ENUM_APPLIED_VOLUME"
},
"VOLUME_TICK": {
	"prefix": "volume_tick",
	"body": "VOLUME_TICK"
},
"VOLUME_REAL": {
	"prefix": "volume_real",
	"body": "VOLUME_REAL"
},

//########################

"ENUM_STO_PRICE": {
	"prefix": "enum_sto_price",
	"body": "ENUM_STO_PRICE"
},
"STO_LOWHIGH": {
	"prefix": "sto_lowhigh",
	"body": "STO_LOWHIGH"
},
"STO_CLOSECLOSE": {
	"prefix": "sto_closeclose",
	"body": "STO_CLOSECLOSE"
},

//########################

"ENUM_MA_METHOD": {
	"prefix": "enum_ma_method",
	"body": "ENUM_MA_METHOD"
},
"MODE_SMA": {
	"prefix": "mode_sma",
	"body": "MODE_SMA"
},
"MODE_EMA": {
	"prefix": "mode_ema",
	"body": "MODE_EMA"
},
"MODE_SMMA": {
	"prefix": "mode_smma",
	"body": "MODE_SMMA"
},
"MODE_LWMA": {
	"prefix": "mode_lwma",
	"body": "MODE_LWMA"
},

//########################

"ENUM_DRAW_TYPE": {
	"prefix": "enum_draw_type",
	"body": "ENUM_DRAW_TYPE"
},
"DRAW_NONE": {
	"prefix": "draw_none",
	"body": "DRAW_NONE"
},
"DRAW_LINE": {
	"prefix": "draw_line",
	"body": "DRAW_LINE"
},
"DRAW_SECTION": {
	"prefix": "draw_section",
	"body": "DRAW_SECTION"
},
"DRAW_HISTOGRAM": {
	"prefix": "draw_histogram",
	"body": "DRAW_HISTOGRAM"
},
"DRAW_HISTOGRAM2": {
	"prefix": "draw_histogram2",
	"body": "DRAW_HISTOGRAM2"
},
"DRAW_ARROW": {
	"prefix": "draw_arrow",
	"body": "DRAW_ARROW"
},
"DRAW_ZIGZAG": {
	"prefix": "draw_zigzag",
	"body": "DRAW_ZIGZAG"
},
"DRAW_FILLING": {
	"prefix": "draw_filling",
	"body": "DRAW_FILLING"
},
"DRAW_BARS": {
	"prefix": "draw_bars",
	"body": "DRAW_BARS"
},
"DRAW_CANDLES": {
	"prefix": "draw_candles",
	"body": "DRAW_CANDLES"
},
"DRAW_COLOR_LINE": {
	"prefix": "draw_color_line",
	"body": "DRAW_COLOR_LINE"
},
"DRAW_COLOR_SECTION": {
	"prefix": "draw_color_section",
	"body": "DRAW_COLOR_SECTION"
},
"DRAW_COLOR_HISTOGRAM": {
	"prefix": "draw_color_histogram",
	"body": "DRAW_COLOR_HISTOGRAM"
},
"DRAW_COLOR_HISTOGRAM2": {
	"prefix": "draw_color_histogram2",
	"body": "DRAW_COLOR_HISTOGRAM2"
},
"DRAW_COLOR_ARROW": {
	"prefix": "draw_color_arrow",
	"body": "DRAW_COLOR_ARROW"
},
"DRAW_COLOR_ZIGZAG": {
	"prefix": "draw_color_zigzag",
	"body": "DRAW_COLOR_ZIGZAG"
},
"DRAW_COLOR_BARS": {
	"prefix": "draw_color_bars",
	"body": "DRAW_COLOR_BARS"
},
"DRAW_COLOR_CANDLES": {
	"prefix": "draw_color_candles",
	"body": "DRAW_COLOR_CANDLES"
},

//########################

"ENUM_PLOT_PROPERTY_INTEGER": {
	"prefix": "enum_plot_property_integer",
	"body": "ENUM_PLOT_PROPERTY_INTEGER"
},
"PLOT_ARROW": {
	"prefix": "plot_arrow",
	"body": "PLOT_ARROW"
},
"PLOT_ARROW_SHIFT": {
	"prefix": "plot_arrow_shift",
	"body": "PLOT_ARROW_SHIFT"
},
"PLOT_DRAW_BEGIN": {
	"prefix": "plot_draw_begin",
	"body": "PLOT_DRAW_BEGIN"
},
"PLOT_DRAW_TYPE": {
	"prefix": "plot_draw_type",
	"body": "PLOT_DRAW_TYPE"
},
"PLOT_SHOW_DATA": {
	"prefix": "plot_show_data",
	"body": "PLOT_SHOW_DATA"
},
"PLOT_SHIFT": {
	"prefix": "plot_shift",
	"body": "PLOT_SHIFT"
},
"PLOT_LINE_STYLE": {
	"prefix": "plot_line_style",
	"body": "PLOT_LINE_STYLE"
},
"PLOT_LINE_WIDTH": {
	"prefix": "plot_line_width",
	"body": "PLOT_LINE_WIDTH"
},
"PLOT_COLOR_INDEXES": {
	"prefix": "plot_color_indexes",
	"body": "PLOT_COLOR_INDEXES"
},
"PLOT_LINE_COLOR": {
	"prefix": "plot_line_color",
	"body": "PLOT_LINE_COLOR"
},

//########################

"ENUM_PLOT_PROPERTY_DOUBLE": {
	"prefix": "enum_plot_property_double",
	"body": "ENUM_PLOT_PROPERTY_DOUBLE"
},
"PLOT_EMPTY_VALUE": {
	"prefix": "plot_empty_value",
	"body": "PLOT_EMPTY_VALUE"
},

//########################

"ENUM_PLOT_PROPERTY_STRING": {
	"prefix": "enum_plot_property_string",
	"body": "ENUM_PLOT_PROPERTY_STRING"
},
"PLOT_LABEL": {
	"prefix": "plot_label",
	"body": "PLOT_LABEL"
},

//########################

"ENUM_LINE_STYLE": {
	"prefix": "enum_line_style",
	"body": "ENUM_LINE_STYLE"
},
"STYLE_SOLID": {
	"prefix": "style_solid",
	"body": "STYLE_SOLID"
},
"STYLE_DASH": {
	"prefix": "style_dash",
	"body": "STYLE_DASH"
},
"STYLE_DOT": {
	"prefix": "style_dot",
	"body": "STYLE_DOT"
},
"STYLE_DASHDOT": {
	"prefix": "style_dashdot",
	"body": "STYLE_DASHDOT"
},
"STYLE_DASHDOTDOT": {
	"prefix": "style_dashdotdot",
	"body": "STYLE_DASHDOTDOT"
},

//########################

"ENUM_INDEXBUFFER_TYPE": {
	"prefix": "enum_indexbuffer_type",
	"body": "ENUM_INDEXBUFFER_TYPE"
},
"INDICATOR_DATA": {
	"prefix": "indicator_data",
	"body": "INDICATOR_DATA"
},
"INDICATOR_COLOR_INDEX": {
	"prefix": "indicator_color_index",
	"body": "INDICATOR_COLOR_INDEX"
},
"INDICATOR_CALCULATIONS": {
	"prefix": "indicator_calculations",
	"body": "INDICATOR_CALCULATIONS"
},

//########################

"ENUM_CUSTOMIND_PROPERTY_INTEGER": {
	"prefix": "enum_customind_property_integer",
	"body": "ENUM_CUSTOMIND_PROPERTY_INTEGER"
},
"INDICATOR_DIGITS": {
	"prefix": "indicator_digits",
	"body": "INDICATOR_DIGITS"
},
"INDICATOR_HEIGHT": {
	"prefix": "indicator_height",
	"body": "INDICATOR_HEIGHT"
},
"INDICATOR_LEVELS": {
	"prefix": "indicator_levels",
	"body": "INDICATOR_LEVELS"
},
"INDICATOR_LEVELCOLOR": {
	"prefix": "indicator_levelcolor",
	"body": "INDICATOR_LEVELCOLOR"
},
"INDICATOR_LEVELSTYLE": {
	"prefix": "indicator_levelstyle",
	"body": "INDICATOR_LEVELSTYLE"
},
"INDICATOR_LEVELWIDTH": {
	"prefix": "indicator_levelwidth",
	"body": "INDICATOR_LEVELWIDTH"
},

//########################

"ENUM_CUSTOMIND_PROPERTY_DOUBLE": {
	"prefix": "enum_customind_property_double",
	"body": "ENUM_CUSTOMIND_PROPERTY_DOUBLE"
},
"INDICATOR_MINIMUM": {
	"prefix": "indicator_minimum",
	"body": "INDICATOR_MINIMUM"
},
"INDICATOR_MAXIMUM": {
	"prefix": "indicator_maximum",
	"body": "INDICATOR_MAXIMUM"
},
"INDICATOR_LEVELVALUE": {
	"prefix": "indicator_levelvalue",
	"body": "INDICATOR_LEVELVALUE"
},

//########################

"ENUM_CUSTOMIND_PROPERTY_STRING": {
	"prefix": "enum_customind_property_string",
	"body": "ENUM_CUSTOMIND_PROPERTY_STRING"
},
"INDICATOR_SHORTNAME": {
	"prefix": "indicator_shortname",
	"body": "INDICATOR_SHORTNAME"
},
"INDICATOR_LEVELTEXT": {
	"prefix": "indicator_leveltext",
	"body": "INDICATOR_LEVELTEXT"
},

//########################

"ENUM_INDICATOR": {
	"prefix": "enum_indicator",
	"body": "ENUM_INDICATOR"
},
"IND_AC": {
	"prefix": "ind_ac",
	"body": "IND_AC"
},
"IND_AD": {
	"prefix": "ind_ad",
	"body": "IND_AD"
},
"IND_ADX": {
	"prefix": "ind_adx",
	"body": "IND_ADX"
},
"IND_ADXW": {
	"prefix": "ind_adxw",
	"body": "IND_ADXW"
},
"IND_ALLIGATOR": {
	"prefix": "ind_alligator",
	"body": "IND_ALLIGATOR"
},
"IND_AMA": {
	"prefix": "ind_ama",
	"body": "IND_AMA"
},
"IND_AO": {
	"prefix": "ind_ao",
	"body": "IND_AO"
},
"IND_ATR": {
	"prefix": "ind_atr",
	"body": "IND_ATR"
},
"IND_BANDS": {
	"prefix": "ind_bands",
	"body": "IND_BANDS"
},
"IND_BEARS": {
	"prefix": "ind_bears",
	"body": "IND_BEARS"
},
"IND_BULLS": {
	"prefix": "ind_bulls",
	"body": "IND_BULLS"
},
"IND_BWMFI": {
	"prefix": "ind_bwmfi",
	"body": "IND_BWMFI"
},
"IND_CCI": {
	"prefix": "ind_cci",
	"body": "IND_CCI"
},
"IND_CHAIKIN": {
	"prefix": "ind_chaikin",
	"body": "IND_CHAIKIN"
},
"IND_CUSTOM": {
	"prefix": "ind_custom",
	"body": "IND_CUSTOM"
},
"IND_DEMA": {
	"prefix": "ind_dema",
	"body": "IND_DEMA"
},
"IND_DEMARKER": {
	"prefix": "ind_demarker",
	"body": "IND_DEMARKER"
},
"IND_ENVELOPES": {
	"prefix": "ind_envelopes",
	"body": "IND_ENVELOPES"
},
"IND_FORCE": {
	"prefix": "ind_force",
	"body": "IND_FORCE"
},
"IND_FRACTALS": {
	"prefix": "ind_fractals",
	"body": "IND_FRACTALS"
},
"IND_FRAMA": {
	"prefix": "ind_frama",
	"body": "IND_FRAMA"
},
"IND_GATOR": {
	"prefix": "ind_gator",
	"body": "IND_GATOR"
},
"IND_ICHIMOKU": {
	"prefix": "ind_ichimoku",
	"body": "IND_ICHIMOKU"
},
"IND_MA": {
	"prefix": "ind_ma",
	"body": "IND_MA"
},
"IND_MACD": {
	"prefix": "ind_macd",
	"body": "IND_MACD"
},
"IND_MFI": {
	"prefix": "ind_mfi",
	"body": "IND_MFI"
},
"IND_MOMENTUM": {
	"prefix": "ind_momentum",
	"body": "IND_MOMENTUM"
},
"IND_OBV": {
	"prefix": "ind_obv",
	"body": "IND_OBV"
},
"IND_OSMA": {
	"prefix": "ind_osma",
	"body": "IND_OSMA"
},
"IND_RSI": {
	"prefix": "ind_rsi",
	"body": "IND_RSI"
},
"IND_RVI": {
	"prefix": "ind_rvi",
	"body": "IND_RVI"
},
"IND_SAR": {
	"prefix": "ind_sar",
	"body": "IND_SAR"
},
"IND_STDDEV": {
	"prefix": "ind_stddev",
	"body": "IND_STDDEV"
},
"IND_STOCHASTIC": {
	"prefix": "ind_stochastic",
	"body": "IND_STOCHASTIC"
},
"IND_TEMA": {
	"prefix": "ind_tema",
	"body": "IND_TEMA"
},
"IND_TRIX": {
	"prefix": "ind_trix",
	"body": "IND_TRIX"
},
"IND_VIDYA": {
	"prefix": "ind_vidya",
	"body": "IND_VIDYA"
},
"IND_VOLUMES": {
	"prefix": "ind_volumes",
	"body": "IND_VOLUMES"
},
"IND_WPR": {
	"prefix": "ind_wpr",
	"body": "IND_WPR"
},

//########################

"ENUM_DATATYPE": {
	"prefix": "enum_datatype",
	"body": "ENUM_DATATYPE"
},
"TYPE_BOOL": {
	"prefix": "type_bool",
	"body": "TYPE_BOOL"
},
"TYPE_CHAR": {
	"prefix": "type_char",
	"body": "TYPE_CHAR"
},
"TYPE_UCHAR": {
	"prefix": "type_uchar",
	"body": "TYPE_UCHAR"
},
"TYPE_SHORT": {
	"prefix": "type_short",
	"body": "TYPE_SHORT"
},
"TYPE_USHORT": {
	"prefix": "type_ushort",
	"body": "TYPE_USHORT"
},
"TYPE_COLOR": {
	"prefix": "type_color",
	"body": "TYPE_COLOR"
},
"TYPE_INT": {
	"prefix": "type_int",
	"body": "TYPE_INT"
},
"TYPE_UINT": {
	"prefix": "type_uint",
	"body": "TYPE_UINT"
},
"TYPE_DATETIME": {
	"prefix": "type_datetime",
	"body": "TYPE_DATETIME"
},
"TYPE_LONG": {
	"prefix": "type_long",
	"body": "TYPE_LONG"
},
"TYPE_ULONG": {
	"prefix": "type_ulong",
	"body": "TYPE_ULONG"
},
"TYPE_FLOAT": {
	"prefix": "type_float",
	"body": "TYPE_FLOAT"
},
"TYPE_DOUBLE": {
	"prefix": "type_double",
	"body": "TYPE_DOUBLE"
},
"TYPE_STRING": {
	"prefix": "type_string",
	"body": "TYPE_STRING"
},

//########################

"ENUM_TERMINAL_INFO_INTEGER": {
	"prefix": "enum_terminal_info_integer",
	"body": "ENUM_TERMINAL_INFO_INTEGER"
},
"TERMINAL_BUILD": {
	"prefix": "terminal_build",
	"body": "TERMINAL_BUILD"
},
"TERMINAL_COMMUNITY_ACCOUNT": {
	"prefix": "terminal_community_account",
	"body": "TERMINAL_COMMUNITY_ACCOUNT"
},
"TERMINAL_COMMUNITY_CONNECTION": {
	"prefix": "terminal_community_connection",
	"body": "TERMINAL_COMMUNITY_CONNECTION"
},
"TERMINAL_CONNECTED": {
	"prefix": "terminal_connected",
	"body": "TERMINAL_CONNECTED"
},
"TERMINAL_DLLS_ALLOWED": {
	"prefix": "terminal_dlls_allowed",
	"body": "TERMINAL_DLLS_ALLOWED"
},
"TERMINAL_TRADE_ALLOWED": {
	"prefix": "terminal_trade_allowed",
	"body": "TERMINAL_TRADE_ALLOWED"
},
"TERMINAL_EMAIL_ENABLED": {
	"prefix": "terminal_email_enabled",
	"body": "TERMINAL_EMAIL_ENABLED"
},
"TERMINAL_FTP_ENABLED": {
	"prefix": "terminal_ftp_enabled",
	"body": "TERMINAL_FTP_ENABLED"
},
"TERMINAL_NOTIFICATIONS_ENABLED": {
	"prefix": "terminal_notifications_enabled",
	"body": "TERMINAL_NOTIFICATIONS_ENABLED"
},
"TERMINAL_MAXBARS": {
	"prefix": "terminal_maxbars",
	"body": "TERMINAL_MAXBARS"
},
"TERMINAL_MQID": {
	"prefix": "terminal_mqid",
	"body": "TERMINAL_MQID"
},
"TERMINAL_CODEPAGE": {
	"prefix": "terminal_codepage",
	"body": "TERMINAL_CODEPAGE"
},
"TERMINAL_CPU_CORES": {
	"prefix": "terminal_cpu_cores",
	"body": "TERMINAL_CPU_CORES"
},
"TERMINAL_DISK_SPACE": {
	"prefix": "terminal_disk_space",
	"body": "TERMINAL_DISK_SPACE"
},
"TERMINAL_MEMORY_PHYSICAL": {
	"prefix": "terminal_memory_physical",
	"body": "TERMINAL_MEMORY_PHYSICAL"
},
"TERMINAL_MEMORY_TOTAL": {
	"prefix": "terminal_memory_total",
	"body": "TERMINAL_MEMORY_TOTAL"
},
"TERMINAL_MEMORY_AVAILABLE": {
	"prefix": "terminal_memory_available",
	"body": "TERMINAL_MEMORY_AVAILABLE"
},
"TERMINAL_MEMORY_USED": {
	"prefix": "terminal_memory_used",
	"body": "TERMINAL_MEMORY_USED"
},
"TERMINAL_X64": {
	"prefix": "terminal_x64",
	"body": "TERMINAL_X64"
},
"TERMINAL_OPENCL_SUPPORT": {
	"prefix": "terminal_opencl_support",
	"body": "TERMINAL_OPENCL_SUPPORT"
},
"TERMINAL_SCREEN_DPI": {
	"prefix": "terminal_screen_dpi",
	"body": "TERMINAL_SCREEN_DPI"
},
"TERMINAL_SCREEN_LEFT": {
	"prefix": "terminal_screen_left",
	"body": "TERMINAL_SCREEN_LEFT"
},
"TERMINAL_SCREEN_TOP": {
	"prefix": "terminal_screen_top",
	"body": "TERMINAL_SCREEN_TOP"
},
"TERMINAL_SCREEN_WIDTH": {
	"prefix": "terminal_screen_width",
	"body": "TERMINAL_SCREEN_WIDTH"
},
"TERMINAL_SCREEN_HEIGHT": {
	"prefix": "terminal_screen_height",
	"body": "TERMINAL_SCREEN_HEIGHT"
},
"TERMINAL_LEFT": {
	"prefix": "terminal_left",
	"body": "TERMINAL_LEFT"
},
"TERMINAL_TOP": {
	"prefix": "terminal_top",
	"body": "TERMINAL_TOP"
},
"TERMINAL_RIGHT": {
	"prefix": "terminal_right",
	"body": "TERMINAL_RIGHT"
},
"TERMINAL_BOTTOM": {
	"prefix": "terminal_bottom",
	"body": "TERMINAL_BOTTOM"
},
"TERMINAL_PING_LAST": {
	"prefix": "terminal_ping_last",
	"body": "TERMINAL_PING_LAST"
},
"TERMINAL_VPS": {
	"prefix": "terminal_vps",
	"body": "TERMINAL_VPS"
},
"TERMINAL_KEYSTATE_LEFT": {
	"prefix": "terminal_keystate_left",
	"body": "TERMINAL_KEYSTATE_LEFT"
},
"TERMINAL_KEYSTATE_UP": {
	"prefix": "terminal_keystate_up",
	"body": "TERMINAL_KEYSTATE_UP"
},
"TERMINAL_KEYSTATE_RIGHT": {
	"prefix": "terminal_keystate_right",
	"body": "TERMINAL_KEYSTATE_RIGHT"
},
"TERMINAL_KEYSTATE_DOWN": {
	"prefix": "terminal_keystate_down",
	"body": "TERMINAL_KEYSTATE_DOWN"
},
"TERMINAL_KEYSTATE_SHIFT": {
	"prefix": "terminal_keystate_shift",
	"body": "TERMINAL_KEYSTATE_SHIFT"
},
"TERMINAL_KEYSTATE_CONTROL": {
	"prefix": "terminal_keystate_control",
	"body": "TERMINAL_KEYSTATE_CONTROL"
},
"TERMINAL_KEYSTATE_MENU": {
	"prefix": "terminal_keystate_menu",
	"body": "TERMINAL_KEYSTATE_MENU"
},
"TERMINAL_KEYSTATE_CAPSLOCK": {
	"prefix": "terminal_keystate_capslock",
	"body": "TERMINAL_KEYSTATE_CAPSLOCK"
},
"TERMINAL_KEYSTATE_NUMLOCK": {
	"prefix": "terminal_keystate_numlock",
	"body": "TERMINAL_KEYSTATE_NUMLOCK"
},
"TERMINAL_KEYSTATE_SCRLOCK": {
	"prefix": "terminal_keystate_scrlock",
	"body": "TERMINAL_KEYSTATE_SCRLOCK"
},
"TERMINAL_KEYSTATE_ENTER": {
	"prefix": "terminal_keystate_enter",
	"body": "TERMINAL_KEYSTATE_ENTER"
},
"TERMINAL_KEYSTATE_INSERT": {
	"prefix": "terminal_keystate_insert",
	"body": "TERMINAL_KEYSTATE_INSERT"
},
"TERMINAL_KEYSTATE_DELETE": {
	"prefix": "terminal_keystate_delete",
	"body": "TERMINAL_KEYSTATE_DELETE"
},
"TERMINAL_KEYSTATE_HOME": {
	"prefix": "terminal_keystate_home",
	"body": "TERMINAL_KEYSTATE_HOME"
},
"TERMINAL_KEYSTATE_END": {
	"prefix": "terminal_keystate_end",
	"body": "TERMINAL_KEYSTATE_END"
},
"TERMINAL_KEYSTATE_TAB": {
	"prefix": "terminal_keystate_tab",
	"body": "TERMINAL_KEYSTATE_TAB"
},
"TERMINAL_KEYSTATE_PAGEUP": {
	"prefix": "terminal_keystate_pageup",
	"body": "TERMINAL_KEYSTATE_PAGEUP"
},
"TERMINAL_KEYSTATE_PAGEDOWN": {
	"prefix": "terminal_keystate_pagedown",
	"body": "TERMINAL_KEYSTATE_PAGEDOWN"
},
"TERMINAL_KEYSTATE_ESCAPE": {
	"prefix": "terminal_keystate_escape",
	"body": "TERMINAL_KEYSTATE_ESCAPE"
},

//########################

"ENUM_TERMINAL_INFO_DOUBLE": {
	"prefix": "enum_terminal_info_double",
	"body": "ENUM_TERMINAL_INFO_DOUBLE"
},
"TERMINAL_COMMUNITY_BALANCE": {
	"prefix": "terminal_community_balance",
	"body": "TERMINAL_COMMUNITY_BALANCE"
},
"TERMINAL_RETRANSMISSION": {
	"prefix": "terminal_retransmission",
	"body": "TERMINAL_RETRANSMISSION"
},
"ENUM_TERMINAL_INFO_STRING": {
	"prefix": "enum_terminal_info_string",
	"body": "ENUM_TERMINAL_INFO_STRING"
},
"TERMINAL_LANGUAGE": {
	"prefix": "terminal_language",
	"body": "TERMINAL_LANGUAGE"
},
"TERMINAL_COMPANY": {
	"prefix": "terminal_company",
	"body": "TERMINAL_COMPANY"
},
"TERMINAL_NAME": {
	"prefix": "terminal_name",
	"body": "TERMINAL_NAME"
},
"TERMINAL_PATH": {
	"prefix": "terminal_path",
	"body": "TERMINAL_PATH"
},
"TERMINAL_DATA_PATH": {
	"prefix": "terminal_data_path",
	"body": "TERMINAL_DATA_PATH"
},
"TERMINAL_COMMONDATA_PATH": {
	"prefix": "terminal_commondata_path",
	"body": "TERMINAL_COMMONDATA_PATH"
},

//########################

"ENUM_MQL_INFO_INTEGER": {
	"prefix": "enum_mql_info_integer",
	"body": "ENUM_MQL_INFO_INTEGER"
},
"MQL_HANDLES_USED": {
	"prefix": "mql_handles_used",
	"body": "MQL_HANDLES_USED"
},
"MQL_MEMORY_LIMIT": {
	"prefix": "mql_memory_limit",
	"body": "MQL_MEMORY_LIMIT"
},
"MQL_MEMORY_USED": {
	"prefix": "mql_memory_used",
	"body": "MQL_MEMORY_USED"
},
"MQL_PROGRAM_TYPE": {
	"prefix": "mql_program_type",
	"body": "MQL_PROGRAM_TYPE"
},
"MQL_DLLS_ALLOWED": {
	"prefix": "mql_dlls_allowed",
	"body": "MQL_DLLS_ALLOWED"
},
"MQL_TRADE_ALLOWED": {
	"prefix": "mql_trade_allowed",
	"body": "MQL_TRADE_ALLOWED"
},
"MQL_SIGNALS_ALLOWED": {
	"prefix": "mql_signals_allowed",
	"body": "MQL_SIGNALS_ALLOWED"
},
"MQL_DEBUG": {
	"prefix": "mql_debug",
	"body": "MQL_DEBUG"
},
"MQL_PROFILER": {
	"prefix": "mql_profiler",
	"body": "MQL_PROFILER"
},
"MQL_TESTER": {
	"prefix": "mql_tester",
	"body": "MQL_TESTER"
},
"MQL_FORWARD": {
	"prefix": "mql_forward",
	"body": "MQL_FORWARD"
},
"MQL_OPTIMIZATION": {
	"prefix": "mql_optimization",
	"body": "MQL_OPTIMIZATION"
},
"MQL_VISUAL_MODE": {
	"prefix": "mql_visual_mode",
	"body": "MQL_VISUAL_MODE"
},
"MQL_FRAME_MODE": {
	"prefix": "mql_frame_mode",
	"body": "MQL_FRAME_MODE"
},
"MQL_LICENSE_TYPE": {
	"prefix": "mql_license_type",
	"body": "MQL_LICENSE_TYPE"
},

//########################

"ENUM_MQL_INFO_STRING": {
	"prefix": "enum_mql_info_string",
	"body": "ENUM_MQL_INFO_STRING"
},
"MQL_PROGRAM_NAME": {
	"prefix": "mql_program_name",
	"body": "MQL_PROGRAM_NAME"
},
"MQL5_PROGRAM_PATH": {
	"prefix": "mql5_program_path",
	"body": "MQL5_PROGRAM_PATH"
},

//########################

"ENUM_PROGRAM_TYPE": {
	"prefix": "enum_program_type",
	"body": "ENUM_PROGRAM_TYPE"
},
"PROGRAM_SCRIPT": {
	"prefix": "program_script",
	"body": "PROGRAM_SCRIPT"
},
"PROGRAM_EXPERT": {
	"prefix": "program_expert",
	"body": "PROGRAM_EXPERT"
},
"PROGRAM_INDICATOR": {
	"prefix": "program_indicator",
	"body": "PROGRAM_INDICATOR"
},

//########################

"ENUM_LICENSE_TYPE": {
	"prefix": "enum_license_type",
	"body": "ENUM_LICENSE_TYPE"
},
"LICENSE_FREE": {
	"prefix": "license_free",
	"body": "LICENSE_FREE"
},
"LICENSE_DEMO": {
	"prefix": "license_demo",
	"body": "LICENSE_DEMO"
},
"LICENSE_TIME": {
	"prefix": "license_time",
	"body": "LICENSE_TIME"
},

//########################


//## Symbol Properties
"ENUM_SYMBOL_INFO_INTEGER": {
	"prefix": "enum_symbol_info_integer",
	"body": "ENUM_SYMBOL_INFO_INTEGER"
},
"SYMBOL_SUBSCRIPTION_DELAY": {
	"prefix": "symbol_subscription_delay",
	"body": "SYMBOL_SUBSCRIPTION_DELAY"
},
"SYMBOL_SECTOR": {
	"prefix": "symbol_sector",
	"body": "SYMBOL_SECTOR"
},
"SYMBOL_INDUSTRY": {
	"prefix": "symbol_industry",
	"body": "SYMBOL_INDUSTRY"
},
"SYMBOL_CUSTOM": {
	"prefix": "symbol_custom",
	"body": "SYMBOL_CUSTOM"
},
"SYMBOL_BACKGROUND_COLOR": {
	"prefix": "symbol_background_color",
	"body": "SYMBOL_BACKGROUND_COLOR"
},
"SYMBOL_CHART_MODE": {
	"prefix": "symbol_chart_mode",
	"body": "SYMBOL_CHART_MODE"
},
"SYMBOL_SELECT": {
	"prefix": "symbol_select",
	"body": "SYMBOL_SELECT"
},
"SYMBOL_VISIBLE": {
	"prefix": "symbol_visible",
	"body": "SYMBOL_VISIBLE"
},
"SYMBOL_SESSION_DEALS": {
	"prefix": "symbol_session_deals",
	"body": "SYMBOL_SESSION_DEALS"
},
"SYMBOL_SESSION_BUY_ORDERS": {
	"prefix": "symbol_session_buy_orders",
	"body": "SYMBOL_SESSION_BUY_ORDERS"
},
"SYMBOL_SESSION_SELL_ORDERS": {
	"prefix": "symbol_session_sell_orders",
	"body": "SYMBOL_SESSION_SELL_ORDERS"
},
"SYMBOL_VOLUME": {
	"prefix": "symbol_volume",
	"body": "SYMBOL_VOLUME"
},
"SYMBOL_VOLUMEHIGH": {
	"prefix": "symbol_volumehigh",
	"body": "SYMBOL_VOLUMEHIGH"
},
"SYMBOL_VOLUMELOW": {
	"prefix": "symbol_volumelow",
	"body": "SYMBOL_VOLUMELOW"
},
"SYMBOL_TIME": {
	"prefix": "symbol_time",
	"body": "SYMBOL_TIME"
},
"SYMBOL_TIME_MSC": {
	"prefix": "symbol_time_msc",
	"body": "SYMBOL_TIME_MSC"
},
"SYMBOL_DIGITS": {
	"prefix": "symbol_digits",
	"body": "SYMBOL_DIGITS"
},
"SYMBOL_SPREAD_FLOAT": {
	"prefix": "symbol_spread_float",
	"body": "SYMBOL_SPREAD_FLOAT"
},
"SYMBOL_SPREAD": {
	"prefix": "symbol_spread",
	"body": "SYMBOL_SPREAD"
},
"SYMBOL_TICKS_BOOKDEPTH": {
	"prefix": "symbol_ticks_bookdepth",
	"body": "SYMBOL_TICKS_BOOKDEPTH"
},
"SYMBOL_TRADE_CALC_MODE": {
	"prefix": "symbol_trade_calc_mode",
	"body": "SYMBOL_TRADE_CALC_MODE"
},
"SYMBOL_TRADE_MODE": {
	"prefix": "symbol_trade_mode",
	"body": "SYMBOL_TRADE_MODE"
},
"SYMBOL_START_TIME": {
	"prefix": "symbol_start_time",
	"body": "SYMBOL_START_TIME"
},
"SYMBOL_EXPIRATION_TIME": {
	"prefix": "symbol_expiration_time",
	"body": "SYMBOL_EXPIRATION_TIME"
},
"SYMBOL_TRADE_STOPS_LEVEL": {
	"prefix": "symbol_trade_stops_level",
	"body": "SYMBOL_TRADE_STOPS_LEVEL"
},
"SYMBOL_TRADE_FREEZE_LEVEL": {
	"prefix": "symbol_trade_freeze_level",
	"body": "SYMBOL_TRADE_FREEZE_LEVEL"
},
"SYMBOL_TRADE_EXEMODE": {
	"prefix": "symbol_trade_exemode",
	"body": "SYMBOL_TRADE_EXEMODE"
},
"SYMBOL_SWAP_MODE": {
	"prefix": "symbol_swap_mode",
	"body": "SYMBOL_SWAP_MODE"
},
"SYMBOL_SWAP_ROLLOVER3DAYS": {
	"prefix": "symbol_swap_rollover3days",
	"body": "SYMBOL_SWAP_ROLLOVER3DAYS"
},
"SYMBOL_MARGIN_HEDGED_USE_LEG": {
	"prefix": "symbol_margin_hedged_use_leg",
	"body": "SYMBOL_MARGIN_HEDGED_USE_LEG"
},
"SYMBOL_EXPIRATION_MODE": {
	"prefix": "symbol_expiration_mode",
	"body": "SYMBOL_EXPIRATION_MODE"
},
"SYMBOL_FILLING_MODE": {
	"prefix": "symbol_filling_mode",
	"body": "SYMBOL_FILLING_MODE"
},
"SYMBOL_ORDER_MODE": {
	"prefix": "symbol_order_mode",
	"body": "SYMBOL_ORDER_MODE"
},
"SYMBOL_ORDER_GTC_MODE": {
	"prefix": "symbol_order_gtc_mode",
	"body": "SYMBOL_ORDER_GTC_MODE"
},
"SYMBOL_OPTION_MODE": {
	"prefix": "symbol_option_mode",
	"body": "SYMBOL_OPTION_MODE"
},
"SYMBOL_OPTION_RIGHT": {
	"prefix": "symbol_option_right",
	"body": "SYMBOL_OPTION_RIGHT"
},

//########################

"ENUM_SYMBOL_INFO_DOUBLE": {
	"prefix": "enum_symbol_info_double",
	"body": "ENUM_SYMBOL_INFO_DOUBLE"
},
"SYMBOL_BID": {
	"prefix": "symbol_bid",
	"body": "SYMBOL_BID"
},
"SYMBOL_BIDHIGH": {
	"prefix": "symbol_bidhigh",
	"body": "SYMBOL_BIDHIGH"
},
"SYMBOL_BIDLOW": {
	"prefix": "symbol_bidlow",
	"body": "SYMBOL_BIDLOW"
},
"SYMBOL_ASK": {
	"prefix": "symbol_ask",
	"body": "SYMBOL_ASK"
},
"SYMBOL_ASKHIGH": {
	"prefix": "symbol_askhigh",
	"body": "SYMBOL_ASKHIGH"
},
"SYMBOL_ASKLOW": {
	"prefix": "symbol_asklow",
	"body": "SYMBOL_ASKLOW"
},
"SYMBOL_LAST": {
	"prefix": "symbol_last",
	"body": "SYMBOL_LAST"
},
"SYMBOL_LASTHIGH": {
	"prefix": "symbol_lasthigh",
	"body": "SYMBOL_LASTHIGH"
},
"SYMBOL_LASTLOW": {
	"prefix": "symbol_lastlow",
	"body": "SYMBOL_LASTLOW"
},
"SYMBOL_VOLUME_REAL": {
	"prefix": "symbol_volume_real",
	"body": "SYMBOL_VOLUME_REAL"
},
"SYMBOL_VOLUMEHIGH_REAL": {
	"prefix": "symbol_volumehigh_real",
	"body": "SYMBOL_VOLUMEHIGH_REAL"
},
"SYMBOL_VOLUMELOW_REAL": {
	"prefix": "symbol_volumelow_real",
	"body": "SYMBOL_VOLUMELOW_REAL"
},
"SYMBOL_OPTION_STRIKE": {
	"prefix": "symbol_option_strike",
	"body": "SYMBOL_OPTION_STRIKE"
},
"SYMBOL_POINT": {
	"prefix": "symbol_point",
	"body": "SYMBOL_POINT"
},
"SYMBOL_TRADE_TICK_VALUE": {
	"prefix": "symbol_trade_tick_value",
	"body": "SYMBOL_TRADE_TICK_VALUE"
},
"SYMBOL_TRADE_TICK_VALUE_PROFIT": {
	"prefix": "symbol_trade_tick_value_profit",
	"body": "SYMBOL_TRADE_TICK_VALUE_PROFIT"
},
"SYMBOL_TRADE_TICK_VALUE_LOSS": {
	"prefix": "symbol_trade_tick_value_loss",
	"body": "SYMBOL_TRADE_TICK_VALUE_LOSS"
},
"SYMBOL_TRADE_TICK_SIZE": {
	"prefix": "symbol_trade_tick_size",
	"body": "SYMBOL_TRADE_TICK_SIZE"
},
"SYMBOL_TRADE_CONTRACT_SIZE": {
	"prefix": "symbol_trade_contract_size",
	"body": "SYMBOL_TRADE_CONTRACT_SIZE"
},
"SYMBOL_TRADE_ACCRUED_INTEREST": {
	"prefix": "symbol_trade_accrued_interest",
	"body": "SYMBOL_TRADE_ACCRUED_INTEREST"
},
"SYMBOL_TRADE_FACE_VALUE": {
	"prefix": "symbol_trade_face_value",
	"body": "SYMBOL_TRADE_FACE_VALUE"
},
"SYMBOL_TRADE_LIQUIDITY_RATE": {
	"prefix": "symbol_trade_liquidity_rate",
	"body": "SYMBOL_TRADE_LIQUIDITY_RATE"
},
"SYMBOL_VOLUME_MIN": {
	"prefix": "symbol_volume_min",
	"body": "SYMBOL_VOLUME_MIN"
},
"SYMBOL_VOLUME_MAX": {
	"prefix": "symbol_volume_max",
	"body": "SYMBOL_VOLUME_MAX"
},
"SYMBOL_VOLUME_STEP": {
	"prefix": "symbol_volume_step",
	"body": "SYMBOL_VOLUME_STEP"
},
"SYMBOL_VOLUME_LIMIT": {
	"prefix": "symbol_volume_limit",
	"body": "SYMBOL_VOLUME_LIMIT"
},
"SYMBOL_SWAP_LONG": {
	"prefix": "symbol_swap_long",
	"body": "SYMBOL_SWAP_LONG"
},
"SYMBOL_SWAP_SHORT": {
	"prefix": "symbol_swap_short",
	"body": "SYMBOL_SWAP_SHORT"
},
"SYMBOL_MARGIN_INITIAL": {
	"prefix": "symbol_margin_initial",
	"body": "SYMBOL_MARGIN_INITIAL"
},
"SYMBOL_MARGIN_MAINTENANCE": {
	"prefix": "symbol_margin_maintenance",
	"body": "SYMBOL_MARGIN_MAINTENANCE"
},
"SYMBOL_SESSION_VOLUME": {
	"prefix": "symbol_session_volume",
	"body": "SYMBOL_SESSION_VOLUME"
},
"SYMBOL_SESSION_TURNOVER": {
	"prefix": "symbol_session_turnover",
	"body": "SYMBOL_SESSION_TURNOVER"
},
"SYMBOL_SESSION_INTEREST": {
	"prefix": "symbol_session_interest",
	"body": "SYMBOL_SESSION_INTEREST"
},
"SYMBOL_SESSION_BUY_ORDERS_VOLUME": {
	"prefix": "symbol_session_buy_orders_volume",
	"body": "SYMBOL_SESSION_BUY_ORDERS_VOLUME"
},
"SYMBOL_SESSION_SELL_ORDERS_VOLUME": {
	"prefix": "symbol_session_sell_orders_volume",
	"body": "SYMBOL_SESSION_SELL_ORDERS_VOLUME"
},
"SYMBOL_SESSION_OPEN": {
	"prefix": "symbol_session_open",
	"body": "SYMBOL_SESSION_OPEN"
},
"SYMBOL_SESSION_CLOSE": {
	"prefix": "symbol_session_close",
	"body": "SYMBOL_SESSION_CLOSE"
},
"SYMBOL_SESSION_AW": {
	"prefix": "symbol_session_aw",
	"body": "SYMBOL_SESSION_AW"
},
"SYMBOL_SESSION_PRICE_SETTLEMENT": {
	"prefix": "symbol_session_price_settlement",
	"body": "SYMBOL_SESSION_PRICE_SETTLEMENT"
},
"SYMBOL_SESSION_PRICE_LIMIT_MIN": {
	"prefix": "symbol_session_price_limit_min",
	"body": "SYMBOL_SESSION_PRICE_LIMIT_MIN"
},
"SYMBOL_SESSION_PRICE_LIMIT_MAX": {
	"prefix": "symbol_session_price_limit_max",
	"body": "SYMBOL_SESSION_PRICE_LIMIT_MAX"
},
"SYMBOL_MARGIN_HEDGED": {
	"prefix": "symbol_margin_hedged",
	"body": "SYMBOL_MARGIN_HEDGED"
},
"SYMBOL_PRICE_CHANGE": {
	"prefix": "symbol_price_change",
	"body": "SYMBOL_PRICE_CHANGE"
},
"SYMBOL_PRICE_VOLATILITY": {
	"prefix": "symbol_price_volatility",
	"body": "SYMBOL_PRICE_VOLATILITY"
},
"SYMBOL_PRICE_THEORETICAL": {
	"prefix": "symbol_price_theoretical",
	"body": "SYMBOL_PRICE_THEORETICAL"
},
"SYMBOL_PRICE_DELTA": {
	"prefix": "symbol_price_delta",
	"body": "SYMBOL_PRICE_DELTA"
},
"SYMBOL_PRICE_THETA": {
	"prefix": "symbol_price_theta",
	"body": "SYMBOL_PRICE_THETA"
},
"SYMBOL_PRICE_GAMMA": {
	"prefix": "symbol_price_gamma",
	"body": "SYMBOL_PRICE_GAMMA"
},
"SYMBOL_PRICE_VEGA": {
	"prefix": "symbol_price_vega",
	"body": "SYMBOL_PRICE_VEGA"
},
"SYMBOL_PRICE_RHO": {
	"prefix": "symbol_price_rho",
	"body": "SYMBOL_PRICE_RHO"
},
"SYMBOL_PRICE_OMEGA": {
	"prefix": "symbol_price_omega",
	"body": "SYMBOL_PRICE_OMEGA"
},
"SYMBOL_PRICE_SENSITIVITY": {
	"prefix": "symbol_price_sensitivity",
	"body": "SYMBOL_PRICE_SENSITIVITY"
},

//########################

"ENUM_SYMBOL_INFO_STRING": {
	"prefix": "enum_symbol_info_string",
	"body": "ENUM_SYMBOL_INFO_STRING"
},
"SYMBOL_BASIS": {
	"prefix": "symbol_basis",
	"body": "SYMBOL_BASIS"
},
"SYMBOL_CATEGORY": {
	"prefix": "symbol_category",
	"body": "SYMBOL_CATEGORY"
},
"SYMBOL_COUNTRY": {
	"prefix": "symbol_country",
	"body": "SYMBOL_COUNTRY"
},
"SYMBOL_SECTOR_NAME": {
	"prefix": "symbol_sector_name",
	"body": "SYMBOL_SECTOR_NAME"
},
"SYMBOL_INDUSTRY_NAME": {
	"prefix": "symbol_industry_name",
	"body": "SYMBOL_INDUSTRY_NAME"
},
"SYMBOL_CURRENCY_BASE": {
	"prefix": "symbol_currency_base",
	"body": "SYMBOL_CURRENCY_BASE"
},
"SYMBOL_CURRENCY_PROFIT": {
	"prefix": "symbol_currency_profit",
	"body": "SYMBOL_CURRENCY_PROFIT"
},
"SYMBOL_CURRENCY_MARGIN": {
	"prefix": "symbol_currency_margin",
	"body": "SYMBOL_CURRENCY_MARGIN"
},
"SYMBOL_BANK": {
	"prefix": "symbol_bank",
	"body": "SYMBOL_BANK"
},
"SYMBOL_DESCRIPTION": {
	"prefix": "symbol_description",
	"body": "SYMBOL_DESCRIPTION"
},
"SYMBOL_EXCHANGE": {
	"prefix": "symbol_exchange",
	"body": "SYMBOL_EXCHANGE"
},
"SYMBOL_FORMULA": {
	"prefix": "symbol_formula",
	"body": "SYMBOL_FORMULA"
},
"SYMBOL_ISIN": {
	"prefix": "symbol_isin",
	"body": "SYMBOL_ISIN"
},
"SYMBOL_PAGE": {
	"prefix": "symbol_page",
	"body": "SYMBOL_PAGE"
},
"SYMBOL_PATH": {
	"prefix": "symbol_path",
	"body": "SYMBOL_PATH"
},

//########################

"ENUM_SYMBOL_CHART_MODE": {
	"prefix": "enum_symbol_chart_mode",
	"body": "ENUM_SYMBOL_CHART_MODE"
},
"SYMBOL_CHART_MODE_BID": {
	"prefix": "symbol_chart_mode_bid",
	"body": "SYMBOL_CHART_MODE_BID"
},
"SYMBOL_CHART_MODE_LAST": {
	"prefix": "symbol_chart_mode_last",
	"body": "SYMBOL_CHART_MODE_LAST"
},

//########################

"ENUM_SYMBOL_ORDER_GTC_MODE": {
	"prefix": "enum_symbol_order_gtc_mode",
	"body": "ENUM_SYMBOL_ORDER_GTC_MODE"
},
"SYMBOL_ORDERS_GTC": {
	"prefix": "symbol_orders_gtc",
	"body": "SYMBOL_ORDERS_GTC"
},
"SYMBOL_ORDERS_DAILY": {
	"prefix": "symbol_orders_daily",
	"body": "SYMBOL_ORDERS_DAILY"
},
"SYMBOL_ORDERS_DAILY_EXCLUDING_STOPS": {
	"prefix": "symbol_orders_daily_excluding_stops",
	"body": "SYMBOL_ORDERS_DAILY_EXCLUDING_STOPS"
},

//########################

"ENUM_SYMBOL_CALC_MODE": {
	"prefix": "enum_symbol_calc_mode",
	"body": "ENUM_SYMBOL_CALC_MODE"
},
"SYMBOL_CALC_MODE_FOREX": {
	"prefix": "symbol_calc_mode_forex",
	"body": "SYMBOL_CALC_MODE_FOREX"
},
"SYMBOL_CALC_MODE_FOREX_NO_LEVERAGE": {
	"prefix": "symbol_calc_mode_forex_no_leverage",
	"body": "SYMBOL_CALC_MODE_FOREX_NO_LEVERAGE"
},
"SYMBOL_CALC_MODE_FUTURES": {
	"prefix": "symbol_calc_mode_futures",
	"body": "SYMBOL_CALC_MODE_FUTURES"
},
"SYMBOL_CALC_MODE_CFD": {
	"prefix": "symbol_calc_mode_cfd",
	"body": "SYMBOL_CALC_MODE_CFD"
},
"SYMBOL_CALC_MODE_CFDINDEX": {
	"prefix": "symbol_calc_mode_cfdindex",
	"body": "SYMBOL_CALC_MODE_CFDINDEX"
},
"SYMBOL_CALC_MODE_CFDLEVERAGE": {
	"prefix": "symbol_calc_mode_cfdleverage",
	"body": "SYMBOL_CALC_MODE_CFDLEVERAGE"
},
"SYMBOL_CALC_MODE_EXCH_STOCKS": {
	"prefix": "symbol_calc_mode_exch_stocks",
	"body": "SYMBOL_CALC_MODE_EXCH_STOCKS"
},
"SYMBOL_CALC_MODE_EXCH_FUTURES": {
	"prefix": "symbol_calc_mode_exch_futures",
	"body": "SYMBOL_CALC_MODE_EXCH_FUTURES"
},
"SYMBOL_CALC_MODE_EXCH_FUTURES_FORTS": {
	"prefix": "symbol_calc_mode_exch_futures_forts",
	"body": "SYMBOL_CALC_MODE_EXCH_FUTURES_FORTS"
},
"SYMBOL_CALC_MODE_EXCH_BONDS": {
	"prefix": "symbol_calc_mode_exch_bonds",
	"body": "SYMBOL_CALC_MODE_EXCH_BONDS"
},
"SYMBOL_CALC_MODE_EXCH_STOCKS_MOEX": {
	"prefix": "symbol_calc_mode_exch_stocks_moex",
	"body": "SYMBOL_CALC_MODE_EXCH_STOCKS_MOEX"
},
"SYMBOL_CALC_MODE_EXCH_BONDS_MOEX": {
	"prefix": "symbol_calc_mode_exch_bonds_moex",
	"body": "SYMBOL_CALC_MODE_EXCH_BONDS_MOEX"
},
"SYMBOL_CALC_MODE_SERV_COLLATERAL": {
	"prefix": "symbol_calc_mode_serv_collateral",
	"body": "SYMBOL_CALC_MODE_SERV_COLLATERAL"
},

//########################

"ENUM_SYMBOL_TRADE_MODE": {
	"prefix": "enum_symbol_trade_mode",
	"body": "ENUM_SYMBOL_TRADE_MODE"
},
"SYMBOL_TRADE_MODE_DISABLED": {
	"prefix": "symbol_trade_mode_disabled",
	"body": "SYMBOL_TRADE_MODE_DISABLED"
},
"SYMBOL_TRADE_MODE_LONGONLY": {
	"prefix": "symbol_trade_mode_longonly",
	"body": "SYMBOL_TRADE_MODE_LONGONLY"
},
"SYMBOL_TRADE_MODE_SHORTONLY": {
	"prefix": "symbol_trade_mode_shortonly",
	"body": "SYMBOL_TRADE_MODE_SHORTONLY"
},
"SYMBOL_TRADE_MODE_CLOSEONLY": {
	"prefix": "symbol_trade_mode_closeonly",
	"body": "SYMBOL_TRADE_MODE_CLOSEONLY"
},
"SYMBOL_TRADE_MODE_FULL": {
	"prefix": "symbol_trade_mode_full",
	"body": "SYMBOL_TRADE_MODE_FULL"
},

//########################

"ENUM_SYMBOL_TRADE_EXECUTION": {
	"prefix": "enum_symbol_trade_execution",
	"body": "ENUM_SYMBOL_TRADE_EXECUTION"
},
"SYMBOL_TRADE_EXECUTION_REQUEST": {
	"prefix": "symbol_trade_execution_request",
	"body": "SYMBOL_TRADE_EXECUTION_REQUEST"
},
"SYMBOL_TRADE_EXECUTION_INSTANT": {
	"prefix": "symbol_trade_execution_instant",
	"body": "SYMBOL_TRADE_EXECUTION_INSTANT"
},
"SYMBOL_TRADE_EXECUTION_MARKET": {
	"prefix": "symbol_trade_execution_market",
	"body": "SYMBOL_TRADE_EXECUTION_MARKET"
},
"SYMBOL_TRADE_EXECUTION_EXCHANGE": {
	"prefix": "symbol_trade_execution_exchange",
	"body": "SYMBOL_TRADE_EXECUTION_EXCHANGE"
},

//########################

"ENUM_SYMBOL_SWAP_MODE": {
	"prefix": "enum_symbol_swap_mode",
	"body": "ENUM_SYMBOL_SWAP_MODE"
},
"SYMBOL_SWAP_MODE_DISABLED": {
	"prefix": "symbol_swap_mode_disabled",
	"body": "SYMBOL_SWAP_MODE_DISABLED"
},
"SYMBOL_SWAP_MODE_POINTS": {
	"prefix": "symbol_swap_mode_points",
	"body": "SYMBOL_SWAP_MODE_POINTS"
},
"SYMBOL_SWAP_MODE_CURRENCY_SYMBOL": {
	"prefix": "symbol_swap_mode_currency_symbol",
	"body": "SYMBOL_SWAP_MODE_CURRENCY_SYMBOL"
},
"SYMBOL_SWAP_MODE_CURRENCY_MARGIN": {
	"prefix": "symbol_swap_mode_currency_margin",
	"body": "SYMBOL_SWAP_MODE_CURRENCY_MARGIN"
},
"SYMBOL_SWAP_MODE_CURRENCY_DEPOSIT": {
	"prefix": "symbol_swap_mode_currency_deposit",
	"body": "SYMBOL_SWAP_MODE_CURRENCY_DEPOSIT"
},
"SYMBOL_SWAP_MODE_INTEREST_CURRENT": {
	"prefix": "symbol_swap_mode_interest_current",
	"body": "SYMBOL_SWAP_MODE_INTEREST_CURRENT"
},
"SYMBOL_SWAP_MODE_INTEREST_OPEN": {
	"prefix": "symbol_swap_mode_interest_open",
	"body": "SYMBOL_SWAP_MODE_INTEREST_OPEN"
},
"SYMBOL_SWAP_MODE_REOPEN_CURRENT": {
	"prefix": "symbol_swap_mode_reopen_current",
	"body": "SYMBOL_SWAP_MODE_REOPEN_CURRENT"
},
"SYMBOL_SWAP_MODE_REOPEN_BID": {
	"prefix": "symbol_swap_mode_reopen_bid",
	"body": "SYMBOL_SWAP_MODE_REOPEN_BID"
},

//########################

"ENUM_DAY_OF_WEEK": {
	"prefix": "enum_day_of_week",
	"body": "ENUM_DAY_OF_WEEK"
},
"SUNDAY": {
	"prefix": "sunday",
	"body": "SUNDAY"
},
"MONDAY": {
	"prefix": "monday",
	"body": "MONDAY"
},
"TUESDAY": {
	"prefix": "tuesday",
	"body": "TUESDAY"
},
"WEDNESDAY": {
	"prefix": "wednesday",
	"body": "WEDNESDAY"
},
"THURSDAY": {
	"prefix": "thursday",
	"body": "THURSDAY"
},
"FRIDAY": {
	"prefix": "friday",
	"body": "FRIDAY"
},
"SATURDAY": {
	"prefix": "saturday",
	"body": "SATURDAY"
},

//########################

"ENUM_SYMBOL_OPTION_RIGHT": {
	"prefix": "enum_symbol_option_right",
	"body": "ENUM_SYMBOL_OPTION_RIGHT"
},
"SYMBOL_OPTION_RIGHT_CALL": {
	"prefix": "symbol_option_right_call",
	"body": "SYMBOL_OPTION_RIGHT_CALL"
},
"SYMBOL_OPTION_RIGHT_PUT": {
	"prefix": "symbol_option_right_put",
	"body": "SYMBOL_OPTION_RIGHT_PUT"
},

//########################

"ENUM_SYMBOL_OPTION_MODE": {
	"prefix": "enum_symbol_option_mode",
	"body": "ENUM_SYMBOL_OPTION_MODE"
},
"SYMBOL_OPTION_MODE_EUROPEAN": {
	"prefix": "symbol_option_mode_european",
	"body": "SYMBOL_OPTION_MODE_EUROPEAN"
},
"SYMBOL_OPTION_MODE_AMERICAN": {
	"prefix": "symbol_option_mode_american",
	"body": "SYMBOL_OPTION_MODE_AMERICAN"
},

//########################

"ENUM_SYMBOL_SECTOR": {
	"prefix": "enum_symbol_sector",
	"body": "ENUM_SYMBOL_SECTOR"
},
"SECTOR_UNDEFINED": {
	"prefix": "sector_undefined",
	"body": "SECTOR_UNDEFINED"
},
"SECTOR_BASIC_MATERIALS": {
	"prefix": "sector_basic_materials",
	"body": "SECTOR_BASIC_MATERIALS"
},
"SECTOR_COMMUNICATION_SERVICES": {
	"prefix": "sector_communication_services",
	"body": "SECTOR_COMMUNICATION_SERVICES"
},
"SECTOR_CONSUMER_CYCLICAL": {
	"prefix": "sector_consumer_cyclical",
	"body": "SECTOR_CONSUMER_CYCLICAL"
},
"SECTOR_CONSUMER_DEFENSIVE": {
	"prefix": "sector_consumer_defensive",
	"body": "SECTOR_CONSUMER_DEFENSIVE"
},
"SECTOR_CURRENCY": {
	"prefix": "sector_currency",
	"body": "SECTOR_CURRENCY"
},
"SECTOR_CURRENCY_CRYPTO": {
	"prefix": "sector_currency_crypto",
	"body": "SECTOR_CURRENCY_CRYPTO"
},
"SECTOR_ENERGY": {
	"prefix": "sector_energy",
	"body": "SECTOR_ENERGY"
},
"SECTOR_FINANCIAL": {
	"prefix": "sector_financial",
	"body": "SECTOR_FINANCIAL"
},
"SECTOR_HEALTHCARE": {
	"prefix": "sector_healthcare",
	"body": "SECTOR_HEALTHCARE"
},
"SECTOR_INDUSTRIALS": {
	"prefix": "sector_industrials",
	"body": "SECTOR_INDUSTRIALS"
},
"SECTOR_REAL_ESTATE": {
	"prefix": "sector_real_estate",
	"body": "SECTOR_REAL_ESTATE"
},
"SECTOR_TECHNOLOGY": {
	"prefix": "sector_technology",
	"body": "SECTOR_TECHNOLOGY"
},
"SECTOR_UTILITIES": {
	"prefix": "sector_utilities",
	"body": "SECTOR_UTILITIES"
},

//########################

"ENUM_SYMBOL_INDUSTRY": {
	"prefix": "enum_symbol_industry",
	"body": "ENUM_SYMBOL_INDUSTRY"
},
"INDUSTRY_UNDEFINED": {
	"prefix": "industry_undefined",
	"body": "INDUSTRY_UNDEFINED"
},
"INDUSTRY_AGRICULTURAL_INPUTS": {
	"prefix": "industry_agricultural_inputs",
	"body": "INDUSTRY_AGRICULTURAL_INPUTS"
},
"INDUSTRY_ALUMINIUM": {
	"prefix": "industry_aluminium",
	"body": "INDUSTRY_ALUMINIUM"
},
"INDUSTRY_BUILDING_MATERIALS": {
	"prefix": "industry_building_materials",
	"body": "INDUSTRY_BUILDING_MATERIALS"
},
"INDUSTRY_CHEMICALS": {
	"prefix": "industry_chemicals",
	"body": "INDUSTRY_CHEMICALS"
},
"INDUSTRY_COKING_COAL": {
	"prefix": "industry_coking_coal",
	"body": "INDUSTRY_COKING_COAL"
},
"INDUSTRY_COPPER": {
	"prefix": "industry_copper",
	"body": "INDUSTRY_COPPER"
},
"INDUSTRY_GOLD": {
	"prefix": "industry_gold",
	"body": "INDUSTRY_GOLD"
},
"INDUSTRY_LUMBER_WOOD": {
	"prefix": "industry_lumber_wood",
	"body": "INDUSTRY_LUMBER_WOOD"
},
"INDUSTRY_INDUSTRIAL_METALS": {
	"prefix": "industry_industrial_metals",
	"body": "INDUSTRY_INDUSTRIAL_METALS"
},
"INDUSTRY_PRECIOUS_METALS": {
	"prefix": "industry_precious_metals",
	"body": "INDUSTRY_PRECIOUS_METALS"
},
"INDUSTRY_PAPER": {
	"prefix": "industry_paper",
	"body": "INDUSTRY_PAPER"
},
"INDUSTRY_SILVER": {
	"prefix": "industry_silver",
	"body": "INDUSTRY_SILVER"
},
"INDUSTRY_SPECIALTY_CHEMICALS": {
	"prefix": "industry_specialty_chemicals",
	"body": "INDUSTRY_SPECIALTY_CHEMICALS"
},
"INDUSTRY_STEEL": {
	"prefix": "industry_steel",
	"body": "INDUSTRY_STEEL"
},
"INDUSTRY_ADVERTISING": {
	"prefix": "industry_advertising",
	"body": "INDUSTRY_ADVERTISING"
},
"INDUSTRY_BROADCASTING": {
	"prefix": "industry_broadcasting",
	"body": "INDUSTRY_BROADCASTING"
},
"INDUSTRY_GAMING_MULTIMEDIA": {
	"prefix": "industry_gaming_multimedia",
	"body": "INDUSTRY_GAMING_MULTIMEDIA"
},
"INDUSTRY_ENTERTAINMENT": {
	"prefix": "industry_entertainment",
	"body": "INDUSTRY_ENTERTAINMENT"
},
"INDUSTRY_INTERNET_CONTENT": {
	"prefix": "industry_internet_content",
	"body": "INDUSTRY_INTERNET_CONTENT"
},
"INDUSTRY_PUBLISHING": {
	"prefix": "industry_publishing",
	"body": "INDUSTRY_PUBLISHING"
},
"INDUSTRY_TELECOM": {
	"prefix": "industry_telecom",
	"body": "INDUSTRY_TELECOM"
},
"INDUSTRY_APPAREL_MANUFACTURING": {
	"prefix": "industry_apparel_manufacturing",
	"body": "INDUSTRY_APPAREL_MANUFACTURING"
},
"INDUSTRY_APPAREL_RETAIL": {
	"prefix": "industry_apparel_retail",
	"body": "INDUSTRY_APPAREL_RETAIL"
},
"INDUSTRY_AUTO_MANUFACTURERS": {
	"prefix": "industry_auto_manufacturers",
	"body": "INDUSTRY_AUTO_MANUFACTURERS"
},
"INDUSTRY_AUTO_PARTS": {
	"prefix": "industry_auto_parts",
	"body": "INDUSTRY_AUTO_PARTS"
},
"INDUSTRY_AUTO_DEALERSHIP": {
	"prefix": "industry_auto_dealership",
	"body": "INDUSTRY_AUTO_DEALERSHIP"
},
"INDUSTRY_DEPARTMENT_STORES": {
	"prefix": "industry_department_stores",
	"body": "INDUSTRY_DEPARTMENT_STORES"
},
"INDUSTRY_FOOTWEAR_ACCESSORIES": {
	"prefix": "industry_footwear_accessories",
	"body": "INDUSTRY_FOOTWEAR_ACCESSORIES"
},
"INDUSTRY_FURNISHINGS": {
	"prefix": "industry_furnishings",
	"body": "INDUSTRY_FURNISHINGS"
},
"INDUSTRY_GAMBLING": {
	"prefix": "industry_gambling",
	"body": "INDUSTRY_GAMBLING"
},
"INDUSTRY_HOME_IMPROV_RETAIL": {
	"prefix": "industry_home_improv_retail",
	"body": "INDUSTRY_HOME_IMPROV_RETAIL"
},
"INDUSTRY_INTERNET_RETAIL": {
	"prefix": "industry_internet_retail",
	"body": "INDUSTRY_INTERNET_RETAIL"
},
"INDUSTRY_LEISURE": {
	"prefix": "industry_leisure",
	"body": "INDUSTRY_LEISURE"
},
"INDUSTRY_LODGING": {
	"prefix": "industry_lodging",
	"body": "INDUSTRY_LODGING"
},
"INDUSTRY_LUXURY_GOODS": {
	"prefix": "industry_luxury_goods",
	"body": "INDUSTRY_LUXURY_GOODS"
},
"INDUSTRY_PACKAGING_CONTAINERS": {
	"prefix": "industry_packaging_containers",
	"body": "INDUSTRY_PACKAGING_CONTAINERS"
},
"INDUSTRY_PERSONAL_SERVICES": {
	"prefix": "industry_personal_services",
	"body": "INDUSTRY_PERSONAL_SERVICES"
},
"INDUSTRY_RECREATIONAL_VEHICLES": {
	"prefix": "industry_recreational_vehicles",
	"body": "INDUSTRY_RECREATIONAL_VEHICLES"
},
"INDUSTRY_RESIDENT_CONSTRUCTION": {
	"prefix": "industry_resident_construction",
	"body": "INDUSTRY_RESIDENT_CONSTRUCTION"
},
"INDUSTRY_RESORTS_CASINOS": {
	"prefix": "industry_resorts_casinos",
	"body": "INDUSTRY_RESORTS_CASINOS"
},
"INDUSTRY_RESTAURANTS": {
	"prefix": "industry_restaurants",
	"body": "INDUSTRY_RESTAURANTS"
},
"INDUSTRY_SPECIALTY_RETAIL": {
	"prefix": "industry_specialty_retail",
	"body": "INDUSTRY_SPECIALTY_RETAIL"
},
"INDUSTRY_TEXTILE_MANUFACTURING": {
	"prefix": "industry_textile_manufacturing",
	"body": "INDUSTRY_TEXTILE_MANUFACTURING"
},
"INDUSTRY_TRAVEL_SERVICES": {
	"prefix": "industry_travel_services",
	"body": "INDUSTRY_TRAVEL_SERVICES"
},
"INDUSTRY_BEVERAGES_BREWERS": {
	"prefix": "industry_beverages_brewers",
	"body": "INDUSTRY_BEVERAGES_BREWERS"
},
"INDUSTRY_BEVERAGES_NON_ALCO": {
	"prefix": "industry_beverages_non_alco",
	"body": "INDUSTRY_BEVERAGES_NON_ALCO"
},
"INDUSTRY_BEVERAGES_WINERIES": {
	"prefix": "industry_beverages_wineries",
	"body": "INDUSTRY_BEVERAGES_WINERIES"
},
"INDUSTRY_CONFECTIONERS": {
	"prefix": "industry_confectioners",
	"body": "INDUSTRY_CONFECTIONERS"
},
"INDUSTRY_DISCOUNT_STORES": {
	"prefix": "industry_discount_stores",
	"body": "INDUSTRY_DISCOUNT_STORES"
},
"INDUSTRY_EDUCATION_TRAINIG": {
	"prefix": "industry_education_trainig",
	"body": "INDUSTRY_EDUCATION_TRAINIG"
},
"INDUSTRY_FARM_PRODUCTS": {
	"prefix": "industry_farm_products",
	"body": "INDUSTRY_FARM_PRODUCTS"
},
"INDUSTRY_FOOD_DISTRIBUTION": {
	"prefix": "industry_food_distribution",
	"body": "INDUSTRY_FOOD_DISTRIBUTION"
},
"INDUSTRY_GROCERY_STORES": {
	"prefix": "industry_grocery_stores",
	"body": "INDUSTRY_GROCERY_STORES"
},
"INDUSTRY_HOUSEHOLD_PRODUCTS": {
	"prefix": "industry_household_products",
	"body": "INDUSTRY_HOUSEHOLD_PRODUCTS"
},
"INDUSTRY_PACKAGED_FOODS": {
	"prefix": "industry_packaged_foods",
	"body": "INDUSTRY_PACKAGED_FOODS"
},
"INDUSTRY_TOBACCO": {
	"prefix": "industry_tobacco",
	"body": "INDUSTRY_TOBACCO"
},
"INDUSTRY_OIL_GAS_DRILLING": {
	"prefix": "industry_oil_gas_drilling",
	"body": "INDUSTRY_OIL_GAS_DRILLING"
},
"INDUSTRY_OIL_GAS_EP": {
	"prefix": "industry_oil_gas_ep",
	"body": "INDUSTRY_OIL_GAS_EP"
},
"INDUSTRY_OIL_GAS_EQUIPMENT": {
	"prefix": "industry_oil_gas_equipment",
	"body": "INDUSTRY_OIL_GAS_EQUIPMENT"
},
"INDUSTRY_OIL_GAS_INTEGRATED": {
	"prefix": "industry_oil_gas_integrated",
	"body": "INDUSTRY_OIL_GAS_INTEGRATED"
},
"INDUSTRY_OIL_GAS_MIDSTREAM": {
	"prefix": "industry_oil_gas_midstream",
	"body": "INDUSTRY_OIL_GAS_MIDSTREAM"
},
"INDUSTRY_OIL_GAS_REFINING": {
	"prefix": "industry_oil_gas_refining",
	"body": "INDUSTRY_OIL_GAS_REFINING"
},
"INDUSTRY_THERMAL_COAL": {
	"prefix": "industry_thermal_coal",
	"body": "INDUSTRY_THERMAL_COAL"
},
"INDUSTRY_URANIUM": {
	"prefix": "industry_uranium",
	"body": "INDUSTRY_URANIUM"
},
"INDUSTRY_EXCHANGE_TRADED_FUND": {
	"prefix": "industry_exchange_traded_fund",
	"body": "INDUSTRY_EXCHANGE_TRADED_FUND"
},
"INDUSTRY_ASSETS_MANAGEMENT": {
	"prefix": "industry_assets_management",
	"body": "INDUSTRY_ASSETS_MANAGEMENT"
},
"INDUSTRY_BANKS_DIVERSIFIED": {
	"prefix": "industry_banks_diversified",
	"body": "INDUSTRY_BANKS_DIVERSIFIED"
},
"INDUSTRY_BANKS_REGIONAL": {
	"prefix": "industry_banks_regional",
	"body": "INDUSTRY_BANKS_REGIONAL"
},
"INDUSTRY_CAPITAL_MARKETS": {
	"prefix": "industry_capital_markets",
	"body": "INDUSTRY_CAPITAL_MARKETS"
},
"INDUSTRY_CLOSE_END_FUND_DEBT": {
	"prefix": "industry_close_end_fund_debt",
	"body": "INDUSTRY_CLOSE_END_FUND_DEBT"
},
"INDUSTRY_CLOSE_END_FUND_EQUITY": {
	"prefix": "industry_close_end_fund_equity",
	"body": "INDUSTRY_CLOSE_END_FUND_EQUITY"
},
"INDUSTRY_CLOSE_END_FUND_FOREIGN": {
	"prefix": "industry_close_end_fund_foreign",
	"body": "INDUSTRY_CLOSE_END_FUND_FOREIGN"
},
"INDUSTRY_CREDIT_SERVICES": {
	"prefix": "industry_credit_services",
	"body": "INDUSTRY_CREDIT_SERVICES"
},
"INDUSTRY_FINANCIAL_CONGLOMERATE": {
	"prefix": "industry_financial_conglomerate",
	"body": "INDUSTRY_FINANCIAL_CONGLOMERATE"
},
"INDUSTRY_FINANCIAL_DATA_EXCHANGE": {
	"prefix": "industry_financial_data_exchange",
	"body": "INDUSTRY_FINANCIAL_DATA_EXCHANGE"
},
"INDUSTRY_INSURANCE_BROKERS": {
	"prefix": "industry_insurance_brokers",
	"body": "INDUSTRY_INSURANCE_BROKERS"
},
"INDUSTRY_INSURANCE_DIVERSIFIED": {
	"prefix": "industry_insurance_diversified",
	"body": "INDUSTRY_INSURANCE_DIVERSIFIED"
},
"INDUSTRY_INSURANCE_LIFE": {
	"prefix": "industry_insurance_life",
	"body": "INDUSTRY_INSURANCE_LIFE"
},
"INDUSTRY_INSURANCE_PROPERTY": {
	"prefix": "industry_insurance_property",
	"body": "INDUSTRY_INSURANCE_PROPERTY"
},
"INDUSTRY_INSURANCE_REINSURANCE": {
	"prefix": "industry_insurance_reinsurance",
	"body": "INDUSTRY_INSURANCE_REINSURANCE"
},
"INDUSTRY_INSURANCE_SPECIALTY": {
	"prefix": "industry_insurance_specialty",
	"body": "INDUSTRY_INSURANCE_SPECIALTY"
},
"INDUSTRY_MORTGAGE_FINANCE": {
	"prefix": "industry_mortgage_finance",
	"body": "INDUSTRY_MORTGAGE_FINANCE"
},
"INDUSTRY_SHELL_COMPANIES": {
	"prefix": "industry_shell_companies",
	"body": "INDUSTRY_SHELL_COMPANIES"
},
"INDUSTRY_BIOTECHNOLOGY": {
	"prefix": "industry_biotechnology",
	"body": "INDUSTRY_BIOTECHNOLOGY"
},
"INDUSTRY_DIAGNOSTICS_RESEARCH": {
	"prefix": "industry_diagnostics_research",
	"body": "INDUSTRY_DIAGNOSTICS_RESEARCH"
},
"INDUSTRY_DRUGS_MANUFACTURERS": {
	"prefix": "industry_drugs_manufacturers",
	"body": "INDUSTRY_DRUGS_MANUFACTURERS"
},
"INDUSTRY_DRUGS_MANUFACTURERS_SPEC": {
	"prefix": "industry_drugs_manufacturers_spec",
	"body": "INDUSTRY_DRUGS_MANUFACTURERS_SPEC"
},
"INDUSTRY_HEALTHCARE_PLANS": {
	"prefix": "industry_healthcare_plans",
	"body": "INDUSTRY_HEALTHCARE_PLANS"
},
"INDUSTRY_HEALTH_INFORMATION": {
	"prefix": "industry_health_information",
	"body": "INDUSTRY_HEALTH_INFORMATION"
},
"INDUSTRY_MEDICAL_FACILITIES": {
	"prefix": "industry_medical_facilities",
	"body": "INDUSTRY_MEDICAL_FACILITIES"
},
"INDUSTRY_MEDICAL_DEVICES": {
	"prefix": "industry_medical_devices",
	"body": "INDUSTRY_MEDICAL_DEVICES"
},
"INDUSTRY_MEDICAL_DISTRIBUTION": {
	"prefix": "industry_medical_distribution",
	"body": "INDUSTRY_MEDICAL_DISTRIBUTION"
},
"INDUSTRY_MEDICAL_INSTRUMENTS": {
	"prefix": "industry_medical_instruments",
	"body": "INDUSTRY_MEDICAL_INSTRUMENTS"
},
"INDUSTRY_PHARM_RETAILERS": {
	"prefix": "industry_pharm_retailers",
	"body": "INDUSTRY_PHARM_RETAILERS"
},
"INDUSTRY_AEROSPACE_DEFENSE": {
	"prefix": "industry_aerospace_defense",
	"body": "INDUSTRY_AEROSPACE_DEFENSE"
},
"INDUSTRY_AIRLINES": {
	"prefix": "industry_airlines",
	"body": "INDUSTRY_AIRLINES"
},
"INDUSTRY_AIRPORTS_SERVICES": {
	"prefix": "industry_airports_services",
	"body": "INDUSTRY_AIRPORTS_SERVICES"
},
"INDUSTRY_BUILDING_PRODUCTS": {
	"prefix": "industry_building_products",
	"body": "INDUSTRY_BUILDING_PRODUCTS"
},
"INDUSTRY_BUSINESS_EQUIPMENT": {
	"prefix": "industry_business_equipment",
	"body": "INDUSTRY_BUSINESS_EQUIPMENT"
},
"INDUSTRY_CONGLOMERATES": {
	"prefix": "industry_conglomerates",
	"body": "INDUSTRY_CONGLOMERATES"
},
"INDUSTRY_CONSULTING_SERVICES": {
	"prefix": "industry_consulting_services",
	"body": "INDUSTRY_CONSULTING_SERVICES"
},
"INDUSTRY_ELECTRICAL_EQUIPMENT": {
	"prefix": "industry_electrical_equipment",
	"body": "INDUSTRY_ELECTRICAL_EQUIPMENT"
},
"INDUSTRY_ENGINEERING_CONSTRUCTION": {
	"prefix": "industry_engineering_construction",
	"body": "INDUSTRY_ENGINEERING_CONSTRUCTION"
},
"INDUSTRY_FARM_HEAVY_MACHINERY": {
	"prefix": "industry_farm_heavy_machinery",
	"body": "INDUSTRY_FARM_HEAVY_MACHINERY"
},
"INDUSTRY_INDUSTRIAL_DISTRIBUTION": {
	"prefix": "industry_industrial_distribution",
	"body": "INDUSTRY_INDUSTRIAL_DISTRIBUTION"
},
"INDUSTRY_INFRASTRUCTURE_OPERATIONS": {
	"prefix": "industry_infrastructure_operations",
	"body": "INDUSTRY_INFRASTRUCTURE_OPERATIONS"
},
"INDUSTRY_FREIGHT_LOGISTICS": {
	"prefix": "industry_freight_logistics",
	"body": "INDUSTRY_FREIGHT_LOGISTICS"
},
"INDUSTRY_MARINE_SHIPPING": {
	"prefix": "industry_marine_shipping",
	"body": "INDUSTRY_MARINE_SHIPPING"
},
"INDUSTRY_METAL_FABRICATION": {
	"prefix": "industry_metal_fabrication",
	"body": "INDUSTRY_METAL_FABRICATION"
},
"INDUSTRY_POLLUTION_CONTROL": {
	"prefix": "industry_pollution_control",
	"body": "INDUSTRY_POLLUTION_CONTROL"
},
"INDUSTRY_RAILROADS": {
	"prefix": "industry_railroads",
	"body": "INDUSTRY_RAILROADS"
},
"INDUSTRY_RENTAL_LEASING": {
	"prefix": "industry_rental_leasing",
	"body": "INDUSTRY_RENTAL_LEASING"
},
"INDUSTRY_SECURITY_PROTECTION": {
	"prefix": "industry_security_protection",
	"body": "INDUSTRY_SECURITY_PROTECTION"
},
"INDUSTRY_SPEALITY_BUSINESS_SERVICES": {
	"prefix": "industry_speality_business_services",
	"body": "INDUSTRY_SPEALITY_BUSINESS_SERVICES"
},
"INDUSTRY_SPEALITY_MACHINERY": {
	"prefix": "industry_speality_machinery",
	"body": "INDUSTRY_SPEALITY_MACHINERY"
},
"INDUSTRY_STUFFING_EMPLOYMENT": {
	"prefix": "industry_stuffing_employment",
	"body": "INDUSTRY_STUFFING_EMPLOYMENT"
},
"INDUSTRY_TOOLS_ACCESSORIES": {
	"prefix": "industry_tools_accessories",
	"body": "INDUSTRY_TOOLS_ACCESSORIES"
},
"INDUSTRY_TRUCKING": {
	"prefix": "industry_trucking",
	"body": "INDUSTRY_TRUCKING"
},
"INDUSTRY_WASTE_MANAGEMENT": {
	"prefix": "industry_waste_management",
	"body": "INDUSTRY_WASTE_MANAGEMENT"
},
"INDUSTRY_REAL_ESTATE_DEVELOPMENT": {
	"prefix": "industry_real_estate_development",
	"body": "INDUSTRY_REAL_ESTATE_DEVELOPMENT"
},
"INDUSTRY_REAL_ESTATE_DIVERSIFIED": {
	"prefix": "industry_real_estate_diversified",
	"body": "INDUSTRY_REAL_ESTATE_DIVERSIFIED"
},
"INDUSTRY_REAL_ESTATE_SERVICES": {
	"prefix": "industry_real_estate_services",
	"body": "INDUSTRY_REAL_ESTATE_SERVICES"
},
"INDUSTRY_REIT_DIVERSIFIED": {
	"prefix": "industry_reit_diversified",
	"body": "INDUSTRY_REIT_DIVERSIFIED"
},
"INDUSTRY_REIT_HEALTCARE": {
	"prefix": "industry_reit_healtcare",
	"body": "INDUSTRY_REIT_HEALTCARE"
},
"INDUSTRY_REIT_HOTEL_MOTEL": {
	"prefix": "industry_reit_hotel_motel",
	"body": "INDUSTRY_REIT_HOTEL_MOTEL"
},
"INDUSTRY_REIT_INDUSTRIAL": {
	"prefix": "industry_reit_industrial",
	"body": "INDUSTRY_REIT_INDUSTRIAL"
},
"INDUSTRY_REIT_MORTAGE": {
	"prefix": "industry_reit_mortage",
	"body": "INDUSTRY_REIT_MORTAGE"
},
"INDUSTRY_REIT_OFFICE": {
	"prefix": "industry_reit_office",
	"body": "INDUSTRY_REIT_OFFICE"
},
"INDUSTRY_REIT_RESIDENTAL": {
	"prefix": "industry_reit_residental",
	"body": "INDUSTRY_REIT_RESIDENTAL"
},
"INDUSTRY_REIT_RETAIL": {
	"prefix": "industry_reit_retail",
	"body": "INDUSTRY_REIT_RETAIL"
},
"INDUSTRY_REIT_SPECIALITY": {
	"prefix": "industry_reit_speciality",
	"body": "INDUSTRY_REIT_SPECIALITY"
},
"INDUSTRY_COMMUNICATION_EQUIPMENT": {
	"prefix": "industry_communication_equipment",
	"body": "INDUSTRY_COMMUNICATION_EQUIPMENT"
},
"INDUSTRY_COMPUTER_HARDWARE": {
	"prefix": "industry_computer_hardware",
	"body": "INDUSTRY_COMPUTER_HARDWARE"
},
"INDUSTRY_CONSUMER_ELECTRONICS": {
	"prefix": "industry_consumer_electronics",
	"body": "INDUSTRY_CONSUMER_ELECTRONICS"
},
"INDUSTRY_ELECTRONIC_COMPONENTS": {
	"prefix": "industry_electronic_components",
	"body": "INDUSTRY_ELECTRONIC_COMPONENTS"
},
"INDUSTRY_ELECTRONIC_DISTRIBUTION": {
	"prefix": "industry_electronic_distribution",
	"body": "INDUSTRY_ELECTRONIC_DISTRIBUTION"
},
"INDUSTRY_IT_SERVICES": {
	"prefix": "industry_it_services",
	"body": "INDUSTRY_IT_SERVICES"
},
"INDUSTRY_SCIENTIFIC_INSTRUMENTS": {
	"prefix": "industry_scientific_instruments",
	"body": "INDUSTRY_SCIENTIFIC_INSTRUMENTS"
},
"INDUSTRY_SEMICONDUCTOR_EQUIPMENT": {
	"prefix": "industry_semiconductor_equipment",
	"body": "INDUSTRY_SEMICONDUCTOR_EQUIPMENT"
},
"INDUSTRY_SEMICONDUCTORS": {
	"prefix": "industry_semiconductors",
	"body": "INDUSTRY_SEMICONDUCTORS"
},
"INDUSTRY_SOFTWARE_APPLICATION": {
	"prefix": "industry_software_application",
	"body": "INDUSTRY_SOFTWARE_APPLICATION"
},
"INDUSTRY_SOFTWARE_INFRASTRUCTURE": {
	"prefix": "industry_software_infrastructure",
	"body": "INDUSTRY_SOFTWARE_INFRASTRUCTURE"
},
"INDUSTRY_SOLAR": {
	"prefix": "industry_solar",
	"body": "INDUSTRY_SOLAR"
},
"INDUSTRY_UTILITIES_DIVERSIFIED": {
	"prefix": "industry_utilities_diversified",
	"body": "INDUSTRY_UTILITIES_DIVERSIFIED"
},
"INDUSTRY_UTILITIES_POWERPRODUCERS": {
	"prefix": "industry_utilities_powerproducers",
	"body": "INDUSTRY_UTILITIES_POWERPRODUCERS"
},
"INDUSTRY_UTILITIES_RENEWABLE": {
	"prefix": "industry_utilities_renewable",
	"body": "INDUSTRY_UTILITIES_RENEWABLE"
},
"INDUSTRY_UTILITIES_REGULATED_ELECTRIC": {
	"prefix": "industry_utilities_regulated_electric",
	"body": "INDUSTRY_UTILITIES_REGULATED_ELECTRIC"
},
"INDUSTRY_UTILITIES_REGULATED_GAS": {
	"prefix": "industry_utilities_regulated_gas",
	"body": "INDUSTRY_UTILITIES_REGULATED_GAS"
},
"INDUSTRY_UTILITIES_REGULATED_WATER": {
	"prefix": "industry_utilities_regulated_water",
	"body": "INDUSTRY_UTILITIES_REGULATED_WATER"
},
"INDUSTRY_UTILITIES_FIRST": {
	"prefix": "industry_utilities_first",
	"body": "INDUSTRY_UTILITIES_FIRST"
},
"INDUSTRY_UTILITIES_LAST": {
	"prefix": "industry_utilities_last",
	"body": "INDUSTRY_UTILITIES_LAST"
},

//########################

"ENUM_ACCOUNT_INFO_INTEGER": {
	"prefix": "enum_account_info_integer",
	"body": "ENUM_ACCOUNT_INFO_INTEGER"
},
"ACCOUNT_LOGIN": {
	"prefix": "account_login",
	"body": "ACCOUNT_LOGIN"
},
"ACCOUNT_TRADE_MODE": {
	"prefix": "account_trade_mode",
	"body": "ACCOUNT_TRADE_MODE"
},
"ACCOUNT_LEVERAGE": {
	"prefix": "account_leverage",
	"body": "ACCOUNT_LEVERAGE"
},
"ACCOUNT_LIMIT_ORDERS": {
	"prefix": "account_limit_orders",
	"body": "ACCOUNT_LIMIT_ORDERS"
},
"ACCOUNT_MARGIN_SO_MODE": {
	"prefix": "account_margin_so_mode",
	"body": "ACCOUNT_MARGIN_SO_MODE"
},
"ACCOUNT_TRADE_ALLOWED": {
	"prefix": "account_trade_allowed",
	"body": "ACCOUNT_TRADE_ALLOWED"
},
"ACCOUNT_TRADE_EXPERT": {
	"prefix": "account_trade_expert",
	"body": "ACCOUNT_TRADE_EXPERT"
},
"ACCOUNT_MARGIN_MODE": {
	"prefix": "account_margin_mode",
	"body": "ACCOUNT_MARGIN_MODE"
},
"ACCOUNT_CURRENCY_DIGITS": {
	"prefix": "account_currency_digits",
	"body": "ACCOUNT_CURRENCY_DIGITS"
},
"ACCOUNT_FIFO_CLOSE": {
	"prefix": "account_fifo_close",
	"body": "ACCOUNT_FIFO_CLOSE"
},
"ACCOUNT_HEDGE_ALLOWED": {
	"prefix": "account_hedge_allowed",
	"body": "ACCOUNT_HEDGE_ALLOWED"
},

//########################

"ENUM_ACCOUNT_INFO_DOUBLE": {
	"prefix": "enum_account_info_double",
	"body": "ENUM_ACCOUNT_INFO_DOUBLE"
},
"ACCOUNT_BALANCE": {
	"prefix": "account_balance",
	"body": "ACCOUNT_BALANCE"
},
"ACCOUNT_CREDIT": {
	"prefix": "account_credit",
	"body": "ACCOUNT_CREDIT"
},
"ACCOUNT_PROFIT": {
	"prefix": "account_profit",
	"body": "ACCOUNT_PROFIT"
},
"ACCOUNT_EQUITY": {
	"prefix": "account_equity",
	"body": "ACCOUNT_EQUITY"
},
"ACCOUNT_MARGIN": {
	"prefix": "account_margin",
	"body": "ACCOUNT_MARGIN"
},
"ACCOUNT_MARGIN_FREE": {
	"prefix": "account_margin_free",
	"body": "ACCOUNT_MARGIN_FREE"
},
"ACCOUNT_MARGIN_LEVEL": {
	"prefix": "account_margin_level",
	"body": "ACCOUNT_MARGIN_LEVEL"
},
"ACCOUNT_MARGIN_SO_CALL": {
	"prefix": "account_margin_so_call",
	"body": "ACCOUNT_MARGIN_SO_CALL"
},
"ACCOUNT_MARGIN_SO_SO": {
	"prefix": "account_margin_so_so",
	"body": "ACCOUNT_MARGIN_SO_SO"
},
"ACCOUNT_MARGIN_INITIAL": {
	"prefix": "account_margin_initial",
	"body": "ACCOUNT_MARGIN_INITIAL"
},
"ACCOUNT_MARGIN_MAINTENANCE": {
	"prefix": "account_margin_maintenance",
	"body": "ACCOUNT_MARGIN_MAINTENANCE"
},
"ACCOUNT_ASSETS": {
	"prefix": "account_assets",
	"body": "ACCOUNT_ASSETS"
},
"ACCOUNT_LIABILITIES": {
	"prefix": "account_liabilities",
	"body": "ACCOUNT_LIABILITIES"
},
"ACCOUNT_COMMISSION_BLOCKED": {
	"prefix": "account_commission_blocked",
	"body": "ACCOUNT_COMMISSION_BLOCKED"
},

//########################

"ENUM_ACCOUNT_INFO_STRING": {
	"prefix": "enum_account_info_string",
	"body": "ENUM_ACCOUNT_INFO_STRING"
},
"ACCOUNT_NAME": {
	"prefix": "account_name",
	"body": "ACCOUNT_NAME"
},
"ACCOUNT_SERVER": {
	"prefix": "account_server",
	"body": "ACCOUNT_SERVER"
},
"ACCOUNT_CURRENCY": {
	"prefix": "account_currency",
	"body": "ACCOUNT_CURRENCY"
},
"ACCOUNT_COMPANY": {
	"prefix": "account_company",
	"body": "ACCOUNT_COMPANY"
},

//########################

"ENUM_ACCOUNT_TRADE_MODE": {
	"prefix": "enum_account_trade_mode",
	"body": "ENUM_ACCOUNT_TRADE_MODE"
},
"ACCOUNT_TRADE_MODE_DEMO": {
	"prefix": "account_trade_mode_demo",
	"body": "ACCOUNT_TRADE_MODE_DEMO"
},
"ACCOUNT_TRADE_MODE_CONTEST": {
	"prefix": "account_trade_mode_contest",
	"body": "ACCOUNT_TRADE_MODE_CONTEST"
},
"ACCOUNT_TRADE_MODE_REAL": {
	"prefix": "account_trade_mode_real",
	"body": "ACCOUNT_TRADE_MODE_REAL"
},

//########################

"ENUM_ACCOUNT_STOPOUT_MODE": {
	"prefix": "enum_account_stopout_mode",
	"body": "ENUM_ACCOUNT_STOPOUT_MODE"
},
"ACCOUNT_STOPOUT_MODE_PERCENT": {
	"prefix": "account_stopout_mode_percent",
	"body": "ACCOUNT_STOPOUT_MODE_PERCENT"
},
"ACCOUNT_STOPOUT_MODE_MONEY": {
	"prefix": "account_stopout_mode_money",
	"body": "ACCOUNT_STOPOUT_MODE_MONEY"
},

//########################

"ENUM_ACCOUNT_MARGIN_MODE": {
	"prefix": "enum_account_margin_mode",
	"body": "ENUM_ACCOUNT_MARGIN_MODE"
},
"ACCOUNT_MARGIN_MODE_RETAIL_NETTING": {
	"prefix": "account_margin_mode_retail_netting",
	"body": "ACCOUNT_MARGIN_MODE_RETAIL_NETTING"
},
"ACCOUNT_MARGIN_MODE_EXCHANGE": {
	"prefix": "account_margin_mode_exchange",
	"body": "ACCOUNT_MARGIN_MODE_EXCHANGE"
},
"ACCOUNT_MARGIN_MODE_RETAIL_HEDGING": {
	"prefix": "account_margin_mode_retail_hedging",
	"body": "ACCOUNT_MARGIN_MODE_RETAIL_HEDGING"
},

//########################

"ENUM_STATISTICS": {
	"prefix": "enum_statistics",
	"body": "ENUM_STATISTICS"
},
"STAT_INITIAL_DEPOSIT": {
	"prefix": "stat_initial_deposit",
	"body": "STAT_INITIAL_DEPOSIT"
},
"STAT_WITHDRAWAL": {
	"prefix": "stat_withdrawal",
	"body": "STAT_WITHDRAWAL"
},
"STAT_PROFIT": {
	"prefix": "stat_profit",
	"body": "STAT_PROFIT"
},
"STAT_GROSS_PROFIT": {
	"prefix": "stat_gross_profit",
	"body": "STAT_GROSS_PROFIT"
},
"STAT_GROSS_LOSS": {
	"prefix": "stat_gross_loss",
	"body": "STAT_GROSS_LOSS"
},
"STAT_MAX_PROFITTRADE": {
	"prefix": "stat_max_profittrade",
	"body": "STAT_MAX_PROFITTRADE"
},
"STAT_MAX_LOSSTRADE": {
	"prefix": "stat_max_losstrade",
	"body": "STAT_MAX_LOSSTRADE"
},
"STAT_CONPROFITMAX": {
	"prefix": "stat_conprofitmax",
	"body": "STAT_CONPROFITMAX"
},
"STAT_CONPROFITMAX_TRADES": {
	"prefix": "stat_conprofitmax_trades",
	"body": "STAT_CONPROFITMAX_TRADES"
},
"STAT_MAX_CONWINS": {
	"prefix": "stat_max_conwins",
	"body": "STAT_MAX_CONWINS"
},
"STAT_MAX_CONPROFIT_TRADES": {
	"prefix": "stat_max_conprofit_trades",
	"body": "STAT_MAX_CONPROFIT_TRADES"
},
"STAT_CONLOSSMAX": {
	"prefix": "stat_conlossmax",
	"body": "STAT_CONLOSSMAX"
},
"STAT_CONLOSSMAX_TRADES": {
	"prefix": "stat_conlossmax_trades",
	"body": "STAT_CONLOSSMAX_TRADES"
},
"STAT_MAX_CONLOSSES": {
	"prefix": "stat_max_conlosses",
	"body": "STAT_MAX_CONLOSSES"
},
"STAT_MAX_CONLOSS_TRADES": {
	"prefix": "stat_max_conloss_trades",
	"body": "STAT_MAX_CONLOSS_TRADES"
},
"STAT_BALANCEMIN": {
	"prefix": "stat_balancemin",
	"body": "STAT_BALANCEMIN"
},
"STAT_BALANCE_DD": {
	"prefix": "stat_balance_dd",
	"body": "STAT_BALANCE_DD"
},
"STAT_BALANCEDD_PERCENT": {
	"prefix": "stat_balancedd_percent",
	"body": "STAT_BALANCEDD_PERCENT"
},
"STAT_BALANCE_DDREL_PERCENT": {
	"prefix": "stat_balance_ddrel_percent",
	"body": "STAT_BALANCE_DDREL_PERCENT"
},
"STAT_BALANCE_DD_RELATIVE": {
	"prefix": "stat_balance_dd_relative",
	"body": "STAT_BALANCE_DD_RELATIVE"
},
"STAT_EQUITYMIN": {
	"prefix": "stat_equitymin",
	"body": "STAT_EQUITYMIN"
},
"STAT_EQUITY_DD": {
	"prefix": "stat_equity_dd",
	"body": "STAT_EQUITY_DD"
},
"STAT_EQUITYDD_PERCENT": {
	"prefix": "stat_equitydd_percent",
	"body": "STAT_EQUITYDD_PERCENT"
},
"STAT_EQUITY_DDREL_PERCENT": {
	"prefix": "stat_equity_ddrel_percent",
	"body": "STAT_EQUITY_DDREL_PERCENT"
},
"STAT_EQUITY_DD_RELATIVE": {
	"prefix": "stat_equity_dd_relative",
	"body": "STAT_EQUITY_DD_RELATIVE"
},
"STAT_EXPECTED_PAYOFF": {
	"prefix": "stat_expected_payoff",
	"body": "STAT_EXPECTED_PAYOFF"
},
"STAT_PROFIT_FACTOR": {
	"prefix": "stat_profit_factor",
	"body": "STAT_PROFIT_FACTOR"
},
"STAT_RECOVERY_FACTOR": {
	"prefix": "stat_recovery_factor",
	"body": "STAT_RECOVERY_FACTOR"
},
"STAT_SHARPE_RATIO": {
	"prefix": "stat_sharpe_ratio",
	"body": "STAT_SHARPE_RATIO"
},
"STAT_MIN_MARGINLEVEL": {
	"prefix": "stat_min_marginlevel",
	"body": "STAT_MIN_MARGINLEVEL"
},
"STAT_CUSTOM_ONTESTER": {
	"prefix": "stat_custom_ontester",
	"body": "STAT_CUSTOM_ONTESTER"
},
"STAT_DEALS": {
	"prefix": "stat_deals",
	"body": "STAT_DEALS"
},
"STAT_TRADES": {
	"prefix": "stat_trades",
	"body": "STAT_TRADES"
},
"STAT_PROFIT_TRADES": {
	"prefix": "stat_profit_trades",
	"body": "STAT_PROFIT_TRADES"
},
"STAT_LOSS_TRADES": {
	"prefix": "stat_loss_trades",
	"body": "STAT_LOSS_TRADES"
},
"STAT_SHORT_TRADES": {
	"prefix": "stat_short_trades",
	"body": "STAT_SHORT_TRADES"
},
"STAT_LONG_TRADES": {
	"prefix": "stat_long_trades",
	"body": "STAT_LONG_TRADES"
},
"STAT_PROFIT_SHORTTRADES": {
	"prefix": "stat_profit_shorttrades",
	"body": "STAT_PROFIT_SHORTTRADES"
},
"STAT_PROFIT_LONGTRADES": {
	"prefix": "stat_profit_longtrades",
	"body": "STAT_PROFIT_LONGTRADES"
},
"STAT_PROFITTRADES_AVGCON": {
	"prefix": "stat_profittrades_avgcon",
	"body": "STAT_PROFITTRADES_AVGCON"
},
"STAT_LOSSTRADES_AVGCON": {
	"prefix": "stat_losstrades_avgcon",
	"body": "STAT_LOSSTRADES_AVGCON"
},
//## Return Codes of the Trade Server

//########################

"TRADE_RETCODE_REQUOTE": {
	"prefix": "trade_retcode_requote",
	"body": "TRADE_RETCODE_REQUOTE"
},
"TRADE_RETCODE_REJECT": {
	"prefix": "trade_retcode_reject",
	"body": "TRADE_RETCODE_REJECT"
},
"TRADE_RETCODE_CANCEL": {
	"prefix": "trade_retcode_cancel",
	"body": "TRADE_RETCODE_CANCEL"
},
"TRADE_RETCODE_PLACED": {
	"prefix": "trade_retcode_placed",
	"body": "TRADE_RETCODE_PLACED"
},
"TRADE_RETCODE_DONE": {
	"prefix": "trade_retcode_done",
	"body": "TRADE_RETCODE_DONE"
},
"TRADE_RETCODE_DONE_PARTIAL": {
	"prefix": "trade_retcode_done_partial",
	"body": "TRADE_RETCODE_DONE_PARTIAL"
},
"TRADE_RETCODE_ERROR": {
	"prefix": "trade_retcode_error",
	"body": "TRADE_RETCODE_ERROR"
},
"TRADE_RETCODE_TIMEOUT": {
	"prefix": "trade_retcode_timeout",
	"body": "TRADE_RETCODE_TIMEOUT"
},
"TRADE_RETCODE_INVALID": {
	"prefix": "trade_retcode_invalid",
	"body": "TRADE_RETCODE_INVALID"
},
"TRADE_RETCODE_INVALID_VOLUME": {
	"prefix": "trade_retcode_invalid_volume",
	"body": "TRADE_RETCODE_INVALID_VOLUME"
},
"TRADE_RETCODE_INVALID_PRICE": {
	"prefix": "trade_retcode_invalid_price",
	"body": "TRADE_RETCODE_INVALID_PRICE"
},
"TRADE_RETCODE_INVALID_STOPS": {
	"prefix": "trade_retcode_invalid_stops",
	"body": "TRADE_RETCODE_INVALID_STOPS"
},
"TRADE_RETCODE_TRADE_DISABLED": {
	"prefix": "trade_retcode_trade_disabled",
	"body": "TRADE_RETCODE_TRADE_DISABLED"
},
"TRADE_RETCODE_MARKET_CLOSED": {
	"prefix": "trade_retcode_market_closed",
	"body": "TRADE_RETCODE_MARKET_CLOSED"
},
"TRADE_RETCODE_NO_MONEY": {
	"prefix": "trade_retcode_no_money",
	"body": "TRADE_RETCODE_NO_MONEY"
},
"TRADE_RETCODE_PRICE_CHANGED": {
	"prefix": "trade_retcode_price_changed",
	"body": "TRADE_RETCODE_PRICE_CHANGED"
},
"TRADE_RETCODE_PRICE_OFF": {
	"prefix": "trade_retcode_price_off",
	"body": "TRADE_RETCODE_PRICE_OFF"
},
"TRADE_RETCODE_INVALID_EXPIRATION": {
	"prefix": "trade_retcode_invalid_expiration",
	"body": "TRADE_RETCODE_INVALID_EXPIRATION"
},
"TRADE_RETCODE_ORDER_CHANGED": {
	"prefix": "trade_retcode_order_changed",
	"body": "TRADE_RETCODE_ORDER_CHANGED"
},
"TRADE_RETCODE_TOO_MANY_REQUESTS": {
	"prefix": "trade_retcode_too_many_requests",
	"body": "TRADE_RETCODE_TOO_MANY_REQUESTS"
},
"TRADE_RETCODE_NO_CHANGES": {
	"prefix": "trade_retcode_no_changes",
	"body": "TRADE_RETCODE_NO_CHANGES"
},
"TRADE_RETCODE_SERVER_DISABLES_AT": {
	"prefix": "trade_retcode_server_disables_at",
	"body": "TRADE_RETCODE_SERVER_DISABLES_AT"
},
"TRADE_RETCODE_CLIENT_DISABLES_AT": {
	"prefix": "trade_retcode_client_disables_at",
	"body": "TRADE_RETCODE_CLIENT_DISABLES_AT"
},
"TRADE_RETCODE_LOCKED": {
	"prefix": "trade_retcode_locked",
	"body": "TRADE_RETCODE_LOCKED"
},
"TRADE_RETCODE_FROZEN": {
	"prefix": "trade_retcode_frozen",
	"body": "TRADE_RETCODE_FROZEN"
},
"TRADE_RETCODE_INVALID_FILL": {
	"prefix": "trade_retcode_invalid_fill",
	"body": "TRADE_RETCODE_INVALID_FILL"
},
"TRADE_RETCODE_CONNECTION": {
	"prefix": "trade_retcode_connection",
	"body": "TRADE_RETCODE_CONNECTION"
},
"TRADE_RETCODE_ONLY_REAL": {
	"prefix": "trade_retcode_only_real",
	"body": "TRADE_RETCODE_ONLY_REAL"
},
"TRADE_RETCODE_LIMIT_ORDERS": {
	"prefix": "trade_retcode_limit_orders",
	"body": "TRADE_RETCODE_LIMIT_ORDERS"
},
"TRADE_RETCODE_LIMIT_VOLUME": {
	"prefix": "trade_retcode_limit_volume",
	"body": "TRADE_RETCODE_LIMIT_VOLUME"
},
"TRADE_RETCODE_INVALID_ORDER": {
	"prefix": "trade_retcode_invalid_order",
	"body": "TRADE_RETCODE_INVALID_ORDER"
},
"TRADE_RETCODE_POSITION_CLOSED": {
	"prefix": "trade_retcode_position_closed",
	"body": "TRADE_RETCODE_POSITION_CLOSED"
},
"TRADE_RETCODE_INVALID_CLOSE_VOLUME": {
	"prefix": "trade_retcode_invalid_close_volume",
	"body": "TRADE_RETCODE_INVALID_CLOSE_VOLUME"
},
"TRADE_RETCODE_CLOSE_ORDER_EXIST": {
	"prefix": "trade_retcode_close_order_exist",
	"body": "TRADE_RETCODE_CLOSE_ORDER_EXIST"
},
"TRADE_RETCODE_LIMIT_POSITIONS": {
	"prefix": "trade_retcode_limit_positions",
	"body": "TRADE_RETCODE_LIMIT_POSITIONS"
},
"TRADE_RETCODE_REJECT_CANCEL": {
	"prefix": "trade_retcode_reject_cancel",
	"body": "TRADE_RETCODE_REJECT_CANCEL"
},
"TRADE_RETCODE_LONG_ONLY": {
	"prefix": "trade_retcode_long_only",
	"body": "TRADE_RETCODE_LONG_ONLY"
},
"TRADE_RETCODE_SHORT_ONLY": {
	"prefix": "trade_retcode_short_only",
	"body": "TRADE_RETCODE_SHORT_ONLY"
},
"TRADE_RETCODE_CLOSE_ONLY": {
	"prefix": "trade_retcode_close_only",
	"body": "TRADE_RETCODE_CLOSE_ONLY"
},
"TRADE_RETCODE_FIFO_CLOSE": {
	"prefix": "trade_retcode_fifo_close",
	"body": "TRADE_RETCODE_FIFO_CLOSE"
},
"TRADE_RETCODE_HEDGE_PROHIBITED": {
	"prefix": "trade_retcode_hedge_prohibited",
	"body": "TRADE_RETCODE_HEDGE_PROHIBITED"
},

//## Runtime Errors
"ERR_SUCCESS": {
	"prefix": "err_success",
	"body": "ERR_SUCCESS"
},
"ERR_INTERNAL_ERROR": {
	"prefix": "err_internal_error",
	"body": "ERR_INTERNAL_ERROR"
},
"ERR_WRONG_INTERNAL_PARAMETER": {
	"prefix": "err_wrong_internal_parameter",
	"body": "ERR_WRONG_INTERNAL_PARAMETER"
},
"ERR_INVALID_PARAMETER": {
	"prefix": "err_invalid_parameter",
	"body": "ERR_INVALID_PARAMETER"
},
"ERR_NOT_ENOUGH_MEMORY": {
	"prefix": "err_not_enough_memory",
	"body": "ERR_NOT_ENOUGH_MEMORY"
},
"ERR_STRUCT_WITHOBJECTS_ORCLASS": {
	"prefix": "err_struct_withobjects_orclass",
	"body": "ERR_STRUCT_WITHOBJECTS_ORCLASS"
},
"ERR_INVALID_ARRAY": {
	"prefix": "err_invalid_array",
	"body": "ERR_INVALID_ARRAY"
},
"ERR_ARRAY_RESIZE_ERROR": {
	"prefix": "err_array_resize_error",
	"body": "ERR_ARRAY_RESIZE_ERROR"
},
"ERR_STRING_RESIZE_ERROR": {
	"prefix": "err_string_resize_error",
	"body": "ERR_STRING_RESIZE_ERROR"
},
"ERR_NOTINITIALIZED_STRING": {
	"prefix": "err_notinitialized_string",
	"body": "ERR_NOTINITIALIZED_STRING"
},
"ERR_INVALID_DATETIME": {
	"prefix": "err_invalid_datetime",
	"body": "ERR_INVALID_DATETIME"
},
"ERR_ARRAY_BAD_SIZE": {
	"prefix": "err_array_bad_size",
	"body": "ERR_ARRAY_BAD_SIZE"
},
"ERR_INVALID_POINTER": {
	"prefix": "err_invalid_pointer",
	"body": "ERR_INVALID_POINTER"
},
"ERR_INVALID_POINTER_TYPE": {
	"prefix": "err_invalid_pointer_type",
	"body": "ERR_INVALID_POINTER_TYPE"
},
"ERR_FUNCTION_NOT_ALLOWED": {
	"prefix": "err_function_not_allowed",
	"body": "ERR_FUNCTION_NOT_ALLOWED"
},
"ERR_RESOURCE_NAME_DUPLICATED": {
	"prefix": "err_resource_name_duplicated",
	"body": "ERR_RESOURCE_NAME_DUPLICATED"
},
"ERR_RESOURCE_NOT_FOUND": {
	"prefix": "err_resource_not_found",
	"body": "ERR_RESOURCE_NOT_FOUND"
},
"ERR_RESOURCE_UNSUPPOTED_TYPE": {
	"prefix": "err_resource_unsuppoted_type",
	"body": "ERR_RESOURCE_UNSUPPOTED_TYPE"
},
"ERR_RESOURCE_NAME_IS_TOO_LONG": {
	"prefix": "err_resource_name_is_too_long",
	"body": "ERR_RESOURCE_NAME_IS_TOO_LONG"
},
"ERR_MATH_OVERFLOW": {
	"prefix": "err_math_overflow",
	"body": "ERR_MATH_OVERFLOW"
},
"ERR_SLEEP_ERROR": {
	"prefix": "err_sleep_error",
	"body": "ERR_SLEEP_ERROR"
},
"ERR_PROGRAM_STOPPED": {
	"prefix": "err_program_stopped",
	"body": "ERR_PROGRAM_STOPPED"
},
"ERR_CHART_WRONG_ID": {
	"prefix": "err_chart_wrong_id",
	"body": "ERR_CHART_WRONG_ID"
},
"ERR_CHART_NO_REPLY": {
	"prefix": "err_chart_no_reply",
	"body": "ERR_CHART_NO_REPLY"
},
"ERR_CHART_NOT_FOUND": {
	"prefix": "err_chart_not_found",
	"body": "ERR_CHART_NOT_FOUND"
},
"ERR_CHART_NO_EXPERT": {
	"prefix": "err_chart_no_expert",
	"body": "ERR_CHART_NO_EXPERT"
},
"ERR_CHART_CANNOT_OPEN": {
	"prefix": "err_chart_cannot_open",
	"body": "ERR_CHART_CANNOT_OPEN"
},
"ERR_CHART_CANNOT_CHANGE": {
	"prefix": "err_chart_cannot_change",
	"body": "ERR_CHART_CANNOT_CHANGE"
},
"ERR_CHART_WRONG_PARAMETER": {
	"prefix": "err_chart_wrong_parameter",
	"body": "ERR_CHART_WRONG_PARAMETER"
},
"ERR_CHART_CANNOT_CREATE_TIMER": {
	"prefix": "err_chart_cannot_create_timer",
	"body": "ERR_CHART_CANNOT_CREATE_TIMER"
},
"ERR_CHART_WRONG_PROPERTY": {
	"prefix": "err_chart_wrong_property",
	"body": "ERR_CHART_WRONG_PROPERTY"
},
"ERR_CHART_SCREENSHOT_FAILED": {
	"prefix": "err_chart_screenshot_failed",
	"body": "ERR_CHART_SCREENSHOT_FAILED"
},
"ERR_CHART_NAVIGATE_FAILED": {
	"prefix": "err_chart_navigate_failed",
	"body": "ERR_CHART_NAVIGATE_FAILED"
},
"ERR_CHART_TEMPLATE_FAILED": {
	"prefix": "err_chart_template_failed",
	"body": "ERR_CHART_TEMPLATE_FAILED"
},
"ERR_CHART_WINDOW_NOT_FOUND": {
	"prefix": "err_chart_window_not_found",
	"body": "ERR_CHART_WINDOW_NOT_FOUND"
},
"ERR_CHART_INDICATOR_CANNOT_ADD": {
	"prefix": "err_chart_indicator_cannot_add",
	"body": "ERR_CHART_INDICATOR_CANNOT_ADD"
},
"ERR_CHART_INDICATOR_CANNOT_DEL": {
	"prefix": "err_chart_indicator_cannot_del",
	"body": "ERR_CHART_INDICATOR_CANNOT_DEL"
},
"ERR_CHART_INDICATOR_NOT_FOUND": {
	"prefix": "err_chart_indicator_not_found",
	"body": "ERR_CHART_INDICATOR_NOT_FOUND"
},
"ERR_OBJECT_ERROR": {
	"prefix": "err_object_error",
	"body": "ERR_OBJECT_ERROR"
},
"ERR_OBJECT_NOT_FOUND": {
	"prefix": "err_object_not_found",
	"body": "ERR_OBJECT_NOT_FOUND"
},
"ERR_OBJECT_WRONG_PROPERTY": {
	"prefix": "err_object_wrong_property",
	"body": "ERR_OBJECT_WRONG_PROPERTY"
},
"ERR_OBJECT_GETDATE_FAILED": {
	"prefix": "err_object_getdate_failed",
	"body": "ERR_OBJECT_GETDATE_FAILED"
},
"ERR_OBJECT_GETVALUE_FAILED": {
	"prefix": "err_object_getvalue_failed",
	"body": "ERR_OBJECT_GETVALUE_FAILED"
},
"ERR_MARKET_UNKNOWN_SYMBOL": {
	"prefix": "err_market_unknown_symbol",
	"body": "ERR_MARKET_UNKNOWN_SYMBOL"
},
"ERR_MARKET_NOT_SELECTED": {
	"prefix": "err_market_not_selected",
	"body": "ERR_MARKET_NOT_SELECTED"
},
"ERR_MARKET_WRONG_PROPERTY": {
	"prefix": "err_market_wrong_property",
	"body": "ERR_MARKET_WRONG_PROPERTY"
},
"ERR_MARKET_LASTTIME_UNKNOWN": {
	"prefix": "err_market_lasttime_unknown",
	"body": "ERR_MARKET_LASTTIME_UNKNOWN"
},
"ERR_MARKET_SELECT_ERROR": {
	"prefix": "err_market_select_error",
	"body": "ERR_MARKET_SELECT_ERROR"
},
"ERR_HISTORY_NOT_FOUND": {
	"prefix": "err_history_not_found",
	"body": "ERR_HISTORY_NOT_FOUND"
},
"ERR_HISTORY_WRONG_PROPERTY": {
	"prefix": "err_history_wrong_property",
	"body": "ERR_HISTORY_WRONG_PROPERTY"
},
"ERR_HISTORY_TIMEOUT": {
	"prefix": "err_history_timeout",
	"body": "ERR_HISTORY_TIMEOUT"
},
"ERR_HISTORY_BARS_LIMIT": {
	"prefix": "err_history_bars_limit",
	"body": "ERR_HISTORY_BARS_LIMIT"
},
"ERR_HISTORY_LOAD_ERRORS": {
	"prefix": "err_history_load_errors",
	"body": "ERR_HISTORY_LOAD_ERRORS"
},
"ERR_HISTORY_SMALL_BUFFER": {
	"prefix": "err_history_small_buffer",
	"body": "ERR_HISTORY_SMALL_BUFFER"
},
"ERR_GLOBALVARIABLE_NOT_FOUND": {
	"prefix": "err_globalvariable_not_found",
	"body": "ERR_GLOBALVARIABLE_NOT_FOUND"
},
"ERR_GLOBALVARIABLE_EXISTS": {
	"prefix": "err_globalvariable_exists",
	"body": "ERR_GLOBALVARIABLE_EXISTS"
},
"ERR_GLOBALVARIABLE_NOT_MODIFIED": {
	"prefix": "err_globalvariable_not_modified",
	"body": "ERR_GLOBALVARIABLE_NOT_MODIFIED"
},
"ERR_GLOBALVARIABLE_CANNOTREAD": {
	"prefix": "err_globalvariable_cannotread",
	"body": "ERR_GLOBALVARIABLE_CANNOTREAD"
},
"ERR_GLOBALVARIABLE_CANNOTWRITE": {
	"prefix": "err_globalvariable_cannotwrite",
	"body": "ERR_GLOBALVARIABLE_CANNOTWRITE"
},
"ERR_MAIL_SEND_FAILED": {
	"prefix": "err_mail_send_failed",
	"body": "ERR_MAIL_SEND_FAILED"
},
"ERR_PLAY_SOUND_FAILED": {
	"prefix": "err_play_sound_failed",
	"body": "ERR_PLAY_SOUND_FAILED"
},
"ERR_MQL5_WRONG_PROPERTY": {
	"prefix": "err_mql5_wrong_property",
	"body": "ERR_MQL5_WRONG_PROPERTY"
},
"ERR_TERMINAL_WRONG_PROPERTY": {
	"prefix": "err_terminal_wrong_property",
	"body": "ERR_TERMINAL_WRONG_PROPERTY"
},
"ERR_FTP_SEND_FAILED": {
	"prefix": "err_ftp_send_failed",
	"body": "ERR_FTP_SEND_FAILED"
},
"ERR_NOTIFICATION_SEND_FAILED": {
	"prefix": "err_notification_send_failed",
	"body": "ERR_NOTIFICATION_SEND_FAILED"
},
"ERR_NOTIFICATION_WRONG_PARAMETER": {
	"prefix": "err_notification_wrong_parameter",
	"body": "ERR_NOTIFICATION_WRONG_PARAMETER"
},
"ERR_NOTIFICATION_WRONG_SETTINGS": {
	"prefix": "err_notification_wrong_settings",
	"body": "ERR_NOTIFICATION_WRONG_SETTINGS"
},
"ERR_NOTIFICATION_TOO_FREQUENT": {
	"prefix": "err_notification_too_frequent",
	"body": "ERR_NOTIFICATION_TOO_FREQUENT"
},
"ERR_FTP_NOSERVER": {
	"prefix": "err_ftp_noserver",
	"body": "ERR_FTP_NOSERVER"
},
"ERR_FTP_NOLOGIN": {
	"prefix": "err_ftp_nologin",
	"body": "ERR_FTP_NOLOGIN"
},
"ERR_FTP_FILE_ERROR": {
	"prefix": "err_ftp_file_error",
	"body": "ERR_FTP_FILE_ERROR"
},
"ERR_FTP_CONNECT_FAILED": {
	"prefix": "err_ftp_connect_failed",
	"body": "ERR_FTP_CONNECT_FAILED"
},
"ERR_FTP_CHANGEDIR": {
	"prefix": "err_ftp_changedir",
	"body": "ERR_FTP_CHANGEDIR"
},
"ERR_FTP_CLOSED": {
	"prefix": "err_ftp_closed",
	"body": "ERR_FTP_CLOSED"
},
"ERR_BUFFERS_NO_MEMORY": {
	"prefix": "err_buffers_no_memory",
	"body": "ERR_BUFFERS_NO_MEMORY"
},
"ERR_BUFFERS_WRONG_INDEX": {
	"prefix": "err_buffers_wrong_index",
	"body": "ERR_BUFFERS_WRONG_INDEX"
},
"ERR_CUSTOM_WRONG_PROPERTY": {
	"prefix": "err_custom_wrong_property",
	"body": "ERR_CUSTOM_WRONG_PROPERTY"
},
"ERR_ACCOUNT_WRONG_PROPERTY": {
	"prefix": "err_account_wrong_property",
	"body": "ERR_ACCOUNT_WRONG_PROPERTY"
},
"ERR_TRADE_WRONG_PROPERTY": {
	"prefix": "err_trade_wrong_property",
	"body": "ERR_TRADE_WRONG_PROPERTY"
},
"ERR_TRADE_DISABLED": {
	"prefix": "err_trade_disabled",
	"body": "ERR_TRADE_DISABLED"
},
"ERR_TRADE_POSITION_NOT_FOUND": {
	"prefix": "err_trade_position_not_found",
	"body": "ERR_TRADE_POSITION_NOT_FOUND"
},
"ERR_TRADE_ORDER_NOT_FOUND": {
	"prefix": "err_trade_order_not_found",
	"body": "ERR_TRADE_ORDER_NOT_FOUND"
},
"ERR_TRADE_DEAL_NOT_FOUND": {
	"prefix": "err_trade_deal_not_found",
	"body": "ERR_TRADE_DEAL_NOT_FOUND"
},
"ERR_TRADE_SEND_FAILED": {
	"prefix": "err_trade_send_failed",
	"body": "ERR_TRADE_SEND_FAILED"
},
"ERR_TRADE_CALC_FAILED": {
	"prefix": "err_trade_calc_failed",
	"body": "ERR_TRADE_CALC_FAILED"
},
"ERR_INDICATOR_UNKNOWN_SYMBOL": {
	"prefix": "err_indicator_unknown_symbol",
	"body": "ERR_INDICATOR_UNKNOWN_SYMBOL"
},
"ERR_INDICATOR_CANNOT_CREATE": {
	"prefix": "err_indicator_cannot_create",
	"body": "ERR_INDICATOR_CANNOT_CREATE"
},
"ERR_INDICATOR_NO_MEMORY": {
	"prefix": "err_indicator_no_memory",
	"body": "ERR_INDICATOR_NO_MEMORY"
},
"ERR_INDICATOR_CANNOT_APPLY": {
	"prefix": "err_indicator_cannot_apply",
	"body": "ERR_INDICATOR_CANNOT_APPLY"
},
"ERR_INDICATOR_CANNOT_ADD": {
	"prefix": "err_indicator_cannot_add",
	"body": "ERR_INDICATOR_CANNOT_ADD"
},
"ERR_INDICATOR_DATA_NOT_FOUND": {
	"prefix": "err_indicator_data_not_found",
	"body": "ERR_INDICATOR_DATA_NOT_FOUND"
},
"ERR_INDICATOR_WRONG_HANDLE": {
	"prefix": "err_indicator_wrong_handle",
	"body": "ERR_INDICATOR_WRONG_HANDLE"
},
"ERR_INDICATOR_WRONG_PARAMETERS": {
	"prefix": "err_indicator_wrong_parameters",
	"body": "ERR_INDICATOR_WRONG_PARAMETERS"
},
"ERR_INDICATOR_PARAMETERS_MISSING": {
	"prefix": "err_indicator_parameters_missing",
	"body": "ERR_INDICATOR_PARAMETERS_MISSING"
},
"ERR_INDICATOR_CUSTOM_NAME": {
	"prefix": "err_indicator_custom_name",
	"body": "ERR_INDICATOR_CUSTOM_NAME"
},
"ERR_INDICATOR_PARAMETER_TYPE": {
	"prefix": "err_indicator_parameter_type",
	"body": "ERR_INDICATOR_PARAMETER_TYPE"
},
"ERR_INDICATOR_WRONG_INDEX": {
	"prefix": "err_indicator_wrong_index",
	"body": "ERR_INDICATOR_WRONG_INDEX"
},
"ERR_BOOKS_CANNOT_ADD": {
	"prefix": "err_books_cannot_add",
	"body": "ERR_BOOKS_CANNOT_ADD"
},
"ERR_BOOKS_CANNOT_DELETE": {
	"prefix": "err_books_cannot_delete",
	"body": "ERR_BOOKS_CANNOT_DELETE"
},
"ERR_BOOKS_CANNOT_GET": {
	"prefix": "err_books_cannot_get",
	"body": "ERR_BOOKS_CANNOT_GET"
},
"ERR_BOOKS_CANNOT_SUBSCRIBE": {
	"prefix": "err_books_cannot_subscribe",
	"body": "ERR_BOOKS_CANNOT_SUBSCRIBE"
},
"ERR_TOO_MANY_FILES": {
	"prefix": "err_too_many_files",
	"body": "ERR_TOO_MANY_FILES"
},
"ERR_WRONG_FILENAME": {
	"prefix": "err_wrong_filename",
	"body": "ERR_WRONG_FILENAME"
},
"ERR_TOO_LONG_FILENAME": {
	"prefix": "err_too_long_filename",
	"body": "ERR_TOO_LONG_FILENAME"
},
"ERR_CANNOT_OPEN_FILE": {
	"prefix": "err_cannot_open_file",
	"body": "ERR_CANNOT_OPEN_FILE"
},
"ERR_FILE_CACHEBUFFER_ERROR": {
	"prefix": "err_file_cachebuffer_error",
	"body": "ERR_FILE_CACHEBUFFER_ERROR"
},
"ERR_CANNOT_DELETE_FILE": {
	"prefix": "err_cannot_delete_file",
	"body": "ERR_CANNOT_DELETE_FILE"
},
"ERR_INVALID_FILEHANDLE": {
	"prefix": "err_invalid_filehandle",
	"body": "ERR_INVALID_FILEHANDLE"
},
"ERR_WRONG_FILEHANDLE": {
	"prefix": "err_wrong_filehandle",
	"body": "ERR_WRONG_FILEHANDLE"
},
"ERR_FILE_NOTTOWRITE": {
	"prefix": "err_file_nottowrite",
	"body": "ERR_FILE_NOTTOWRITE"
},
"ERR_FILE_NOTTOREAD": {
	"prefix": "err_file_nottoread",
	"body": "ERR_FILE_NOTTOREAD"
},
"ERR_FILE_NOTBIN": {
	"prefix": "err_file_notbin",
	"body": "ERR_FILE_NOTBIN"
},
"ERR_FILE_NOTTXT": {
	"prefix": "err_file_nottxt",
	"body": "ERR_FILE_NOTTXT"
},
"ERR_FILE_NOTTXTORCSV": {
	"prefix": "err_file_nottxtorcsv",
	"body": "ERR_FILE_NOTTXTORCSV"
},
"ERR_FILE_NOTCSV": {
	"prefix": "err_file_notcsv",
	"body": "ERR_FILE_NOTCSV"
},
"ERR_FILE_READERROR": {
	"prefix": "err_file_readerror",
	"body": "ERR_FILE_READERROR"
},
"ERR_FILE_BINSTRINGSIZE": {
	"prefix": "err_file_binstringsize",
	"body": "ERR_FILE_BINSTRINGSIZE"
},
"ERR_INCOMPATIBLE_FILE": {
	"prefix": "err_incompatible_file",
	"body": "ERR_INCOMPATIBLE_FILE"
},
"ERR_FILE_IS_DIRECTORY": {
	"prefix": "err_file_is_directory",
	"body": "ERR_FILE_IS_DIRECTORY"
},
"ERR_FILE_NOT_EXIST": {
	"prefix": "err_file_not_exist",
	"body": "ERR_FILE_NOT_EXIST"
},
"ERR_FILE_CANNOT_REWRITE": {
	"prefix": "err_file_cannot_rewrite",
	"body": "ERR_FILE_CANNOT_REWRITE"
},
"ERR_WRONG_DIRECTORYNAME": {
	"prefix": "err_wrong_directoryname",
	"body": "ERR_WRONG_DIRECTORYNAME"
},
"ERR_DIRECTORY_NOT_EXIST": {
	"prefix": "err_directory_not_exist",
	"body": "ERR_DIRECTORY_NOT_EXIST"
},
"ERR_FILE_ISNOT_DIRECTORY": {
	"prefix": "err_file_isnot_directory",
	"body": "ERR_FILE_ISNOT_DIRECTORY"
},
"ERR_CANNOT_DELETE_DIRECTORY": {
	"prefix": "err_cannot_delete_directory",
	"body": "ERR_CANNOT_DELETE_DIRECTORY"
},
"ERR_CANNOT_CLEAN_DIRECTORY": {
	"prefix": "err_cannot_clean_directory",
	"body": "ERR_CANNOT_CLEAN_DIRECTORY"
},
"ERR_FILE_WRITEERROR": {
	"prefix": "err_file_writeerror",
	"body": "ERR_FILE_WRITEERROR"
},
"ERR_FILE_ENDOFFILE": {
	"prefix": "err_file_endoffile",
	"body": "ERR_FILE_ENDOFFILE"
},
"ERR_NO_STRING_DATE": {
	"prefix": "err_no_string_date",
	"body": "ERR_NO_STRING_DATE"
},
"ERR_WRONG_STRING_DATE": {
	"prefix": "err_wrong_string_date",
	"body": "ERR_WRONG_STRING_DATE"
},
"ERR_WRONG_STRING_TIME": {
	"prefix": "err_wrong_string_time",
	"body": "ERR_WRONG_STRING_TIME"
},
"ERR_STRING_TIME_ERROR": {
	"prefix": "err_string_time_error",
	"body": "ERR_STRING_TIME_ERROR"
},
"ERR_STRING_OUT_OF_MEMORY": {
	"prefix": "err_string_out_of_memory",
	"body": "ERR_STRING_OUT_OF_MEMORY"
},
"ERR_STRING_SMALL_LEN": {
	"prefix": "err_string_small_len",
	"body": "ERR_STRING_SMALL_LEN"
},
"ERR_STRING_TOO_BIGNUMBER": {
	"prefix": "err_string_too_bignumber",
	"body": "ERR_STRING_TOO_BIGNUMBER"
},
"ERR_WRONG_FORMATSTRING": {
	"prefix": "err_wrong_formatstring",
	"body": "ERR_WRONG_FORMATSTRING"
},
"ERR_TOO_MANY_FORMATTERS": {
	"prefix": "err_too_many_formatters",
	"body": "ERR_TOO_MANY_FORMATTERS"
},
"ERR_TOO_MANY_PARAMETERS": {
	"prefix": "err_too_many_parameters",
	"body": "ERR_TOO_MANY_PARAMETERS"
},
"ERR_WRONG_STRING_PARAMETER": {
	"prefix": "err_wrong_string_parameter",
	"body": "ERR_WRONG_STRING_PARAMETER"
},
"ERR_STRINGPOS_OUTOFRANGE": {
	"prefix": "err_stringpos_outofrange",
	"body": "ERR_STRINGPOS_OUTOFRANGE"
},
"ERR_STRING_ZEROADDED": {
	"prefix": "err_string_zeroadded",
	"body": "ERR_STRING_ZEROADDED"
},
"ERR_STRING_UNKNOWNTYPE": {
	"prefix": "err_string_unknowntype",
	"body": "ERR_STRING_UNKNOWNTYPE"
},
"ERR_WRONG_STRING_OBJECT": {
	"prefix": "err_wrong_string_object",
	"body": "ERR_WRONG_STRING_OBJECT"
},
"ERR_INCOMPATIBLE_ARRAYS": {
	"prefix": "err_incompatible_arrays",
	"body": "ERR_INCOMPATIBLE_ARRAYS"
},
"ERR_SMALL_ASSERIES_ARRAY": {
	"prefix": "err_small_asseries_array",
	"body": "ERR_SMALL_ASSERIES_ARRAY"
},
"ERR_SMALL_ARRAY": {
	"prefix": "err_small_array",
	"body": "ERR_SMALL_ARRAY"
},
"ERR_ZEROSIZE_ARRAY": {
	"prefix": "err_zerosize_array",
	"body": "ERR_ZEROSIZE_ARRAY"
},
"ERR_NUMBER_ARRAYS_ONLY": {
	"prefix": "err_number_arrays_only",
	"body": "ERR_NUMBER_ARRAYS_ONLY"
},
"ERR_ONEDIM_ARRAYS_ONLY": {
	"prefix": "err_onedim_arrays_only",
	"body": "ERR_ONEDIM_ARRAYS_ONLY"
},
"ERR_SERIES_ARRAY": {
	"prefix": "err_series_array",
	"body": "ERR_SERIES_ARRAY"
},
"ERR_DOUBLE_ARRAY_ONLY": {
	"prefix": "err_double_array_only",
	"body": "ERR_DOUBLE_ARRAY_ONLY"
},
"ERR_FLOAT_ARRAY_ONLY": {
	"prefix": "err_float_array_only",
	"body": "ERR_FLOAT_ARRAY_ONLY"
},
"ERR_LONG_ARRAY_ONLY": {
	"prefix": "err_long_array_only",
	"body": "ERR_LONG_ARRAY_ONLY"
},
"ERR_INT_ARRAY_ONLY": {
	"prefix": "err_int_array_only",
	"body": "ERR_INT_ARRAY_ONLY"
},
"ERR_SHORT_ARRAY_ONLY": {
	"prefix": "err_short_array_only",
	"body": "ERR_SHORT_ARRAY_ONLY"
},
"ERR_CHAR_ARRAY_ONLY": {
	"prefix": "err_char_array_only",
	"body": "ERR_CHAR_ARRAY_ONLY"
},
"ERR_STRING_ARRAY_ONLY": {
	"prefix": "err_string_array_only",
	"body": "ERR_STRING_ARRAY_ONLY"
},
"ERR_OPENCL_NOT_SUPPORTED": {
	"prefix": "err_opencl_not_supported",
	"body": "ERR_OPENCL_NOT_SUPPORTED"
},
"ERR_OPENCL_INTERNAL": {
	"prefix": "err_opencl_internal",
	"body": "ERR_OPENCL_INTERNAL"
},
"ERR_OPENCL_INVALID_HANDLE": {
	"prefix": "err_opencl_invalid_handle",
	"body": "ERR_OPENCL_INVALID_HANDLE"
},
"ERR_OPENCL_CONTEXT_CREATE": {
	"prefix": "err_opencl_context_create",
	"body": "ERR_OPENCL_CONTEXT_CREATE"
},
"ERR_OPENCL_QUEUE_CREATE": {
	"prefix": "err_opencl_queue_create",
	"body": "ERR_OPENCL_QUEUE_CREATE"
},
"ERR_OPENCL_PROGRAM_CREATE": {
	"prefix": "err_opencl_program_create",
	"body": "ERR_OPENCL_PROGRAM_CREATE"
},
"ERR_OPENCL_TOO_LONG_KERNEL_NAME": {
	"prefix": "err_opencl_too_long_kernel_name",
	"body": "ERR_OPENCL_TOO_LONG_KERNEL_NAME"
},
"ERR_OPENCL_KERNEL_CREATE": {
	"prefix": "err_opencl_kernel_create",
	"body": "ERR_OPENCL_KERNEL_CREATE"
},
"ERR_OPENCL_SET_KERNEL_PARAMETER": {
	"prefix": "err_opencl_set_kernel_parameter",
	"body": "ERR_OPENCL_SET_KERNEL_PARAMETER"
},
"ERR_OPENCL_EXECUTE": {
	"prefix": "err_opencl_execute",
	"body": "ERR_OPENCL_EXECUTE"
},
"ERR_OPENCL_WRONG_BUFFER_SIZE": {
	"prefix": "err_opencl_wrong_buffer_size",
	"body": "ERR_OPENCL_WRONG_BUFFER_SIZE"
},
"ERR_OPENCL_WRONG_BUFFER_OFFSET": {
	"prefix": "err_opencl_wrong_buffer_offset",
	"body": "ERR_OPENCL_WRONG_BUFFER_OFFSET"
},
"ERR_OPENCL_BUFFER_CREATE": {
	"prefix": "err_opencl_buffer_create",
	"body": "ERR_OPENCL_BUFFER_CREATE"
},
"ERR_OPENCL_TOO_MANY_OBJECTS": {
	"prefix": "err_opencl_too_many_objects",
	"body": "ERR_OPENCL_TOO_MANY_OBJECTS"
},
"ERR_OPENCL_SELECTDEVICE": {
	"prefix": "err_opencl_selectdevice",
	"body": "ERR_OPENCL_SELECTDEVICE"
},
"ERR_DATABASE_INTERNAL": {
	"prefix": "err_database_internal",
	"body": "ERR_DATABASE_INTERNAL"
},
"ERR_DATABASE_INVALID_HANDLE": {
	"prefix": "err_database_invalid_handle",
	"body": "ERR_DATABASE_INVALID_HANDLE"
},
"ERR_DATABASE_TOO_MANY_OBJECTS": {
	"prefix": "err_database_too_many_objects",
	"body": "ERR_DATABASE_TOO_MANY_OBJECTS"
},
"ERR_DATABASE_CONNECT": {
	"prefix": "err_database_connect",
	"body": "ERR_DATABASE_CONNECT"
},
"ERR_DATABASE_EXECUTE": {
	"prefix": "err_database_execute",
	"body": "ERR_DATABASE_EXECUTE"
},
"ERR_DATABASE_PREPARE": {
	"prefix": "err_database_prepare",
	"body": "ERR_DATABASE_PREPARE"
},
"ERR_DATABASE_NO_MORE_DATA": {
	"prefix": "err_database_no_more_data",
	"body": "ERR_DATABASE_NO_MORE_DATA"
},
"ERR_DATABASE_STEP": {
	"prefix": "err_database_step",
	"body": "ERR_DATABASE_STEP"
},
"ERR_DATABASE_NOT_READY": {
	"prefix": "err_database_not_ready",
	"body": "ERR_DATABASE_NOT_READY"
},
"ERR_DATABASE_BIND_PARAMETERS": {
	"prefix": "err_database_bind_parameters",
	"body": "ERR_DATABASE_BIND_PARAMETERS"
},
"ERR_WEBREQUEST_INVALID_ADDRESS": {
	"prefix": "err_webrequest_invalid_address",
	"body": "ERR_WEBREQUEST_INVALID_ADDRESS"
},
"ERR_WEBREQUEST_CONNECT_FAILED": {
	"prefix": "err_webrequest_connect_failed",
	"body": "ERR_WEBREQUEST_CONNECT_FAILED"
},
"ERR_WEBREQUEST_TIMEOUT": {
	"prefix": "err_webrequest_timeout",
	"body": "ERR_WEBREQUEST_TIMEOUT"
},
"ERR_WEBREQUEST_REQUEST_FAILED": {
	"prefix": "err_webrequest_request_failed",
	"body": "ERR_WEBREQUEST_REQUEST_FAILED"
},
"ERR_NETSOCKET_INVALIDHANDLE": {
	"prefix": "err_netsocket_invalidhandle",
	"body": "ERR_NETSOCKET_INVALIDHANDLE"
},
"ERR_NETSOCKET_TOO_MANY_OPENED": {
	"prefix": "err_netsocket_too_many_opened",
	"body": "ERR_NETSOCKET_TOO_MANY_OPENED"
},
"ERR_NETSOCKET_CANNOT_CONNECT": {
	"prefix": "err_netsocket_cannot_connect",
	"body": "ERR_NETSOCKET_CANNOT_CONNECT"
},
"ERR_NETSOCKET_IO_ERROR": {
	"prefix": "err_netsocket_io_error",
	"body": "ERR_NETSOCKET_IO_ERROR"
},
"ERR_NETSOCKET_HANDSHAKE_FAILED": {
	"prefix": "err_netsocket_handshake_failed",
	"body": "ERR_NETSOCKET_HANDSHAKE_FAILED"
},
"ERR_NETSOCKET_NO_CERTIFICATE": {
	"prefix": "err_netsocket_no_certificate",
	"body": "ERR_NETSOCKET_NO_CERTIFICATE"
},
"ERR_NOT_CUSTOM_SYMBOL": {
	"prefix": "err_not_custom_symbol",
	"body": "ERR_NOT_CUSTOM_SYMBOL"
},
"ERR_CUSTOM_SYMBOL_WRONG_NAME": {
	"prefix": "err_custom_symbol_wrong_name",
	"body": "ERR_CUSTOM_SYMBOL_WRONG_NAME"
},
"ERR_CUSTOM_SYMBOL_NAME_LONG": {
	"prefix": "err_custom_symbol_name_long",
	"body": "ERR_CUSTOM_SYMBOL_NAME_LONG"
},
"ERR_CUSTOM_SYMBOL_PATH_LONG": {
	"prefix": "err_custom_symbol_path_long",
	"body": "ERR_CUSTOM_SYMBOL_PATH_LONG"
},
"ERR_CUSTOM_SYMBOL_EXIST": {
	"prefix": "err_custom_symbol_exist",
	"body": "ERR_CUSTOM_SYMBOL_EXIST"
},
"ERR_CUSTOM_SYMBOL_ERROR": {
	"prefix": "err_custom_symbol_error",
	"body": "ERR_CUSTOM_SYMBOL_ERROR"
},
"ERR_CUSTOM_SYMBOL_SELECTED": {
	"prefix": "err_custom_symbol_selected",
	"body": "ERR_CUSTOM_SYMBOL_SELECTED"
},
"ERR_CUSTOM_SYMBOL_PROPERTY_WRONG": {
	"prefix": "err_custom_symbol_property_wrong",
	"body": "ERR_CUSTOM_SYMBOL_PROPERTY_WRONG"
},
"ERR_CUSTOM_SYMBOL_PARAMETER_ERROR": {
	"prefix": "err_custom_symbol_parameter_error",
	"body": "ERR_CUSTOM_SYMBOL_PARAMETER_ERROR"
},
"ERR_CUSTOM_SYMBOL_PARAMETER_LONG": {
	"prefix": "err_custom_symbol_parameter_long",
	"body": "ERR_CUSTOM_SYMBOL_PARAMETER_LONG"
},
"ERR_CUSTOM_TICKS_WRONG_ORDER": {
	"prefix": "err_custom_ticks_wrong_order",
	"body": "ERR_CUSTOM_TICKS_WRONG_ORDER"
},
"ERR_CALENDAR_MORE_DATA": {
	"prefix": "err_calendar_more_data",
	"body": "ERR_CALENDAR_MORE_DATA"
},
"ERR_CALENDAR_TIMEOUT": {
	"prefix": "err_calendar_timeout",
	"body": "ERR_CALENDAR_TIMEOUT"
},
"ERR_CALENDAR_NO_DATA": {
	"prefix": "err_calendar_no_data",
	"body": "ERR_CALENDAR_NO_DATA"
},
"ERR_DATABASE_ERROR": {
	"prefix": "err_database_error",
	"body": "ERR_DATABASE_ERROR"
},
"ERR_DATABASE_PERM": {
	"prefix": "err_database_perm",
	"body": "ERR_DATABASE_PERM"
},
"ERR_DATABASE_ABORT": {
	"prefix": "err_database_abort",
	"body": "ERR_DATABASE_ABORT"
},
"ERR_DATABASE_BUSY": {
	"prefix": "err_database_busy",
	"body": "ERR_DATABASE_BUSY"
},
"ERR_DATABASE_LOCKED": {
	"prefix": "err_database_locked",
	"body": "ERR_DATABASE_LOCKED"
},
"ERR_DATABASE_NOMEM": {
	"prefix": "err_database_nomem",
	"body": "ERR_DATABASE_NOMEM"
},
"ERR_DATABASE_READONLY": {
	"prefix": "err_database_readonly",
	"body": "ERR_DATABASE_READONLY"
},
"ERR_DATABASE_INTERRUPT": {
	"prefix": "err_database_interrupt",
	"body": "ERR_DATABASE_INTERRUPT"
},
"ERR_DATABASE_IOERR": {
	"prefix": "err_database_ioerr",
	"body": "ERR_DATABASE_IOERR"
},
"ERR_DATABASE_CORRUPT": {
	"prefix": "err_database_corrupt",
	"body": "ERR_DATABASE_CORRUPT"
},
"ERR_DATABASE_NOTFOUND": {
	"prefix": "err_database_notfound",
	"body": "ERR_DATABASE_NOTFOUND"
},
"ERR_DATABASE_FULL": {
	"prefix": "err_database_full",
	"body": "ERR_DATABASE_FULL"
},
"ERR_DATABASE_CANTOPEN": {
	"prefix": "err_database_cantopen",
	"body": "ERR_DATABASE_CANTOPEN"
},
"ERR_DATABASE_PROTOCOL": {
	"prefix": "err_database_protocol",
	"body": "ERR_DATABASE_PROTOCOL"
},
"ERR_DATABASE_EMPTY": {
	"prefix": "err_database_empty",
	"body": "ERR_DATABASE_EMPTY"
},
"ERR_DATABASE_SCHEMA": {
	"prefix": "err_database_schema",
	"body": "ERR_DATABASE_SCHEMA"
},
"ERR_DATABASE_TOOBIG": {
	"prefix": "err_database_toobig",
	"body": "ERR_DATABASE_TOOBIG"
},
"ERR_DATABASE_CONSTRAINT": {
	"prefix": "err_database_constraint",
	"body": "ERR_DATABASE_CONSTRAINT"
},
"ERR_DATABASE_MISMATCH": {
	"prefix": "err_database_mismatch",
	"body": "ERR_DATABASE_MISMATCH"
},
"ERR_DATABASE_MISUSE": {
	"prefix": "err_database_misuse",
	"body": "ERR_DATABASE_MISUSE"
},
"ERR_DATABASE_NOLFS": {
	"prefix": "err_database_nolfs",
	"body": "ERR_DATABASE_NOLFS"
},
"ERR_DATABASE_AUTH": {
	"prefix": "err_database_auth",
	"body": "ERR_DATABASE_AUTH"
},
"ERR_DATABASE_FORMAT": {
	"prefix": "err_database_format",
	"body": "ERR_DATABASE_FORMAT"
},
"ERR_DATABASE_RANGE": {
	"prefix": "err_database_range",
	"body": "ERR_DATABASE_RANGE"
},
"ERR_DATABASE_NOTADB": {
	"prefix": "err_database_notadb",
	"body": "ERR_DATABASE_NOTADB"
},
"ERR_USER_ERROR_FIRST": {
	"prefix": "err_user_error_first",
	"body": "ERR_USER_ERROR_FIRST"
},

//	## Data Structures
"CArray" : {
	"prefix" : "carray",
	"body" : "CArray "
},
"CArrayChar" : {
	"prefix" : "carraychar",
	"body" : "CArrayChar "
},
"CArrayShort" : {
	"prefix" : "carrayshort",
	"body" : "CArrayShort "
},
"CArrayInt" : {
	"prefix" : "carrayint",
	"body" : "CArrayInt "
},
"CArrayLong" : {
	"prefix" : "carraylong",
	"body" : "CArrayLong "
},
"CArrayFloat" : {
	"prefix" : "carrayfloat",
	"body" : "CArrayFloat "
},
"CArrayDouble" : {
	"prefix" : "carraydouble",
	"body" : "CArrayDouble "
},
"CArrayString" : {
	"prefix" : "carraystring",
	"body" : "CArrayString "
},
"CArrayObj" : {
	"prefix" : "carrayobj",
	"body" : "CArrayObj "
},
"CList" : {
	"prefix" : "clist",
	"body" : "CList "
},
"CTreeNode" : {
	"prefix" : "ctreenode",
	"body" : "CTreeNode "
},
"CTree" : {
	"prefix" : "ctree",
	"body" : "CTree "
},

//## Data structures
// "MqlDateTime": {
// 	"prefix": "mqldatetime",
// 	"body": "MqlDateTime"
// },
// "MqlParam": {
// 	"prefix": "mqlparam",
// 	"body": "MqlParam"
// },
// "MqlRates": {
// 	"prefix": "mqlrates",
// 	"body": "MqlRates"
// },
// "MqlBookInfo": {
// 	"prefix": "mqlbookinfo",
// 	"body": "MqlBookInfo"
// },
// "MqlTradeRequest": {
// 	"prefix": "mqltraderequest",
// 	"body": "MqlTradeRequest"
// },
// "MqlTradeCheckResult": {
// 	"prefix": "mqltradecheckresult",
// 	"body": "MqlTradeCheckResult"
// },
// "MqlTradeResult": {
// 	"prefix": "mqltraderesult",
// 	"body": "MqlTradeResult"
// },
"MqlTradeTransaction": {
	"prefix": "mqltradetransaction",
	"body": "MqlTradeTransaction"
},
// "MqlTick": {
// 	"prefix": "mqltick",
// 	"body": "MqlTick"
// },
// "MqlCalendarCountry": {
// 	"prefix": "mqlcalendarcountry",
// 	"body": "MqlCalendarCountry"
// },
// "MqlCalendarEvent": {
// 	"prefix": "mqlcalendarevent",
// 	"body": "MqlCalendarEvent"
// },
// "MqlCalendarValue": {
// 	"prefix": "mqlcalendarvalue",
// 	"body": "MqlCalendarValue"
// },

//########################

"ENUM_CALENDAR_EVENT_FREQUENCY": {
	"prefix": "enum_calendar_event_frequency",
	"body": "ENUM_CALENDAR_EVENT_FREQUENCY"
},
"CALENDAR_FREQUENCY_NONE": {
	"prefix": "calendar_frequency_none",
	"body": "CALENDAR_FREQUENCY_NONE"
},
"CALENDAR_FREQUENCY_WEEK": {
	"prefix": "calendar_frequency_week",
	"body": "CALENDAR_FREQUENCY_WEEK"
},
"CALENDAR_FREQUENCY_MONTH": {
	"prefix": "calendar_frequency_month",
	"body": "CALENDAR_FREQUENCY_MONTH"
},
"CALENDAR_FREQUENCY_QUARTER": {
	"prefix": "calendar_frequency_quarter",
	"body": "CALENDAR_FREQUENCY_QUARTER"
},
"CALENDAR_FREQUENCY_YEAR": {
	"prefix": "calendar_frequency_year",
	"body": "CALENDAR_FREQUENCY_YEAR"
},
"CALENDAR_FREQUENCY_DAY": {
	"prefix": "calendar_frequency_day",
	"body": "CALENDAR_FREQUENCY_DAY"
},

//########################

"ENUM_CALENDAR_EVENT_TYPE": {
	"prefix": "enum_calendar_event_type",
	"body": "ENUM_CALENDAR_EVENT_TYPE"
},
"CALENDAR_TYPE_EVENT": {
	"prefix": "calendar_type_event",
	"body": "CALENDAR_TYPE_EVENT"
},
"CALENDAR_TYPE_INDICATOR": {
	"prefix": "calendar_type_indicator",
	"body": "CALENDAR_TYPE_INDICATOR"
},
"CALENDAR_TYPE_HOLIDAY": {
	"prefix": "calendar_type_holiday",
	"body": "CALENDAR_TYPE_HOLIDAY"
},

//########################

"ENUM_CALENDAR_EVENT_SECTOR": {
	"prefix": "enum_calendar_event_sector",
	"body": "ENUM_CALENDAR_EVENT_SECTOR"
},
"CALENDAR_SECTOR_NONE": {
	"prefix": "calendar_sector_none",
	"body": "CALENDAR_SECTOR_NONE"
},
"CALENDAR_SECTOR_MARKET": {
	"prefix": "calendar_sector_market",
	"body": "CALENDAR_SECTOR_MARKET"
},
"CALENDAR_SECTOR_GDP": {
	"prefix": "calendar_sector_gdp",
	"body": "CALENDAR_SECTOR_GDP"
},
"CALENDAR_SECTOR_JOBS": {
	"prefix": "calendar_sector_jobs",
	"body": "CALENDAR_SECTOR_JOBS"
},
"CALENDAR_SECTOR_PRICES": {
	"prefix": "calendar_sector_prices",
	"body": "CALENDAR_SECTOR_PRICES"
},
"CALENDAR_SECTOR_MONEY": {
	"prefix": "calendar_sector_money",
	"body": "CALENDAR_SECTOR_MONEY"
},
"CALENDAR_SECTOR_TRADE": {
	"prefix": "calendar_sector_trade",
	"body": "CALENDAR_SECTOR_TRADE"
},
"CALENDAR_SECTOR_GOVERNMENT": {
	"prefix": "calendar_sector_government",
	"body": "CALENDAR_SECTOR_GOVERNMENT"
},
"CALENDAR_SECTOR_BUSINESS": {
	"prefix": "calendar_sector_business",
	"body": "CALENDAR_SECTOR_BUSINESS"
},
"CALENDAR_SECTOR_CONSUMER": {
	"prefix": "calendar_sector_consumer",
	"body": "CALENDAR_SECTOR_CONSUMER"
},
"CALENDAR_SECTOR_HOUSING": {
	"prefix": "calendar_sector_housing",
	"body": "CALENDAR_SECTOR_HOUSING"
},
"CALENDAR_SECTOR_TAXES": {
	"prefix": "calendar_sector_taxes",
	"body": "CALENDAR_SECTOR_TAXES"
},
"CALENDAR_SECTOR_HOLIDAYS": {
	"prefix": "calendar_sector_holidays",
	"body": "CALENDAR_SECTOR_HOLIDAYS"
},

//########################

"ENUM_CALENDAR_EVENT_IMPORTANCE": {
	"prefix": "enum_calendar_event_importance",
	"body": "ENUM_CALENDAR_EVENT_IMPORTANCE"
},
"CALENDAR_IMPORTANCE_NONE": {
	"prefix": "calendar_importance_none",
	"body": "CALENDAR_IMPORTANCE_NONE"
},
"CALENDAR_IMPORTANCE_LOW": {
	"prefix": "calendar_importance_low",
	"body": "CALENDAR_IMPORTANCE_LOW"
},
"CALENDAR_IMPORTANCE_MODERATE": {
	"prefix": "calendar_importance_moderate",
	"body": "CALENDAR_IMPORTANCE_MODERATE"
},
"CALENDAR_IMPORTANCE_HIGH": {
	"prefix": "calendar_importance_high",
	"body": "CALENDAR_IMPORTANCE_HIGH"
},

//########################

"ENUM_CALENDAR_EVENT_UNIT": {
	"prefix": "enum_calendar_event_unit",
	"body": "ENUM_CALENDAR_EVENT_UNIT"
},
"CALENDAR_UNIT_NONE": {
	"prefix": "calendar_unit_none",
	"body": "CALENDAR_UNIT_NONE"
},
"CALENDAR_UNIT_PERCENT": {
	"prefix": "calendar_unit_percent",
	"body": "CALENDAR_UNIT_PERCENT"
},
"CALENDAR_UNIT_CURRENCY": {
	"prefix": "calendar_unit_currency",
	"body": "CALENDAR_UNIT_CURRENCY"
},
"CALENDAR_UNIT_HOUR": {
	"prefix": "calendar_unit_hour",
	"body": "CALENDAR_UNIT_HOUR"
},
"CALENDAR_UNIT_JOB": {
	"prefix": "calendar_unit_job",
	"body": "CALENDAR_UNIT_JOB"
},
"CALENDAR_UNIT_RIG": {
	"prefix": "calendar_unit_rig",
	"body": "CALENDAR_UNIT_RIG"
},
"CALENDAR_UNIT_USD": {
	"prefix": "calendar_unit_usd",
	"body": "CALENDAR_UNIT_USD"
},
"CALENDAR_UNIT_PEOPLE": {
	"prefix": "calendar_unit_people",
	"body": "CALENDAR_UNIT_PEOPLE"
},
"CALENDAR_UNIT_MORTGAGE": {
	"prefix": "calendar_unit_mortgage",
	"body": "CALENDAR_UNIT_MORTGAGE"
},
"CALENDAR_UNIT_VOTE": {
	"prefix": "calendar_unit_vote",
	"body": "CALENDAR_UNIT_VOTE"
},
"CALENDAR_UNIT_BARREL": {
	"prefix": "calendar_unit_barrel",
	"body": "CALENDAR_UNIT_BARREL"
},
"CALENDAR_UNIT_CUBICFEET": {
	"prefix": "calendar_unit_cubicfeet",
	"body": "CALENDAR_UNIT_CUBICFEET"
},
"CALENDAR_UNIT_POSITION": {
	"prefix": "calendar_unit_position",
	"body": "CALENDAR_UNIT_POSITION"
},
"CALENDAR_UNIT_BUILDING": {
	"prefix": "calendar_unit_building",
	"body": "CALENDAR_UNIT_BUILDING"
},

//########################

"ENUM_CALENDAR_EVENT_MULTIPLIER": {
	"prefix": "enum_calendar_event_multiplier",
	"body": "ENUM_CALENDAR_EVENT_MULTIPLIER"
},
"MULTIPLIER_NONE": {
	"prefix": "multiplier_none",
	"body": "MULTIPLIER_NONE"
},
"MULTIPLIER_THOUSANDS": {
	"prefix": "multiplier_thousands",
	"body": "MULTIPLIER_THOUSANDS"
},
"MULTIPLIER_MILLIONS": {
	"prefix": "multiplier_millions",
	"body": "MULTIPLIER_MILLIONS"
},
"MULTIPLIER_BILLIONS": {
	"prefix": "multiplier_billions",
	"body": "MULTIPLIER_BILLIONS"
},
"MULTIPLIER_TRILLIONS": {
	"prefix": "multiplier_trillions",
	"body": "MULTIPLIER_TRILLIONS"
},

//########################

"ENUM_CALENDAR_EVENT_IMPACT": {
	"prefix": "enum_calendar_event_impact",
	"body": "ENUM_CALENDAR_EVENT_IMPACT"
},
"CALENDAR_IMPACT_NA": {
	"prefix": "calendar_impact_na",
	"body": "CALENDAR_IMPACT_NA"
},
"CALENDAR_IMPACT_POSITIVE": {
	"prefix": "calendar_impact_positive",
	"body": "CALENDAR_IMPACT_POSITIVE"
},
"CALENDAR_IMPACT_NEGATIVE": {
	"prefix": "calendar_impact_negative",
	"body": "CALENDAR_IMPACT_NEGATIVE"
},

//########################

"ENUM_CALENDAR_EVENT_TIMEMODE": {
	"prefix": "enum_calendar_event_timemode",
	"body": "ENUM_CALENDAR_EVENT_TIMEMODE"
},
"CALENDAR_TIMEMODE_DATETIME": {
	"prefix": "calendar_timemode_datetime",
	"body": "CALENDAR_TIMEMODE_DATETIME"
},
"CALENDAR_TIMEMODE_DATE": {
	"prefix": "calendar_timemode_date",
	"body": "CALENDAR_TIMEMODE_DATE"
},
"CALENDAR_TIMEMODE_NOTIME": {
	"prefix": "calendar_timemode_notime",
	"body": "CALENDAR_TIMEMODE_NOTIME"
},
"CALENDAR_TIMEMODE_TENTATIVE": {
	"prefix": "calendar_timemode_tentative",
	"body": "CALENDAR_TIMEMODE_TENTATIVE"
},

//   #### Common Functions
"Alert": {
	"prefix": "alert",
	"body":["Alert(${1:argument}, ${2:...})$0"]
},
"CheckPointer": {
	"prefix": "checkpointer",
	"body":["CheckPointer(${1:object* anyobject})$0"]
},
"Comment": {
	"prefix": "comment",
	"body":["Comment(${1:argument}, ${2:...})$0"]
},
"CryptEncode": {
	"prefix": "cryptencode",
	"body":["CryptEncode(${1:ENUM_CRYPT_METHOD method}, ${2:const uchar& data[]}, ${3:const uchar& key[]}, ${4:uchar& result[]})$0"]
},
"CryptEncode2": {
	"prefix": "cryptencode",
	"body":["CryptEncode(${1:ENUM_CRYPT_METHOD method}, ${2:const uchar& data[]}, ${3:const uchar& key[]}, ${4:uchar& result[]})$0"]
},
"DebugBreak": {
	"prefix": "debugbreak",
	"body": "DebugBreak()$0"
},
"ExpertRemove": {
	"prefix": "expertremove",
	"body": "ExpertRemove()$0"
},
"GetPointer": {
	"prefix": "getpointer",
	"body":["GetPointer(${1:any_class anyobject})$0"]
},
"GetTickCount": {
	"prefix": "gettickcount",
	"body": "GetTickCount()$0"
},
"GetTickCount64": {
	"prefix": "gettickcount64",
	"body": "GetTickCount64()$0"
},
"GetMicrosecondCount": {
	"prefix": "getmicrosecondcount",
	"body": "GetMicrosecondCount()$0"
},
"MessageBox": {
	"prefix": "messagebox",
	"body":["MessageBox(${1:string text}, ${2:string caption=NULL}, ${3:int flags=0})$0"]
},
"PeriodSeconds": {
	"prefix": "periodseconds",
	"body":["PeriodSeconds(${1:ENUM_TIMEFRAMES period=PERIOD_CURRENT})$0"]
},
"PlaySound": {
	"prefix": "playsound",
	"body":["PlaySound(${1:string filename})$0"]
},
"Print": {
	"prefix": "print",
	"body":["Print(${1:argument}, ${2:...})$0"]
},
"PrintFormat": {
	"prefix": "printformat",
	"body":["PrintFormat(${1:string format_string}, ${2:...})$0"]
},
"ResetLastError": {
	"prefix": "resetlasterror",
	"body": "ResetLastError()$0"
},
"ResourceCreate": {
	"prefix": "resourcecreate",
	"body":["ResourceCreate(${1:const string resource_name}, ${2:const string path})$0"]
},
"ResourceFree": {
	"prefix": "resourcefree",
	"body":["ResourceFree(${1:const string resource_name})$0"]
},
"ResourceReadImage": {
	"prefix": "resourcereadimage",
	"body":["ResourceReadImage(${1:const string resource_name}, ${2:uint& data[]}, ${3:uint& width}, ${4:uint& height})$0"]
},
"ResourceSave": {
	"prefix": "resourcesave",
	"body":["ResourceSave(${1:const string resource_name}, ${2:const string file_name})$0"]
},
"SetUserError": {
	"prefix": "setusererror",
	"body":["SetUserError(${1:ushort user_error})$0"]
},
"SetReturnError": {
	"prefix": "setreturnerror",
	"body":["SetReturnError(${1:int ret_code})$0"]
},
"Sleep": {
	"prefix": "sleep",
	"body":["Sleep(${1:int milliseconds})$0"]
},
"TerminalClose": {
	"prefix": "terminalclose",
	"body":["TerminalClose(${1:int ret_code})$0"]
},
"TesterHideIndicators": {
	"prefix": "testerhideindicators",
	"body":["TesterHideIndicators(${1:bool hide})$0"]
},
"TesterStatistics": {
	"prefix": "testerstatistics",
	"body":["TesterStatistics(${1:ENUM_STATISTICS statistic_id})$0"]
},
"TesterStop": {
	"prefix": "testerstop",
	"body": "TesterStop()$0"
},
"TesterDeposit": {
	"prefix": "testerdeposit",
	"body":["TesterDeposit(${1:double money})$0"]
},
"TesterWithdrawal": {
	"prefix": "testerwithdrawal",
	"body":["TesterWithdrawal(${1:double money})$0"]
},
"TranslateKey": {
	"prefix": "translatekey",
	"body":["TranslateKey(${1:int key_code})$0"]
},
"ZeroMemory": {
	"prefix": "zeromemory",
	"body":["ZeroMemory(${1:void & variable})$0"]
},

//   ##### Array Functions 
"ArrayBsearch": {
	"prefix": "arraybsearch",
	"body":["ArrayBsearch(${1:const double& array[]}, ${2:double value})$0"]
},
"ArrayBsearch2": {
	"prefix": "arraybsearch",
	"body":["ArrayBsearch(${1:const float& array[]}, ${2:float value})$0"]
},
"ArrayBsearch3": {
	"prefix": "arraybsearch",
	"body":["ArrayBsearch(${1:const long& array[]}, ${2:long value})$0"]
},
"ArrayBsearch4": {
	"prefix": "arraybsearch",
	"body":["ArrayBsearch(${1:const int& array[]}, ${2:int value})$0"]
},
"ArrayBsearch5": {
	"prefix": "arraybsearch",
	"body":["ArrayBsearch(${1:const short& array[]}, ${2:short value})$0"]
},
"ArrayBsearch6": {
	"prefix": "arraybsearch",
	"body":["ArrayBsearch(${1:const char& array[]}, ${2:char value})$0"]
},
"ArrayCopy": {
	"prefix": "arraycopy",
	"body":["ArrayCopy(${1:void& dst_array[]}, ${2:const void& src_array[]}, ${3:int dst_start=0}, ${4:int src_start=0}, ${5:int count=WHOLE_ARRAY})$0"]
},
"ArrayCompare": {
	"prefix": "arraycompare",
	"body":["ArrayCompare(${1:const void& array1[]}, ${2:const void& array2[]}, ${3:int start1=0}, ${4:int start2=0}, ${5:int count=WHOLE_ARRAY})$0"]
},
"ArrayFree": {
	"prefix": "arrayfree",
	"body":["ArrayFree(${1:void& array[]})$0"]
},
"ArrayGetAsSeries": {
	"prefix": "arraygetasseries",
	"body":["ArrayGetAsSeries(${1:const void& array[]})$0"]
},
"ArrayInitialize": {
	"prefix": "arrayinitialize",
	"body":["ArrayInitialize(${1:char array[]}, ${2:char value})$0"]
},
"ArrayInitialize2": {
	"prefix": "arrayinitialize",
	"body":["ArrayInitialize(${1:short array[]}, ${2:short value})$0"]
},
"ArrayInitialize3": {
	"prefix": "arrayinitialize",
	"body":["ArrayInitialize(${1:int array[]}, ${2:int value})$0"]
},
"ArrayInitialize4": {
	"prefix": "arrayinitialize",
	"body":["ArrayInitialize(${1:long array[]}, ${2:long value})$0"]
},
"ArrayInitialize5": {
	"prefix": "arrayinitialize",
	"body":["ArrayInitialize(${1:float array[]}, ${2:float value})$0"]
},
"ArrayInitialize6": {
	"prefix": "arrayinitialize",
	"body":["ArrayInitialize(${1:double array[]}, ${2:double value})$0"]
},
"ArrayInitialize7": {
	"prefix": "arrayinitialize",
	"body":["ArrayInitialize(${1:bool array[]}, ${2:bool value})$0"]
},
"ArrayInitialize8": {
	"prefix": "arrayinitialize",
	"body":["ArrayInitialize(${1:uint array[]}, ${2:uint value})$0"]
},
"ArrayFill": {
	"prefix": "arrayfill",
	"body":["ArrayFill(${1:void& array[]}, ${2:int start}, ${3:int count}, ${4:void value})$0"]
},
"ArrayIsSeries": {
	"prefix": "arrayisseries",
	"body":["ArrayIsSeries(${1:const void& array[]})$0"]
},
"ArrayIsDynamic": {
	"prefix": "arrayisdynamic",
	"body":["ArrayIsDynamic(${1:const void& array[]})$0"]
},
"ArrayMaximum": {
	"prefix": "arraymaximum",
	"body":["ArrayMaximum(${1:const void& array[]}, ${2:int start=0}, ${3:int count=WHOLE_ARRAY})$0"]
},
"ArrayMinimum": {
	"prefix": "arrayminimum",
	"body":["ArrayMinimum(${1:const void& array[]}, ${2:int start=0}, ${3:int count=WHOLE_ARRAY})$0"]
},
"ArrayPrint": {
	"prefix": "arrayprint",
	"body":["ArrayPrint(${1:const void& array[]}, ${2:uint digits=_Digits}, ${3:const string separator=NULL}, ${4:ulong start=0}, ${5:ulong count=WHOLE_ARRAY}, ${6:ulong flags=ARRAYPRINT_HEADER|ARRAYPRINT_INDEX|ARRAYPRINT_LIMIT|ARRAYPRINT_ALIGN})$0"]
},
"ArrayRange": {
	"prefix": "arrayrange",
	"body":["ArrayRange(${1:const void& array[]}, ${2:int rank_index})$0"]
},
"ArrayResize": {
	"prefix": "arrayresize",
	"body":["ArrayResize(${1:void& array[]}, ${2:int new_size}, ${3:int reserve_size=0})$0"]
},
"ArrayInsert": {
	"prefix": "arrayinsert",
	"body":["ArrayInsert(${1:void& dst_array[]}, ${2:const void& src_array[]}, ${3:uint dst_start}, ${4:uint src_start=0}, ${5:uint count=WHOLE_ARRAY})$0"]
},
"ArrayRemove": {
	"prefix": "arrayremove",
	"body":["ArrayRemove(${1:void& array[]}, ${2:uint start}, ${3:uint count=WHOLE_ARRAY})$0"]
},
"ArrayReverse": {
	"prefix": "arrayreverse",
	"body":["ArrayReverse(${1:void& array[]}, ${2:uint start=0}, ${3:uint count=WHOLE_ARRAY})$0"]
},
"ArraySetAsSeries": {
	"prefix": "arraysetasseries",
	"body":["ArraySetAsSeries(${1:const void& array[]}, ${2:bool flag})$0"]
},
"ArraySize": {
	"prefix": "arraysize",
	"body":["ArraySize(${1:const void& array[]})$0"]
},
"ArraySort": {
	"prefix": "arraysort",
	"body":["ArraySort(${1:void& array[]})$0"]
},
"ArraySwap": {
	"prefix": "arrayswap",
	"body":["ArraySwap(${1:void& array1[]}, ${2:void& array2[]})$0"]
},

//   #### Conversion Functions
"CharToString": {
	"prefix": "chartostring",
	"body":["CharToString(${1:uchar char_code})$0"]
},
"DoubleToString": {
	"prefix": "doubletostring",
	"body":["DoubleToString(${1:double value}, ${2:int digits=8})$0"]
},
"EnumToString": {
	"prefix": "enumtostring",
	"body":["EnumToString(${1:any_enum value})$0"]
},
"NormalizeDouble": {
	"prefix": "normalizedouble",
	"body":["NormalizeDouble(${1:double value}, ${2:int digits})$0"]
},
"StringToDouble": {
	"prefix": "stringtodouble",
	"body":["StringToDouble(${1:string value})$0"]
},
"StringToInteger": {
	"prefix": "stringtointeger",
	"body":["StringToInteger(${1:string value})$0"]
},
"StringToTime": {
	"prefix": "stringtotime",
	"body":["StringToTime(${1:const string time_string})$0"]
},
"TimeToString": {
	"prefix": "timetostring",
	"body":["TimeToString(${1:datetime value}, ${2:int mode=TIME_DATE|TIME_MINUTES})$0"]
},
"IntegerToString": {
	"prefix": "integertostring",
	"body":["IntegerToString(${1:long number}, ${2:int str_len=0}, ${3:ushort fill_symbol=' '})$0"]
},
"ShortToString": {
	"prefix": "shorttostring",
	"body":["ShortToString(${1:ushort symbol_code})$0"]
},
"ShortArrayToString": {
	"prefix": "shortarraytostring",
	"body":["ShortArrayToString(${1:ushort array[]}, ${2:int start=0}, ${3:int count=-1})$0"]
},
"StringToShortArray": {
	"prefix": "stringtoshortarray",
	"body":["StringToShortArray(${1:string text_string}, ${2:ushort& array[]}, ${3:int start=0}, ${4:int count=-1})$0"]
},
"CharArrayToString": {
	"prefix": "chararraytostring",
	"body":["CharArrayToString(${1:uchar array[]}, ${2:int start=0}, ${3:int count=-1}, ${4:uint codepage=CP_ACP})$0"]
},
"StringToCharArray": {
	"prefix": "stringtochararray",
	"body":["StringToCharArray(${1:string text_string}, ${2:uchar& array[]}, ${3:int start=0}, ${4:int count=-1}, ${5:uint codepage=CP_ACP})$0"]
},
"CharArrayToStruct": {
	"prefix": "chararraytostruct",
	"body":["CharArrayToStruct(${1:void& struct_object}, ${2:const uchar& char_array[]}, ${3:uint start_pos=0})$0"]
},
"StructToCharArray": {
	"prefix": "structtochararray",
	"body":["StructToCharArray(${1:const void& struct_object}, ${2:uchar& char_array[]}, ${3:uint start_pos=0})$0"]
},
"ColorToARGB": {
	"prefix": "colortoargb",
	"body":["ColorToARGB(${1:color clr}, ${2:uchar alpha=255})$0"]
},
"ColorToString": {
	"prefix": "colortostring",
	"body":["ColorToString(${1:color color_value}, ${2:bool color_name})$0"]
},
"StringToColor": {
	"prefix": "stringtocolor",
	"body":["StringToColor(${1:string color_string})$0"]
},
"StringFormat": {
	"prefix": "stringformat",
	"body":["StringFormat(${1:string format}, ${2:... ...})$0"]
},

//   ##### Economic calendar functions
"CalendarCountryById": {
	"prefix": "calendarcountrybyid",
	"body":["CalendarCountryById(${1:const long country_id}, ${2:MqlCalendarCountry& country})$0"]
},
"CalendarEventById": {
	"prefix": "calendareventbyid",
	"body":["CalendarEventById(${1:ulong event_id}, ${2:MqlCalendarEvent& event})$0"]
},
"CalendarValueById": {
	"prefix": "calendarvaluebyid",
	"body":["CalendarValueById(${1:ulong value_id}, ${2:MqlCalendarValue& value})$0"]
},
"CalendarCountries": {
	"prefix": "calendarcountries",
	"body":["CalendarCountries(${1:MqlCalendarCountry& countries[]})$0"]
},
"CalendarEventByCountry": {
	"prefix": "calendareventbycountry",
	"body":["CalendarEventByCountry(${1:string country_code}, ${2:MqlCalendarEvent& events[]})$0"]
},
"CalendarEventByCurrency": {
	"prefix": "calendareventbycurrency",
	"body":["CalendarEventByCurrency(${1:const string currency}, ${2:MqlCalendarEvent& events[]})$0"]
},
"CalendarValueHistoryByEvent": {
	"prefix": "calendarvaluehistorybyevent",
	"body":["CalendarValueHistoryByEvent(${1:ulong event_id}, ${2:MqlCalendarValue& values[]}, ${3:datetime datetime_from}, ${4:datetime datetime_to=0})$0"]
},
"CalendarValueHistory": {
	"prefix": "calendarvaluehistory",
	"body":["CalendarValueHistory(${1:MqlCalendarValue& values[]}, ${2:datetime datetime_from}, ${3:datetime datetime_to=0}, ${4:const string country_code=NULL}, ${5:const string currency=NULL})$0"]
},
"CalendarValueLastByEvent": {
	"prefix": "calendarvaluelastbyevent",
	"body":["CalendarValueLastByEvent(${1:ulong event_id}, ${2:ulong& change_id}, ${3:MqlCalendarValue& values[]})$0"]
},
"CalendarValueLast": {
	"prefix": "calendarvaluelast",
	"body":["CalendarValueLast(${1:ulong& change_id}, ${2:MqlCalendarValue& values[]}, ${3:const string country_code=NULL}, ${4:const string currency=NULL})$0"]
},

//#### Trade Signals
"SignalBaseGetDouble": {
	"prefix": "signalbasegetdouble",
	"body":["SignalBaseGetDouble(${1:ENUM_SIGNAL_BASE_DOUBLE property_id})$0"]
},
"SignalBaseGetInteger": {
	"prefix": "signalbasegetinteger",
	"body":["SignalBaseGetInteger(${1:ENUM_SIGNAL_BASE_INTEGER property_id})$0"]
},
"SignalBaseGetString": {
	"prefix": "signalbasegetstring",
	"body":["SignalBaseGetString(${1:ENUM_SIGNAL_BASE_STRING property_id})$0"]
},
"SignalBaseSelect": {
	"prefix": "signalbaseselect",
	"body":["SignalBaseSelect(${1:int index})$0"]
},
"SignalBaseTotal": {
	"prefix": "signalbasetotal",
	"body": "SignalBaseTotal()$0"
},
"SignalInfoGetDouble": {
	"prefix": "signalinfogetdouble",
	"body":["SignalInfoGetDouble(${1:ENUM_SIGNAL_INFO_DOUBLE property_id})$0"]
},
"SignalInfoGetInteger": {
	"prefix": "signalinfogetinteger",
	"body":["SignalInfoGetInteger(${1:ENUM_SIGNAL_INFO_INTEGER property_id})$0"]
},
"SignalInfoGetString": {
	"prefix": "signalinfogetstring",
	"body":["SignalInfoGetString(${1:ENUM_SIGNAL_INFO_STRING property_id})$0"]
},
"SignalInfoSetDouble": {
	"prefix": "signalinfosetdouble",
	"body":["SignalInfoSetDouble(${1:ENUM_SIGNAL_INFO_DOUBLE property_id}, ${2:double value})$0"]
},
"SignalInfoSetInteger": {
	"prefix": "signalinfosetinteger",
	"body":["SignalInfoSetInteger(${1:ENUM_SIGNAL_INFO_INTEGER property_id}, ${2:long value})$0"]
},
"SignalSubscribe": {
	"prefix": "signalsubscribe",
	"body":["SignalSubscribe(${1:long signal_id})$0"]
},
"SignalUnsubscribe": {
	"prefix": "signalunsubscribe",
	"body": "SignalUnsubscribe()$0"
},





















//########################### OLD ###########################


	// default types
	"datetime": {
		"prefix": "datetime",
		"body": "datetime"
	},
	"color": {
		"prefix": "color",
		"body": "color"
	},
	"ulong": {
		"prefix": "ulong",
		"body": "ulong"
	},
	"ushort": {
		"prefix": "ushort",
		"body": "ushort"
	},
	"uchar": {
		"prefix": "uchar",
		"body": "uchar"
	},
	"uint": {
		"prefix": "uint",
		"body": "uint"
	},
	"string": {
		"prefix": "string",
		"body": "string"
	},
	"NULL": {
		"prefix": "null",
		"body": "NULL"
	},
	"include": {
		"prefix": "include",
		"body": "#include <${1:file_name.mqh}>$0",
		"description": "preprocessor include directive"
	},
	"dynamic_cast":{
		"prefix":"dynamic_cast",
		"body":"dynamic_cast<${1:type-id}>(${2:expression})$0",
		"description":["Dynamic typecasting is performed using dynamic_cast operator that can be applied only to pointers to classes.", 
			"Type validation is performed at runtime. This means that the compiler does not check the data type applied for typecasting when dynamic_cast operator is used.", 
			"If a pointer is converted to a data type which is not the actual type of an object, the result is NULL."
		]
	},

// order commands
	"OP_BUY": {
		"prefix":"opbuy",
		"body":"OP_BUY",
	},
	"OP_BUYLIMIT": {
		"prefix":"opbuylimit",
		"body":"OP_BUYLIMIT",
	},
	"OP_BUYSTOP": {
		"prefix":"opbuystop",
		"body":"OP_BUYSTOP",
	},
	"OP_SELL": {
		"prefix":"opsell",
		"body":"OP_SELL",
	},
	"OP_SELLLIMIT": {
		"prefix":"opselllimit",
		"body":"OP_SELLLIMIT",
	},
	"OP_SELLSTOP": {
		"prefix":"opsellstop",
		"body":"OP_SELLSTOP",
	},

// MQL structs
	"MqlDateTime": {
		"prefix": "mqldatetime",
		"body": "MqlDateTime $0",
		"description": "<struct> structure contains eight fields of the int type"
	},
	"MqlParam": {
		"prefix": "mqlparam",
		"body": "MqlParam $0",
		"description": "<struct> The MqlParam structure has been specially designed to provide input parameters when creating the handle of a technical indicator using the IndicatorCreate() function."
	},
	"MqlRates": {
		"prefix": "mqlrates",
		"body": "MqlRates $0",
		"description": "<struct> structure stores information about the prices, volumes and spread."
	},
	"MqlBookInfo": {
		"prefix": "mqlbookinfo",
		"body": "MqlBookInfo $0",
		"description": "<struct> provides information about the market depth data"
	},
	"MqlTradeRequest": {
		"prefix": "mqltraderequest",
		"body": "MqlTradeRequest $0",
		"description": "<struct> Interaction between the client terminal and a trade server for executing the order placing operation is performed by using trade requests. "
	},
	"MqlTradeCheckResult": {
		"prefix": "mqltradecheckresult",
		"body": "MqlTradeCheckResult $0",
		"description": "<struct> Before sending a request for a trade operation to a trade server, it is recommended to check it. The check is performed using the OrderCheck() function, to which the checked request and a variable of the MqlTradeCheckResult structure type are passed. The check result will be written to this variable."
	},
	"MqlTradeResult": {
		"prefix": "mqltraderesult",
		"body": "MqlTradeResult $0",
		"description": "<struct> As result of a trade request, a trade server returns data about the trade request processing result as a special predefined structure of MqlTradeResult type."
	},
	"MqlTick": {
		"prefix": "mqltick",
		"body": "MqlTick $0",
		"description": "<struct> This is a structure for storing the latest prices of the symbol. It is designed for fast retrieval of the most requested information about current prices."
	},
// Predefined variables
	"_Symbol":{
		"prefix":"symbol",
		"body":"_Symbol",
		"description":"<string> Returns the string value of the current symbol."
	},
	"_Digits": {
		"prefix": "digits",
		"body": "_Digits$0",
		"description": "<int> Number of decimal places"
	},
	"_Point": {
		"prefix": "point",
		"body": "_Point$0",
		"description": "<double> Size of the current symbol point in the quote currency"
	},
	"_LastError": {
		"prefix": "lasterror",
		"body": "_LastError$0",
		"description": "<int> last error code"
	},
	"_Period": {
		"prefix": "period",
		"body": "_Period$0",
		"description": "<ENUM_TIMEFRAMES> value of the timeframe of the current chart."
	},
	"_RandomSeed": {
		"prefix": "randomseed",
		"body": "_RandomSeed$0",
		"description": "<int> Variable for storing the current state when generating pseudo-random integers"
	},
	"_StopFlag": {
		"prefix": "stopflag",
		"body": "_StopFlag$0",
		"description": "<bool> contains the flag of the mql5-program stop"
	},
	"_UninitReason": {
		"prefix": "uninitreason",
		"body": "_UninitReason$0",
		"description": "<int> contains the code of the program uninitialization reason."
	},
	"_AppliedTo": {
		"prefix": "appliedto",
		"body": "_AppliedTo$0"
	},
	"_IsX64": {
		"prefix": "isx64",
		"body": "_IsX64$0"
	},

	//MQL4
	// "Bid": {
	// 	"prefix": "bid",
	// 	"body": "Bid$0",
	// 	"description": "<double> bid"
	// },
	// "Ask": {
	// 	"prefix": "ask",
	// 	"body": "Ask$0",
	// 	"description": "<double> ask"
	// },
	// // MQL4 built-in arrays
	// "Open[]": {
	// 	"prefix": "Open",
	// 	"body": "Open[${1:i}]$0",
	// 	"description": "<double> Series array that contains open prices of each bar of the current chart"
	// },
	// "High[]": {
	// 	"prefix": "High",
	// 	"body": "High[${1:i}]$0",
	// 	"description": "<double> Series array that contains high prices of each bar of the current chart"
	// },
	// "Low[]": {
	// 	"prefix": "Low",
	// 	"body": "Low[${1:i}]$0",
	// 	"description": "<double> Series array that contains low prices of each bar of the current chart"
	// },
	// "Close[]": {
	// 	"prefix": "Close",
	// 	"body": "Close[${1:i}]$0",
	// 	"description": "<double> Series array that contains close prices of each bar of the current chart"
	// },
	// "Time[]": {
	// 	"prefix": "Time",
	// 	"body": "Time[${1:i}]$0",
	// 	"description": "<datetime> Series array that contains time of each bar of the current chart"
	// },
	// "Volume[]": {
	// 	"prefix": "Volume",
	// 	"body": "Volume[${1:i}]$0",
	// 	"description": "<long> Series array that contains volume of each bar of the current chart"
	// },
// Common functions

	"Alert": {
		"prefix": "alert",
		"body": "Alert(${1:argument, ...})$0",
		"description": "<void> Displays a message in a separate window."
	},
	"Check Pointer": {
		"prefix": "checkpointer",
		"body": "CheckPointer(${1:object* anytype})$0",
		"description": "<ENUM_POINTER_TYPE> The function returns the type of the object pointer."
	},
	"Comment": {
		"prefix": "comment",
		"body": "Comment(${1:argument, ...})$0",
		"description": "<void> outputs a comment defined by a user in the top left corner of a chart."
	},
	"DebugBreak": {
		"prefix": "debugbreak",
		"body": "DebugBreak()$0",
		"description": "<void> sets a debug break point"
	},
	"ExpertRemove": {
		"prefix": "expertremove",
		"body": "ExpertRemove()$0",
		"description": "<void> stops an Expert Advisor and unloads it from a chart."
	},
	"GetPointer": {
		"prefix": "getpointer",
		"body": "GetPointer(${1:object anytype})$0",
		"description": "<void*> returns the object pointer."
	},
	"GetTickCount": {
		"prefix": "gettickcount",
		"body": "GetTickCount()$0",
		"description": "<uint> returns the number of milliseconds that elapsed since the system start"
	},
	"GetMicrosecondCount": {
		"prefix": "getmicrosecondcount",
		"body": "GetMicrosecondCount()$0",
		"description": "<ulong> returns the number of microseconds that have elapsed since the start of MQL5-program."
	},
	"MessageBox": {
		"prefix": "messagebox",
		"body": "MessageBox(${1:string  text}, ${2:caption=NULL}, ${3:int flags})$0",
		"description": "<int> creates and shows a message box and manages it.."
	},
	"PeriodSeconds": {
		"prefix": "periodseconds",
		"body": "PeriodSeconds(${1:ENUM_TIMEFRAMES=PERIOD_CURRENT})$0",
		"description": "<int> number of seconds in a period."
	},
	"PlaySound": {
		"prefix": "playsound",
		"body": "PlaySound(${1:string  filename})$0",
		"description": "<bool> plays a sound file."
	},
	"Print": {
		"prefix": "print",
		"body": "Print(${1:argument, ...})$0",
		"description": "<void> enters a message in the Expert Advisor log. Parameters can be of any type."
	},
	"PrintFormat": {
		"prefix": "printformat",
		"body": "PrintFormat(${1:string format_string}, ${2: ...})$0",
		"description": "<void> formats and enters sets of symbols and values in the Expert Advisor log in accordance with a preset format."
	},
	"ResetLastError": {
		"prefix": "resetlasterror",
		"body": "ResetLastError()$0",
		"description": "<void> Sets the value of the predefined variable _LastError into zero."
	},
	"SendNotification": {
		"prefix": "sendnotification",
		"body": "SendNotification(${1:string text})$0",
		"description": "<bool> Sends push notifications to the mobile terminals, whose MetaQuotes IDs are specified in the \"Notifications\" tab.."
	},
	"SendMail": {
		"prefix": "sendmail",
		"body": "SendMail(${1:string subject}, ${2:string text})$0",
		"description": "<bool> Sends an email at the address specified in the settings window of the Email tab."
	},
	"Sleep": {
		"prefix": "sleep",
		"body": "Sleep(${1:int milliseconds})$0",
		"description": "<void> The function suspends execution of the current Expert Advisor or script within a specified interval."
	},
	"TranslateKey": {
		"prefix": "translatekey",
		"body": "TranslateKey(${1:int key_code})$0",
		"description": "<short> Returns a Unicode character by a virtual key code considering the current input language and the status of control keys."
	},
	"WebRequest": {
		"prefix": "webrequest",
		"body": "WebRequest(${1:see docs})$0",
		"description": "<int> sends an HTTP request to a specified server. The function has two versions:"
	},
	"ZeroMemory": {
		"prefix": "zeromem",
		"body": "ZeroMemory(${1:void &variable})$0",
		"description": "<void> resets a variable passed to it by reference."
	},
// Array functions
	"ArraySize": {
		"prefix": "arraysize",
		"body": "ArraySize(${1:const void& array[]})",
		"description": "<int> The function returns the number of elements of a selected array.."
	},
	"ArrayGetAsSeries": {
		"prefix": "arraygetasseries",
		"body": "ArrayGetAsSeries(${1:const void& array[]})$0",
		"description": "<bool> It checks direction of an array index.."
	},
	"ArraySetAsSeries": {
		"prefix": "arraysetasseries",
		"body": "ArraySetAsSeries(${1:const void& array[]}, ${bool flag})$0",
		"description": "<bool> The function sets the AS_SERIES flag to a selected object of a dynamic array, and elements will be indexed like in timeseries."
	},
	"ArrayResize": {
		"prefix": "arrayresize",
		"body": "ArrayResize(${1:void& array[]}, ${2:int new_size},${3:reserved_size=0})$0",
		"description": "<int> The function sets a new size for the first dimension"
	},
	"ArrayInitialize": {
		"prefix": "arrayinit",
		"body": "ArrayInitialize(${1:T array[]}, ${2:T value})$0",
		"description": "<int> initializes a numeric array by a preset value."
	},
// Conversion functions
	"CharToString": {
		"prefix": "chartostring",
		"body": "CharToString(${1:uchar char_code})$0",
		"description": "<tostring> Converting a symbol code into a one-character string."
	},
	"CharArrayToString": {
		"prefix": "chararraytostring",
		"body": "CharArrayToString(${1:uchar array[]}, ${2:int start}, ${3:int count=1}, ${4:uint code_page=CP_ACP})$0",
		"description": "<string> It copies and converts part of array of uchar type into a returned string.."
	},
	"ColorToString": {
		"prefix": "colortostring",
		"body": "ColorToString(${1:color color}, ${2:bool show_color_name})$0",
		"description": "<string> It converts color value into string of R,G,B form."
	},
	"DoubleToString": {
		"prefix": "doubletostring",
		"body": "DoubleToString(${1:double value}, ${2:int digits=8})$0",
		"description": "<string> Converting numeric value into text string."
	},
	"EnumToString": {
		"prefix": "enumtostring",
		"body": "EnumToString(${1:any_enum value})$0",
		"description": "<string> Converting an enumeration value of any type to a text form."
	},
	"TimeToString": {
		"prefix": "timetostring",
		"body": "TimeToString(${1:datetime value}, ${2:int mode=TIME_DATE|TIME_MINUTES})$0",
		"description": "<string> Converting a value containing time in seconds elapsed since 01.01.1970 into a string of yyyy.mm.dd hh:mi format."
	},
	"NormalizeDouble": {
		"prefix": "normalizedouble",
		"body": "NormalizeDouble(${1:double value}, ${2:int digits})$0",
		"description": "<double> Rounding floating point number to a specified accuracy."
	},
	"StringToCharArray": {
		"prefix": "stringtochararray",
		"body": "StringToCharArray(${1:string text_string}, ${2:uchar& array[]}, ${3:int start=0}, ${4:int count=-1}, ${5:uint codepage=CP_ACP})$0",
		"description": "<int> Symbol-wise copies a string converted from Unicode to ANSI, to a selected place of array of uchar type. It returns the number of copied elements."
	},
	"StringToTime": {
		"prefix": "stringtotime",
		"body": "StringToTime(${1:string value})$0",
		"description": "<datetime> converts a string containing time or date in yyyy.mm.dd [hh:mi] format into datetime type."
	},
	"StringFormat": {
		"prefix": "stringformat",
		"body": "StringFormat(${1:string format}, ${2:params...})$0",
		"description": "<string> The function formats obtained parameters and returns a string."
	},
// Math functions
	// "MathAbs": {
	// 	"prefix": "math",
	// 	"body": "fabs(${1:double value})$0",
	// 	"description": "<double> The function returns the absolute value (modulus) of the specified numeric value."
	// },
	// "MathPow": {
	// 	"prefix": "math",
	// 	"body": "pow(${1:double base}, ${2:double exponent})$0",
	// 	"description": "<double> The function returns the absolute value (modulus) of the specified numeric value."
	// },
	// "MathArcsin": {
	// 	"prefix": "math",
	// 	"body": "asin(${1:double value})$0",
	// 	"description": "<double> returns the arc sine of x within the range of -π/2 to π/2 radians."
	// },
	// "MathArccos": {
	// 	"prefix": "math",
	// 	"body": "acos(${1:double value})$0",
	// 	"description": "<double> returns the arccosine of x within the range 0 to π in radians."
	// },
	// "MathCeil": {
	// 	"prefix": "math",
	// 	"body": "ceil(${1:double value})$0",
	// 	"description": "<double> returns integer numeric value closest from above."
	// },
	// "MathFloor": {
	// 	"prefix": "math",
	// 	"body": "floor(${1:double value})$0",
	// 	"description": "<double> returns integer numeric value closest from below."
	// },
	// "MathLog": {
	// 	"prefix": "math",
	// 	"body": "log(${1:double value})$0",
	// 	"description": "<double> returns a natural logarithm."
	// },
	// "MathLog10": {
	// 	"prefix": "math",
	// 	"body": "log10(${1:double value})$0",
	// 	"description": "<double> Returns the logarithm of a number by base 10."
	// },
	// "MathMax": {
	// 	"prefix": "math",
	// 	"body": "fmax(${1:double value1}, ${2:double value2})$0",
	// 	"description": " <double> returns the maximal value of two values."
	// },
	// "MathMin": {
	// 	"prefix": "math",
	// 	"body": "fmin(${1:double value1}, ${2:double value2})$0",
	// 	"description": "<double> returns the minimal value of two values."
	// },
	// "MathRand": {
	// 	"prefix": "math",
	// 	"body": "rand()$0",
	// 	"description": "<int> Returns a pseudorandom integer within the range of 0 to 32767."
	// },
	// "MathSrand": {
	// 	"prefix": "math",
	// 	"body": "srand(${int seed})$0",
	// 	"description": "<void> Sets the starting point for generating a series of pseudorandom integers."
	// },
	// "MathRound": {
	// 	"prefix": "math",
	// 	"body": "round(${1:double value})$0",
	// 	"description": "<double> returns a value rounded off to the nearest integer of the specified numeric value."
	// },
	// "MathIsValidNumber": {
	// 	"prefix": "math",
	// 	"body": "MathIsValidNumber(${1:double value})$0",
	// 	"description": "<bool> checks the correctness of a real number"
	// },
	// "MathSqrt": {
	// 	"prefix": "math",
	// 	"body": "sqrt(${1:double value})$0",
	// 	"description": "<double> Returns the square root of a number."
	// },
// Time functions
	"TimeCurrentStruct": {
		"prefix": "timecurrent",
		"body": "TimeCurrent(${1:MqlDateTime struct})$0",
		"description": "<datetime> MqlDateTime structure type variable has been passed as a parameter, it is filled accordingly"
	},
	"TimeCurrent": {
		"prefix": "timecurrent",
		"body": "TimeCurrent()$0",
		"description": "<datetime> Returns the last known server time"
	},
	"TimeTradeServer": {
		"prefix": "timetradeserver",
		"body": "TimeTradeServer()$0",
		"description": "<datetime> Returns the calculated current time of the trade server"
	},
	"TimeLocal": {
		"prefix": "timelocal",
		"body": "TimeLocal()$0",
		"description": "<datetime> Returns the local time of a computer"
	},
	"TimeLocal Struct": {
		"prefix": "timelocal",
		"body": "TimeLocal(${1:MqlDateTime &struct})$0",
		"description": "<datetime> Returns the local time of a computer; fills struct"
	},
	"TimeGMT": {
		"prefix": "timegmt",
		"body": "TimeGMT()$0",
		"description": "<datetime> Returns the GMT, which is calculated taking into account the DST switch by the local time on the computer where the client terminal is running."
	},
	"TimeGMT Struct": {
		"prefix": "timegmt",
		"body": "TimeGMT(${1:MqlDateTime &struct})$0",
		"description": "<datetime> Returns the GMT, which is calculated taking into account the DST switch by the local time on the computer where the client terminal is running."
	},
	"TimeDaylightSavings": {
		"prefix": "timedaylight",
		"body": "TimeDaylightSavings()$0",
		"description": "<datetime> Returns correction for daylight saving time in seconds, if the switch to summer time has been made."
	},
	"TimeGMTOffset": {
		"prefix": "timegmtoffest",
		"body": "TimeGMTOffset()$0",
		"description": "<datetime> Returns the current difference between GMT time and the local computer time in seconds"
	},
	"TimeToStruct": {
		"prefix": "timetostruct",
		"body": "TimeToStruct(${1:datetime dt}, ${2:MqlDateTime &struct})$0",
		"description": "<bool> Converts a value of datetime type (number of seconds since 01.01.1970) into a structure variable MqlDateTime."
	},
	"StructToTime": {
		"prefix": "structotime",
		"body": "StructToTime(${1:MqlDateTime &struct})$0",
		"description": "<datetime> Converts a structure variable MqlDateTime into a value of datetime type and returns the resulting value."
	},
	// String Functions
	"StringAdd": {
		"prefix": "stringadd",
		"body": "StringAdd(${1:string& str_var}, ${2:string add_substring})$0",
		"description": "<bool> adds a substring to the end of a string."
	},
	"StringBufferLen": {
		"prefix": "stringbufferlen",
		"body": "StringBufferLen(${1:string string_var})$0",
		"description": "<int> returns the size of buffer allocated for the string."
	},
	"StringCompare": {
		"prefix": "stringcompare",
		"body": "StringCompare(${1:string str1}, ${2:string str2},${bool case_sensitive=true})$0",
		"description": "<int> compares two strings and returns the comparison result in form of an integer.Case sensitivity mode selection. If it is true, then A>a. If it is false, then A=a."
	},
	"StringFill": {
		"prefix": "stringfill",
		"body": "StringFill(${1:string& str_var}, ${2:ushort character})$0",
		"description": "<bool> It fills out a selected string by specified symbols"
	},
	"StringFind": {
		"prefix": "stringfind",
		"body": "StringFind(${1:string value}, ${2:string match_substring},${3:int start_pos=0})$0",
		"description": "<int> Search for a substring in a string."
	},
	"StringGetCharacter": {
		"prefix": "stringgetchar",
		"body": "StringGetCharacter(${1:string str_var}, ${2:int pos})$0",
		"description": "<ushort> returns value of a symbol, located in the specified position of a string."
	},
	"StringLen": {
		"prefix": "stringlen",
		"body": "StringLen(${1:string str_var})$0",
		"description": "<int> Returns the number of symbols in a string"
	},
	"StringReplace": {
		"prefix": "stringreplace",
		"body": "StringReplace(${1:string& str}, ${2:string find}, ${3:string replace})$0",
		"description": [
			"<int> replaces all the found substrings of a string by a set sequence of symbols.",
			"The function returns the number of replacements in case of success, otherwise -1. To get an error code call the GetLastError() function."
		]
	},
	"StringSplit": {
		"prefix": "stringsplit",
		"body": "StringSplit(${1:string str}, ${2:ushort separator}, ${3:string &result[]})$0",
		"description": "<int> Gets substrings by a specified separator from the specified string, returns the number of substrings obtained."
	},
	"StringSubstr": {
		"prefix": "stringsub",
		"body": "StringSubstr(${1:string str}, ${2:int start_pos}, ${3:int length=-1)$0",
		"description": "<string> Extracts a substring from a text string starting from the specified position."
	},
	"StringToLower": {
		"prefix": "stringtolower",
		"body": "StringToLower(${1:string& str})$0",
		"description": "<bool> Transforms all symbols of a selected string into lowercase."
	},
	"StringToUpper": {
		"prefix": "stringtoupper",
		"body": "StringToUpper(${1:string& str})$0",
		"description": "<bool> Transforms all symbols of a selected string into capitals."
	},
	"StringTrimRight": {
		"prefix": "stringtrimright",
		"body": "StringTrimRight(${1:string& str})$0",
		"description": "<int> The function cuts line feed characters, spaces and tabs in the right part of the string after the last meaningful symbol. The string is modified at place."
	},
	"StringTrimLeft": {
		"prefix": "stringtrimleft",
		"body": "StringTrimLeft(${1:string& str})$0",
		"description": "<int> The function cuts line feed characters, spaces and tabs in the left part of the string till the first meaningful symbol. The string is modified at place."
	},
// Account info
	"AccountInfoDouble": {
		"prefix": "accountinfodouble",
		"body": "AccountInfoDouble(${1:ENUM_ACOUNT_INFO_DOUBLE property_id})$0",
		"description": "<double> Returns the value of the corresponding account property."
	},
	"AccountInfoInteger": {
		"prefix": "accountinfoint",
		"body": "AccountInfoInteger(${1:ENUM_ACOUNT_INFO_INTEGER  property_id})$0",
		"description": "<long> Returns the value of the corresponding account property."
	},
	"AccountInfoString": {
		"prefix": "accountinfostring",
		"body": "AccountInfoString(${1:ENUM_ACOUNT_INFO_STRING  property_id})$0",
		"description": "<string> Returns the value of the corresponding account property."
	},

// Terminal Info
	"GetLastError": {
		"prefix": "getlasterror",
		"body": "GetLastError()$0",
		"description": "<int> Returns the contents of the system variable _LastError"
	},
	"IsStopped": {
		"prefix": "isstopped",
		"body": "IsStopped()$0",
		"description": "<bool> Checks the forced shutdown of an mql5 program"
	},
	"UninitializeReason": {
		"prefix": "uninitreason",
		"body": "UninitializeReason()$0",
		"description": "<int> Returns the code of a reason for deinitialization."
	},
	"TerminalInfoInteger": {
		"prefix": "terminalinfoint",
		"body": "TerminalInfoInteger(${1:int property_id})$0",
		"description": "<long> Returns the value of a corresponding property of the mql5 program environment"
	},
	"TerminalInfoDouble": {
		"prefix": "terminalinfodouble",
		"body": "TerminalInfoDouble(${1:int property_id})$0",
		"description": "<double> Returns the value of a corresponding property of the mql5 program environment"
	},
	"TerminalInfoString": {
		"prefix": "terminalinfostring",
		"body": "TerminalInfoString(${1:int property_id})$0",
		"description": "<string> Returns the value of a corresponding property of the mql5 program environment"
	},
	"MQLInfoInteger": {
		"prefix": "mqlinfoint",
		"body": "MQLInfoInteger(${1:int property_id})$0",
		"description": "<int> Returns the value of a corresponding property of a running mql5 program."
	},
	"MQLInfoString": {
		"prefix": "mqlinfostring",
		"body": "MQLInfoString(${1:int property_id})$0",
		"description": "<string> Returns the value of a corresponding property of a running mql5 program."
	},
//Symbol info
	"SymbolsTotal": {
		"prefix": "symbolstotal",
		"body": "SymbolsTotal(${1:bool selected})$0",
		"description": "<int> Returns the number of available (selected in Market Watch or all) symbols."
	},
	"SymbolName": {
		"prefix": "symbolname",
		"body": "SymbolName(${1:int pos}, ${2:bool selected})$0",
		"description": "<string> returns the name of the symbol from the marketwatch window."
	},
	"SymbolSelect": {
		"prefix": "symbolselect",
		"body": "SymbolSelect(${1:string name}, ${2:bool select})$0",
		"description": "<bool> Selects a symbol in the Market Watch window or removes a symbol from the window."
	},
	"SymbolIsSynchronized": {
		"prefix": "symbolissync",
		"body": "SymbolIsSynchronized(${1:string name})$0",
		"description": "<bool> The function checks whether data of a selected symbol in the terminal are synchronized with data on the trade server."
	},
	"SymbolInfoTick": {
		"prefix": "symbolinfotick",
		"body": "SymbolInfoTick(${1:string name}, ${2:MqlTick& tick})$0",
		"description": "<bool> returns current prices of a specified symbol in a variable of the MqlTick type."
	},
	"MarketBookAdd": {
		"prefix": "marketbookadd",
		"body": "MarketBookAdd(${1:string name})$0",
		"description": "<bool> Provides opening of Depth of Market for a selected symbol, and subscribes for receiving notifications of the DOM changes."
	},
	"MarketBookRelease": {
		"prefix": "marketbookrelease",
		"body": "MarketBookRelease(${1:string name})$0",
		"description": "<bool> Provides closing of Depth of Market for a selected symbol, and cancels the subscription for receiving notifications of the DOM changes."
	},
	"MarketBookGet": {
		"prefix": "marketbookget",
		"body": "MarketBookGet(${1:string name}, ${2:MqlBookInfo&  book[]})$0",
		"description": "<bool> Returns a structure array MqlBookInfo containing records of the Depth of Market of a specified symbol."
	},
	"SymbolInfoInteger": {
		"prefix": "symbolinfoint",
		"body": "SymbolInfoInteger(${1:string name}, ${2:ENUM_SYMBOL_INFO_STRING prop_id})$0",
		"description": "<long> Returns the corresponding property of a specified symbol."
	},
	"SymbolInfoString": {
		"prefix": "symbolinfostr",
		"body": "SymbolInfoString(${1:string name}, ${2:ENUM_SYMBOL_INFO_INTEGER prop_id})$0",
		"description": "<string> Returns the corresponding property of a specified symbol."
	},
	"SymbolInfoDouble": {
		"prefix": "symbolinfodouble",
		"body": "SymbolInfoDouble(${1:string name}, ${2:ENUM_SYMBOL_INFO_DOUBLE prop_id})$0",
		"description": "<double> Returns the corresponding property of a specified symbol."
	},


// bars
	"Bars_From_To": {
		"prefix": "bars",
		"body": "Bars(${1:string name}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:datetime start_time}, ${4:datetime stop_time})$0",
		"description": "<int> Returns the number of bars count in the history for a specified symbol and period."
	},
	"Bars": {
		"prefix": "bars",
		"body": "Bars(${1:string name}, ${2:ENUM_TIMEFRAMES timeframe})$0",
		"description": "<int> Returns the number of bars count in the history for a specified symbol and period."
	},
	"BarsCalculated": {
		"prefix": "barscalculated",
		"body": "BarsCalculated(${1:int ind_handle})$0",
		"description": "<int> Returns the number of calculated data for the specified indicator"
	},
	"IndicatorRelease": {
		"prefix": "indicatorrelease",
		"body": "IndicatorRelease(${1:int ind_handle})$0",
		"description": "<bool> removes an indicator handle and releases the calculation block of the indicator, if it's not used by anyone else."
	},
	"CopyTicks": {
		"prefix": "copyticks",
		"body": "CopyTicks(${1:string symbol}, ${2:MqlTick& tickarray[]}, ${3:uint flags=COPY_TICKS_ALL}, ${4:ulong from=0}, ${5:uint count=0})$0",
		"description": "<int> receives ticks in the MqlTick format into ticks_array."
	},
	"CopyBuffer": {
		"prefix": "copybuffer",
		"body": "CopyBuffer(${1:int handle}, ${2:int buffer_number}, ${3:int start_pos|datetime start_time}, ${4:int count|datetime stop_time}, ${5:double buffer[]})$0",
		"description": "<int> Gets data of a specified buffer of a certain indicator in the necessary quantity."
	},
	"CopyRates": {
		"prefix": "copyrates",
		"body": "CopyRates(${1:string symbol}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:int start_pos|datetime start_time}, ${4:int count|datetime stop_time}, ${5:MqlRates rates_array[]})$0",
		"description": "<int> Gets history data of MqlRates structure of a specified symbol-period in specified quantity into the rates_array array. The elements ordering of the copied data is from present to the past, i.e., starting position of 0 means the current bar."
	},
	"EventSetMillisecondTimer": {
		"prefix": "eventsetmillisecond",
		"body": "EventSetMillisecondTimer(${1:int milliseconds})$0",
		"description": "<bool> indicates to the client terminal that timer events should be generated at intervals less than one second for this Expert Advisor or indicator."
	},
	"EventSetTimer": {
		"prefix": "eventsetimer",
		"body": "EventSetTimer(${1:int seconds})$0",
		"description": "<bool> indicates to the client terminal, that for this indicator or Expert Advisor, events from the timer must be generated with the specified periodicity."
	},
	"EventKillTimer": {
		"prefix": "eventkilltimer",
		"body": "EventKillTimer()$0",
		"description": "<bool> Specifies the client terminal that is necessary to stop the generation of events from Timer."
	},
	"EventChartCustom": {
		"prefix": "eventchartcustom",
		"body": "EventChartCustom()$0",
		"description": "<bool> The function generates a custom event for the specified chart."
	},
// MQL4 order functions
	"OrderClose": {
		"prefix": "orderclose",
		"body": "OrderClose(${1:int ticket}, ${2:double lots}, ${3:double price}, ${4:int slippage}, ${5:color arrow_color=clrNone})$0",
		"description": "<bool> Closes opened order."
	},
	"OrderCloseBy": {
		"prefix": "orderclose",
		"body": "OrderCloseBy(${1:int ticket}, ${2:int opposite}, ${3:color arrow_color=clrNone})$0",
		"description": "<bool> Closes an opened order by another opposite opened order."
	},

	"OrderClosePrice": {
		"prefix": "ordercloseprice",
		"body": "OrderClosePrice()$0",
		"description": "<double> Returns close price of the currently selected order. If the order is live this will return the price of which it is to be closed."
	},
	"OrderCloseTime": {
		"prefix": "orderclosetime",
		"body": "OrderCloseTime(${1:int ticket}, ${2:double lots}, ${3:double price}, ${4:int slippage}, ${5:color arrow_color})$0",
		"description": "<datetime> Returns close time of the currently selected order."
	},

	"OrderComment": {
		"prefix": "ordercomment",
		"body": "OrderComment()$0",
		"description": "<string> Returns comment of the currently selected order."
	},

	"OrderCommission": {
		"prefix": "ordercommission",
		"body": "OrderCommission()$0",
		"description": "<double> Returns calculated commission of the currently selected order."
	},

	"OrderDelete": {
		"prefix": "orderdelete",
		"body": "OrderDelete(${1:int ticket}, ${5:color arrow_color=clrNone})$0",
		"description": "<bool> Deletes previously opened pending order."
	},

	"OrderExpiration": {
		"prefix": "orderexpiration",
		"body": "OrderExpiration()$0",
		"description": "<datetime> Returns expiration date of the selected pending order."
	},

	"OrderLots": {
		"prefix": "orderlots",
		"body": "OrderLots()$0",
		"description": "<double> Returns amount of lots of the selected order."
	},
	
	"OrderMagicNumber": {
		"prefix": "ordermagicnumber",
		"body": "OrderMagicNumber()$0",
		"description": "<int> Returns an identifying (magic) number of the currently selected order."
	},
	"OrderModify": {
		"prefix": "ordermodify",
		"body": "OrderModify(${1:int ticket}, ${2:double price}, ${3:double stoploss}, ${4:double takeprofit}, ${5:datetime expiration}, ${6:color arrow_color=clrNone})$0",
		"description": "<bool> Modification of characteristics of the previously opened or pending orders."
	},
	"OrderOpenPrice": {
		"prefix": "orderopenprice",
		"body": "OrderOpenPrice()$0",
		"description": "<double> Returns open price of the currently selected order."
	},
	"OrderOpenTime": {
		"prefix": "orderopentime",
		"body": "OrderOpenTime()$0",
		"description": "<datetime> Returns open time of the currently selected order."
	},
	"OrderPrint": {
		"prefix": "orderprint",
		"body": "OrderPrint()$0",
		"description": "<void> Prints information about the selected order in the log."
	},
	"OrderProfit": {
		"prefix": "orderprofit",
		"body": "OrderProfit()$0",
		"description": "<double> Returns profit of the currently selected order."
	},
	"OrdersHistoryTotal": {
		"prefix": "ordershistorytotal",
		"body": "OrdersHistoryTotal)$0",
		"description": "<int> Returns the number of closed orders in the account history loaded into the terminal. "
	},
	"OrderStopLoss": {
		"prefix": "orderstoploss",
		"body": "OrderStopLoss(${1:int ticket}, ${2:double lots}, ${3:double price}, ${4:int slippage}, ${5:color arrow_color})$0",
		"description": "<double> Returns stoploss of the currently selected order."
	},
	"OrderSwap": {
		"prefix": "orderswap",
		"body": "OrderSwap()$0",
		"description": "<double> Returns swap value of the currently selected order."
	},
	"OrderTakeProfit": {
		"prefix": "ordertakeprofit",
		"body": "OrderTakeProfit()$0",
		"description": "<datetime> Returns take profit value of the currently selected order."
	},
	"OrderSymbol": {
		"prefix": "ordersymbol",
		"body": "OrderSymbol()$0",
		"description": "<string> Returns symbol of the currently selected order."
	},
	"OrderTicket": {
		"prefix": "orderticket",
		"body": "OrderTicket()$0",
		"description": "<int> Returns order ticket number of the currently selected order."
	},
	"OrderType": {
		"prefix": "ordertype",
		"body": "OrderType()$0",
		"description": "<int> Returns order operation type of the currently selected order. OP_BUY=buy-order, OP_SELL=sell-order, OP_BUYLIMIT=buy-limit, OP_BUYSTOP=buy-stop, OP_SELLLIMIT=sell-limit, OP_SELLSTOP=sell-stop."
	},

// // iIndicators MQL4
// 	"iATR":{
// 		"prefix":"indicator",
// 		"body":"iATR(${1:string symbol}, ${2:int timeframe}, ${3:int period}, ${4:int shift})$0",
// 		"description":"<double> Calculates the Average True Range indicator and returns its value"
// 	},
// 	"iADX":{
// 		"prefix":"indicator",
// 		"body":"iADX(${1:string symbol}, ${2:int timeframe}, ${3:int period}, ${4:int applied_price}, ${5:int mode}, ${6:int shift})$0",
// 		"description":"<double> Calculates the Average Directional Movement Index indicator and returns its value."
// 	},
// 	"iBands":{
// 		"prefix":"indicator",
// 		"body":"iBands(${1:string symbol}, ${2:int timeframe}, ${3:int period}, ${4:double deviation}, ${5:int bands_shift}, ${6:int applied_price}, ${7:int mode}, ${8:int shift})$0",
// 		"description":"<double> Calculates the Bollinger Bands® indicator and returns its value."
// 	},
// 	"iCustom":{
// 		"prefix":"indicator",
// 		"body":"iCustom(${1:string symbol}, ${2:int timeframe}, ${3:string name}, ${4: ... }, ${5:int buffer_index}, ${6:int shift})$0",
// 		"description":"<double> Calculates the specified custom indicator and returns its value. The custom indicator must be compiled (*.EX4 file) and be in the terminal_directory\\MQL4\\Indicators\\ directory."
// 	},

// 	"iMA":{
// 		"prefix":"indicator",
// 		"body":"iMA(${1:string symbol}, ${2:int timeframe}, ${3:int ma_period}, ${4:int ma_shift}, ${5:int ma_method}, ${6:int applied_price}, ${7:int shift})$0",
// 		"description":"<double> Calculates the Moving Average indicator and returns its value. eg. iMA(NULL,0,13,8,MODE_SMMA,PRICE_MEDIAN,i);"
// 	},

// 	"iRSI":{
// 		"prefix":"indicator",
// 		"body":"iRSI(${1:string symbol}, ${2:int timeframe}, ${3:int period}, ${4:int applied_price}, ${5:int shift})$0",
// 		"description":"<double> Calculates the RSI indicator and returns its value."
// 	},
// 	"iStochastic":{
// 		"prefix":"indicator",
// 		"body":"iStochastic(${1:string symbol}, ${2:int timeframe}, ${3:int Kperiod}, ${4:int Dperiod}, ${5:int slowing}, ${5:int method}, ${6:int price_field}, ${7:int mode}, ${8:int shift})$0",
// 		"description":"<double> Calculates the Moving Average indicator and returns its value. eg. iMA(NULL,0,13,8,MODE_SMMA,PRICE_MEDIAN,i);"
// 	},

// Common MQL4 code snippets
	"for forward": {
		"prefix": "for",
		"body": [
			"for(int i=0;i < ${1:int max_iter};i++)",
			"{",
			"   $0",
			"}"
		],
		"description": "mql4 orderselect loop"
	},
	"for backward": {
		"prefix": "for",
		"body": [
			"for(int i=${1:int max_iter} - 1;i >= 0 ;i--)",
			"{",
			"   $0",
			"}"
		],
		"description": "mql4 orderselect loop"
	},
	"for OrdersTotal": {
		"prefix": "for",
		"body": [
			"for(int i=OrdersTotal()-1;i>=0;i--)",
			"{",
			"   if(OrderSelect(i,SELECT_BY_POS) && OrderSymbol() == _Symbol ${1: other conditions})",
			"   {",
			"      $0",
			"   }",
			"}"
		],
		"description": "mql4 orderselect loop"
	},
	"for OrdersHistoryTotal": {
		"prefix": "for",
		"body": [
			"for(int i=OrdersHistoryTotal()-1;i>=0;i--)",
			"{",
			"   if(OrderSelect(i,SELECT_BY_POS,MODE_HISTORY) && OrderSymbol() == _Symbol ${1: other conditions})",
			"   {",
			"      $0",
			"   }",
			"}"
		],
		"description": "mql4 orderselect loop"
	},
	// "OnStart": {
	// 	"prefix": "onstart",
	// 	"body": ["void OnStart()","{","   $0","}"],
	// 	"description": "Script entry point"
	// },
	"Script_Template": {
		"prefix": "mqltemplate_script",
		"body": [
			"//+------------------------------------------------------------------+",
			"//| ${1:file_name.mq4}.mq4",
			"//| Copyright 2017, ${2:Author Name}",
			"//| ${3:Link}",
			"//+------------------------------------------------------------------+",
			"#property copyright \"Copyright 2017, ${2:Author Name}\"",
			"#property link      \"${3:Link}\"",
			"#property version   \"1.00\"",
			"#property strict",
			"$4",
			" ",
			" ",
			"void OnStart()",
			"{",
			"   $5",
			"}",
			"$0"
		]
	},
	"Expert_Template": {
		"prefix": "mqltemplate_expert",
		"body": [
			"//+------------------------------------------------------------------+",
			"//| ${1:file_name.mq4}.mq4",
			"//| Copyright 2017, ${2:Author Name}",
			"//| ${3:Link}",
			"//+------------------------------------------------------------------+",
			"#property copyright \"Copyright 2017, ${2:Author Name}\"",
			"#property link      \"${3:Link}\"",
			"#property version   \"1.00\"",
			"#property strict",
			"$4",
			" ",
			" ",
			"//+------------------------------------------------------------------+",
			"//| Expert initialization function                                   |",
			"//+------------------------------------------------------------------+",
			"int OnInit()",
			"{",
			"   EventSetTimer(60);",
			"   ",
			"   return(INIT_SUCCEEDED);",
			"}",
			"//+------------------------------------------------------------------+",
			"//| Expert deinitialization function                                 |",
			"//+------------------------------------------------------------------+",
			",void OnDeinit(const int reason)",
			"{",
			" EventKillTimer();",
			"    ",
			"}",
			"//+------------------------------------------------------------------+",
			"//| Expert tick function                                             |",
			"//+------------------------------------------------------------------+",
			"void OnTick()",
			"{",
			"   ",
			"}",
			"//+------------------------------------------------------------------+",
			"//| Timer function                                                   |",
			"//+------------------------------------------------------------------+",
			"void OnTimer()",
			"{",
			"  ",
			"}",
			"//+------------------------------------------------------------------+",
			"//| ChartEvent function                                              |",
			"//+------------------------------------------------------------------+",
			"void OnChartEvent(const int id,",
			"                const long &lparam,",
			"                const double &dparam,",
			"                const string &sparam)",
			"{",
			" ",
			"}",
			"//+------------------------------------------------------------------+",
		],
		"description":"expert advisor template"
	},

	"Function Header": {
		"prefix": "functionheader",
		"body": [
			"//+------------------------------------------------------------------+",
			"//| ${1:type} ${2:FuntionName} : ${3:description}",
			"//+------------------------------------------------------------------+",
			"${1:type} ${2:FunctionName}($4)",
			"{",
			"   $0",
			"}"
		]
	},
}